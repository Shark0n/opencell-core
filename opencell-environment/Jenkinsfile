pipeline {
    environment {  
      NEXUS_VERSION = "nexus3" // This can be nexus3 or nexus2
      NEXUS_PROTOCOL = "https" // This can be http or https
      NEXUS_URL = "nexus.opencell.work" // Where your Nexus is running
      NEXUS_REPOSITORY = "opencell" // Repository where we will upload the artifact        
      NEXUS_CREDENTIAL_ID = "nexus" // Jenkins credential id to authenticate to Nexus OSS
    }
    parameters {
        string(name: 'branch', description: 'Branch', defaultValue: "9.X")
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: ''))
    }
    agent {
        docker {
            image 'maven:3-jdk-11' 
            args '-v /root/.m2:/root/.m2' 
        }
    }
    stages {
        stage("Checkout Meveo") { 
            steps {
                echo "flag: ${params.branch}"
                git branch: "${params.branch}",
                url: 'git://git.assembla.com/meveo.git'
            }
        }
        stage('Build') { 
            steps {
                sh 'mvn -B -Dmaven.test.skip=true clean package' 
            }
        }
        stage('Test') {
            steps {
                sh 'mvn test'
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }
        stage('Import-SQL Build') {
            steps {
                sh 'rm -fr databasechangelog.csv'
                sh 'mvn -f opencell-model/pom.xml -Ddb.url=offline:postgresql?outputLiquibaseSql=true -Prebuild liquibase:updateSQL'
                sh "cp $WORKSPACE/opencell-model/target/liquibase/migrate.sql $WORKSPACE/opencell-model/target/liquibase/import-postgres.sql"
            }
        }
        stage("Publish to Nexus") {

            steps {
                script {

                    pom = readMavenPom file: "pom.xml";//'readMavenPom' step , included in: https://plugins.jenkins.io/pipeline-utility-steps

                    artifactPath = "$WORKSPACE/opencell-admin/web/target/opencell.war";// Extract the path from the File found
                    SQLPath = "$WORKSPACE/opencell-model/target/liquibase/import-postgres.sql";

                    artifactExists = fileExists artifactPath;// Verifying If the artifact name exists

                    if(artifactExists) {

                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";

                        nexusArtifactUploader(

                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,

                            artifacts: [

                                // Artifact generated such as .jar, .ear and .war files.
                                [artifactId: 'opencell',
                                classifier: '',
                                file: artifactPath,
                                type: 'war'],
                                
                                // Import-SQL upload
                                [artifactId: 'opencell',
                                classifier: '',
                                file: SQLPath,
                                type: 'sql'],

                                // Lets upload the pom.xml file for additional information for Transitive dependencies
                                [artifactId: 'pom',
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]

                            ]

                        );

                    } else {

                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
        }
    }
}

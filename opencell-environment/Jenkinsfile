#!/usr/bin/env groovy
pipeline {
    environment {
        URL_SONAR = credentials('Sonar_URL')
        CREDENTIAL_SONAR = credentials('Sonar_ID')
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: ''))
    }
    agent any

    stages {

        stage('Init') {
            steps {
                script {
                    MAVEN_JDK_VERSION = sh (
                        script: '''grep '<java.version>' ./pom.xml | sed -n 's:.*<java.version>\\(.*\\)</java.version>.*:\\1:p' ''',
                        returnStdout: true
                        ).trim()
                    if (!MAVEN_JDK_VERSION?.trim()) {
                        MAVEN_JDK_VERSION="8"
                    }
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    docker.image("maven:3-jdk-$MAVEN_JDK_VERSION").inside('-v /var/jenkins_home/.m2:/var/maven/.m2 -e MAVEN_CONFIG=/var/maven/.m2') {
                        sh 'mvn -B -Duser.home=/var/maven -Dmaven.test.skip=true clean package'
                    }
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    docker.image("maven:3-jdk-$MAVEN_JDK_VERSION").inside('-v /var/jenkins_home/.m2:/var/maven/.m2 -e MAVEN_CONFIG=/var/maven/.m2') {
                        sh 'mvn -Duser.home=/var/maven  test'
                    }
                }
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }

        stage('Import-SQL Build') {
            steps {
                script {
                    docker.image("maven:3-jdk-$MAVEN_JDK_VERSION").inside('-v /var/jenkins_home/.m2:/var/maven/.m2 -e MAVEN_CONFIG=/var/maven/.m2') {
                        sh 'rm -fr databasechangelog.csv'
                        sh 'mvn -f opencell-model/pom.xml -Duser.home=/var/maven -Ddb.url=offline:postgresql?outputLiquibaseSql=true -Prebuild liquibase:updateSQL'
                        sh "cp $WORKSPACE/opencell-model/target/liquibase/migrate.sql $WORKSPACE/opencell-model/target/liquibase/import-postgres.sql"
                    }
                }
            }
        }

        stage('Sonar') {
            when { branch "integration" }
            steps {
                script {
                    docker.image("maven:3-jdk-$MAVEN_JDK_VERSION").inside('-v /var/jenkins_home/.m2:/var/maven/.m2 -e MAVEN_CONFIG=/var/maven/.m2') {
                        sh 'mvn sonar:sonar -Duser.home=/var/maven  ' +
                        '-Dsonar.host.url=${URL_SONAR} ' +
                        '-Dsonar.login=${CREDENTIAL_SONAR} ' +
                        '-Dsonar.projectName=OpencellCore ' +
                        '-Dsonar.junit.reportPaths=target/surefire-reports/ '
                    }
                }
            }
        }
    }
}

#!/usr/bin/env groovy
pipeline {
    environment {
        URL_SONAR = credentials('Sonar_URL')
        CREDENTIAL_SONAR = credentials('Sonar_ID')
        JAVA_VAR = sh (
            script: "grep '<java.version>' ./pom.xml | sed 's/<java\\.version>\\(.*\\)<.*>/\\1/'",
            returnStdout: true
            ).trim()

    }
    options {
        buildDiscarder(logRotator(numToKeepStr: '5', artifactNumToKeepStr: ''))
    }
    agent any

    stages {

        stage('Build') { 
            steps {
                script {
                    if (!JAVA_VAR) {
                        JAVA_VAR="8"
                    }
                    docker.image("maven:3-jdk-$JAVA_VAR").inside('-v /root/.m2:/root/.m2') {
                        sh 'mvn -B -Dmaven.test.skip=true clean package' 
                    }
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    if (!JAVA_VAR) {
                        JAVA_VAR="8"
                    }
                    docker.image("maven:3-jdk-$JAVA_VAR").inside('-v /root/.m2:/root/.m2') {
                        sh 'mvn test' 
                    }
                }
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }
        stage('Import-SQL Build') {
            steps {
                script {
                    if (!JAVA_VAR) {
                        JAVA_VAR="8"
                    }
                    docker.image("maven:3-jdk-$JAVA_VAR").inside('-v /root/.m2:/root/.m2') {
                        sh 'rm -fr databasechangelog.csv'
                        sh 'mvn -f opencell-model/pom.xml -Ddb.url=offline:postgresql?outputLiquibaseSql=true -Prebuild liquibase:updateSQL'
                        sh "cp $WORKSPACE/opencell-model/target/liquibase/migrate.sql $WORKSPACE/opencell-model/target/liquibase/import-postgres.sql" 
                    }
                }
            }
        }
        stage('Sonar') { 
            when { branch "integration" }
            steps {
                script {
                    if (!JAVA_VAR) {
                        JAVA_VAR="8"
                    }
                    docker.image("maven:3-jdk-$JAVA_VAR").inside('-v /root/.m2:/root/.m2') {
                        sh 'mvn sonar:sonar ' + 
                        '-Dsonar.host.url=${URL_SONAR} ' +
                        '-Dsonar.login=${CREDENTIAL_SONAR} ' 
                    }
                }
            }
        }
    }
}
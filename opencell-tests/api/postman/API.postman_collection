{
	"info": {
		"_postman_id": "200ad20c-0f67-4f57-9a8e-817a70d5b23e",
		"name": "Opencell API",
		"description": "# Portal APIs\r\n\r\nHere are all portal APIs. Are tested the CRUD processes when available as well as exceptions that might occure, to assure that everything works as intended.\r\n\r\n### Typical execution\r\n\r\nThe typical test consists of:\r\n1. A successful createOrUpdate (POST) - remplace with create when createOrUpdate is unavailable\r\n2. A successful read (GET) - check if entity created in point 1 is retreived\r\n3. A failed Create (POST) - due to entity already created\r\n4. A failed update (PUT) - due to a non existant entity\r\n5. A succesfull update (PUT) - update entity created in point 1\r\n6. A succesfull createOrUpdate (POST) - update entity created in point 1 - skip this if createOrUpdate is unavailable\r\n7. A successful read (GET) - check if updated entity from point 5 and 6 have been correctly updated\r\n8. Any extra failed tests such as MISSING_PARAMETER or INVALID_PARAMETER\r\n\r\nPlease ensure that tests are correctly asserted in the Tests tab.\r\n\r\n## Table of portal entities\r\n\r\n| Entity                    | Create | Read | Update | Delete | Other           | Exception Handling |\r\n|---------------------------|--------|------|--------|--------|-----------------|--------------------|\r\n| Access                    |        |      |        |        |                 |                    |\r\n| Account Hierarchy         | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Account Operation         | TODO   | TODO | TODO   | TODO   |                 | TODO               |\r\n| Accouting Code            | OK     | OK   | OK     | OK     |                 |                    |\r\n| Addressbook               |        |      |        |        |                 |                    |\r\n| Audit                     |        |      |        |        |                 |                    |\r\n| Billing Account           | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Billing Run               | OK     | NA   | NA     | NA     | Validate/Cancel | OK                 |\r\n| Billing Cycle             | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Business Account          |        |      |        |        |                 |                    |\r\n| Business Offer Model      |        |      |        |        |                 |                    |\r\n| Business Product Model    |        |      |        |        |                 |                    |\r\n| Business Service Model    |        |      |        |        |                 |                    |\r\n| Calendar                  | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Catalog                   |        |      |        |        |                 |                    |\r\n| Channel                   | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Channel and Segments      |        |      |        |        |                 |                    |\r\n| Charge Template           |        |      |        |        |                 |                    |\r\n| Chart                     |        |      |        |        |                 |                    |\r\n| Communication             |        |      |        |        |                 |                    |\r\n| Configuration             |        |      |        |        |                 |                    |\r\n| Contact                   |        |      |        |        |                 |                    |\r\n| Counter Template          |        |      |        |        |                 |                    |\r\n| CountryIso                | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Country                   |        |      |        |        |                 |                    |\r\n| Credit Category           | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Currency                  |        |      |        |        |                 |                    |\r\n| CurrencyIso               | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Custom Entity Instance    | NOK    | NOK  | TODO   | NOK    |                 | NOK                |\r\n| Custom Field Template     |        |      |        |        |                 |                    |\r\n| Custom Table              | NOK    | NOK  | TODO   | NOK    |                 | NOK                |\r\n| Customer                  | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Customer Account          | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Customer Brand            | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Customer Category         | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| DD Request Lot OP         |        |      |        |        |                 |                    |\r\n| Discount Plan             | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Discount Plan Item        |        |      |        |        |                 |                    |\r\n| Document Sign             |        |      |        |        |                 |                    |\r\n| Dunning Document          |        |      |        |        |                 |                    |\r\n| Email Notification        |        |      |        |        |                 |                    |\r\n| Email Template            |        |      |        |        |                 |                    |\r\n| Entity Customization      | NOK    | NOK  | TODO   | NOK    |                 | NOK                |\r\n| File Format               |        |      |        |        |                 |                    |\r\n| File Format               |        |      |        |        |                 |                    |\r\n| Filter                    |        |      |        |        |                 |                    |\r\n| Generic Workflow          |        |      |        |        |                 |                    |\r\n| Iban                      |        |      |        |        |                 |                    |\r\n| Import Export             |        |      |        |        |                 |                    |\r\n| Invoice                   | OK     | OK   | NA     | NA     | Generate        |                    |\r\n| Invoice Category          | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Invoice Sequence          | OK     | OK   | OK     | NA     |                 | OK                 |\r\n| Invoice SubCategory       | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Invoice Type              | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Invoicing                 |        |      |        |        |                 |                    |\r\n| Job Instance              | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Job Trigger               |        |      |        |        |                 |                    |\r\n| LanguageIso               | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Language                  |        |      |        |        |                 |                    |\r\n| Measurable Quantity       |        |      |        |        |                 |                    |\r\n| Mediation                 |        |      |        |        |                 |                    |\r\n| Metric Configuration      |        |      |        |        |                 |                    |\r\n| Meveo Instance            |        |      |        |        |                 |                    |\r\n| Module                    | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Notification              |        |      |        |        |                 |                    |\r\n| OccTemplate               | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Offer Template            | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Offer Template Category   |        |      |        |        |                 |                    |\r\n| One Shot Charge Template  |        |      |        |        |                 |                    |\r\n| Order                     |        |      |        |        |                 |                    |\r\n| Payment Gateway           | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Payment Method            | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Payment Schedule          | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Payment                   |        |      |        |        |                 |                    |\r\n| PDF Document              |        |      |        |        |                 |                    |\r\n| PdfInvoice                |        |      |        |        |                 |                    |\r\n| Price Plan                | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Provider                  | OK     | OK   | OK     | NA     |                 | OK                 |\r\n| Provider Contact          | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Query                     |        |      |        |        |                 |                    |\r\n| Quote                     |        |      |        |        |                 |                    |\r\n| Rated Transation          |        |      |        |        |                 |                    |\r\n| Tax                       | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Recurring Charge Template | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Refund                    |        |      |        |        |                 |                    |\r\n| Report Extract            |        |      |        |        |                 |                    |\r\n| Revenue Recognition Rules |        |      |        |        |                 |                    |\r\n| Role                      | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Rum Sequence              |        |      |        |        |                 |                    |\r\n| Script Instance           | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Seller                    | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Service Template          | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| SMS Notification          |        |      |        |        |                 |                    |\r\n| Subscription              | OK     | OK   | OK     | OK     | Activate        | OK                 |\r\n| Tax Category              |        |      |        |        |                 |                    |\r\n| Tax Class                 | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Tax Mapping               |        |      |        |        |                 |                    |\r\n| Terminate Reason          | OK     | TODO | TODO   | TODO   |                 | TODO               |\r\n| Timer Entity              |        |      |        |        |                 |                    |\r\n| Title                     | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Triggered Edr             |        |      |        |        |                 |                    |\r\n| Unit of Measure           |        |      |        |        |                 |                    |\r\n| Unitary Custom Table      |        |      |        |        |                 |                    |\r\n| Usage                     |        |      |        |        |                 |                    |\r\n| Usage Charge Template     |        |      |        |        |                 |                    |\r\n| User                      |        |      |        |        |                 |                    |\r\n| User Account              | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| User Hierarchy            |        |      |        |        |                 |                    |\r\n| Wallet                    | OK     | OK   | TODO   | NA     |                 | OK                 |\r\n| WebHook Notification      |        |      |        |        |                 |                    |\r\n| Workflow                  |        |      |        |        |                 |                    |",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Accounting",
			"item": [
				{
					"name": "Account Code",
					"item": [
						{
							"name": "CreateOrUpdate Accounting Code SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "160fa793-fab2-4071-8424-fe01cbb987bb",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_AC\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULAR\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/accountingCode/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"accountingCode",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Accounting Code SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "617e6057-0ee2-4952-bc09-7d970ab10ca9",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\") + \"_AC\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.accountingCode.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_AC\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.accountingCode.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/accountingCode?accountingCode={{testCode}}_AC",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"accountingCode"
									],
									"query": [
										{
											"key": "accountingCode",
											"value": "{{testCode}}_AC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Accounting Code ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2fda4706-10db-4745-89a1-5a4c1108545a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"AccountingCode with code=\"+pm.collectionVariables.get(\"testCode\")+\"_AC already exists.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_AC\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULAR\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/accountingCode",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"accountingCode"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Accounting Code ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aae379ab-ae37-460d-8794-8a103533b87b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"AccountingCode with code=NOT_EXIST does not exists.\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"chartOfAccountTypeEnum\": \"ASSETS\",\r\n    \"chartOfAccountViewTypeEnum\": \"REGULAR\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/accountingCode",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"accountingCode"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Accounting Code SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "775d9f44-cc11-441e-8f4c-50277e2f65fa",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_AC\",\r\n\t\"description\": \"{{testDescription}} updated\",\r\n\t\"disabled\": false,\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULAR\",\r\n\t\"migrated\": false\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/accountingCode",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"accountingCode"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Accounting Code SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "550cb985-67eb-41d1-b4af-0aeadd867218",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_AC\",\r\n\t\"description\": \"{{testDescription}} updated\",\r\n\t\"disabled\": false,\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULAR\",\r\n\t\"migrated\": false\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/accountingCode/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"accountingCode",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Accounting Code SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "04b06467-3dfa-48ea-8fdc-cecd41367a92",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\")+\"_AC\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.accountingCode.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_AC\");",
											"});",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.accountingCode.description).to.eql(pm.collectionVariables.get(\"testDescription\")+ \" updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/accountingCode?accountingCode={{testCode}}_AC",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"accountingCode"
									],
									"query": [
										{
											"key": "accountingCode",
											"value": "{{testCode}}_AC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Accounting Code MISSING_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b132e0b8-ed5e-478c-a6e3-36d93051dfe3",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"description\": \"{{testDescription}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/accountingCode/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"accountingCode",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Accounting Code INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "08cf3330-db91-4464-a4c5-96e726c6d801",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `org.meveo.model.billing.ChartOfAccountViewTypeEnum`\");",
											"});",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULARXX\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/accountingCode/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"accountingCode",
										"createOrUpdate"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "OCC Template",
					"item": [
						{
							"name": "CreateOrUpdate OCC Template SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e00470df-9ede-4964-befe-609f3f548724",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"{{testCode}}_OCCT\",\r\n  \"accountingCode\": \"{{testCode}}_AC\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"occCategory\": \"DEBIT\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/occTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"occTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create OCC Template ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6311645b-c344-402e-aa4e-8ec68172bd1a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"OCCTemplate with code=\"+pm.collectionVariables.get(\"testCode\")+\"_OCCT already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"{{testCode}}_OCCT\",\r\n  \"accountingCode\": \"{{testCode}}_AC\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"occCategory\": \"DEBIT\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/occTemplate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"occTemplate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update OCC Template ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0040604f-5977-4547-bec6-1c17bd69ef23",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"OCCTemplate with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"NOT_EXIST\",\r\n  \"accountingCode\": \"{{testCode}}_AC\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"occCategory\": \"DEBIT\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/occTemplate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"occTemplate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update OCC Template SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eed9b5ab-eb05-4e9c-8a87-0d000a534d7e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"{{testCode}}_OCCT\",\r\n  \"accountingCode\": \"{{testCode}}_AC\",\r\n  \"description\": \"{{testDescription}} updated\",\r\n  \"occCategory\": \"DEBIT\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/occTemplate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"occTemplate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate OCC Template SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f6e1c62-9db5-47f2-9947-a651a7f2fe6d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"{{testCode}}_OCCT\",\r\n  \"accountingCode\": \"{{testCode}}_AC\",\r\n  \"description\": \"{{testDescription}} updated\",\r\n  \"occCategory\": \"DEBIT\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/occTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"occTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate OCC Template MISSING_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "83cdc055-df7c-452d-ba9c-dd364604845b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: accountCode / accountingCode.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"{{testCode}}_Missing\",\r\n  \"description\": \"{{testDescription}} missing\",\r\n  \"occCategory\": \"DEBIT\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/occTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"occTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate OCC Template INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63d16c7d-a8f5-4cc0-9585-7a9136740bc3",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `org.meveo.model.payments.OperationCategoryEnum` from String\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"{{testCode}}_INVALID\",\r\n  \"description\": \"{{testDescription}} invalid\",\r\n  \"occCategory\": \"INVALID\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/occTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"occTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Clear Data",
					"item": [
						{
							"name": "Delete Accounting Code INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "95e442ce-3428-4091-a090-50dec96fdbf3",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"is still referenced from table\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"description\": \"123\",\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULARXX\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/accountingCode/{{testCode}}_AC",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"accountingCode",
										"{{testCode}}_AC"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete OCC Template SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84f9f7ac-330c-4436-b6af-2a0e0ecd4ce7",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"{{testCode}}\",\r\n  \"description\": \"{{testDescription}} invalid\",\r\n  \"occCategory\": \"INVALID\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/occTemplate/{{testCode}}_OCCT",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"occTemplate",
										"{{testCode}}_OCCT"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete OCC Template FAIL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da208dd5-1dd3-4adb-9122-bfdbc913ba9e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"OCCTemplate with code=\"+pm.collectionVariables.get(\"testCode\")+\"_OCCT does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"{{testCode}}\",\r\n  \"description\": \"{{testDescription}} invalid\",\r\n  \"occCategory\": \"INVALID\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/occTemplate/{{testCode}}_OCCT",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"occTemplate",
										"{{testCode}}_OCCT"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Accounting Code SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5800e24c-82d7-4cc8-b22a-084e19279429",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"description\": \"123\",\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULARXX\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/accountingCode/{{testCode}}_AC",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"accountingCode",
										"{{testCode}}_AC"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Accounting Code FAIL",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1102e553-f2f0-4538-bf71-1b531faf9b44",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"AccountingCode with code=\"+pm.collectionVariables.get(\"testCode\")+\"_AC does not exists.\");",
											"",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"description\": \"123\",\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULARXX\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/accountingCode/{{testCode}}_AC",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"accountingCode",
										"{{testCode}}_AC"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Accounts",
			"item": [
				{
					"name": "BillingCycle",
					"item": [
						{
							"name": "CreateOrUpdate Billing Cylcle SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7bc4f378-ac4c-4d97-8d09-9fc621309567",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"{{testCode}}_BC\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"billingTemplateName\": \"{{testCode}}_BTN\",\r\n  \"invoiceDateDelay\": \"0\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"transactionDateDelay\": \"0\",\r\n  \"invoicingThreshold\": 0.01,\r\n  \"calendar\": \"MONTHLY\",\r\n  \"invoiceTypeCode\": \"ADJ\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billingCycle",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Billing Cycle ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ef9350b7-aab5-43f4-9e39-2e9abc399b92",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"BillingCycle with code=\"+pm.collectionVariables.get(\"testCode\")+\"_BC already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"{{testCode}}_BC\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"billingTemplateName\": \"{{testCode}}_BTN\",\r\n  \"invoiceDateDelay\": \"0\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"transactionDateDelay\": \"0\",\r\n  \"invoicingThreshold\": 0.01,\r\n  \"calendar\": \"MONTHLY\",\r\n  \"invoiceTypeCode\": \"ADJ\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billingCycle",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billingCycle"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Billing Cycle SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "388d6422-2885-411c-b9d6-1435755530c7",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.billingCycle.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_BC\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.billingCycle.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billingCycle?billingCycleCode={{testCode}}_BC",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billingCycle"
									],
									"query": [
										{
											"key": "billingCycleCode",
											"value": "{{testCode}}_BC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Billing Cycle ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3aba7239-9a45-44c5-8600-e7e4d35adb5c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"BillingCycle with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"NOT_EXIST\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"billingTemplateName\": \"{{testCode}}_BtN\",\r\n  \"invoiceDateDelay\": \"0\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"transactionDateDelay\": \"0\",\r\n  \"invoicingThreshold\": 0.01,\r\n  \"calendar\": \"MONTHLY\",\r\n  \"invoiceTypeCode\": \"ADJ\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billingCycle",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billingCycle"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Billing Cycle SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23bf4f41-c80f-443a-be78-b93be475fe7a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"{{testCode}}_BC\",\r\n  \"description\": \"{{testDescription}} updated\",\r\n  \"billingTemplateName\": \"TEST\",\r\n  \"invoiceDateDelay\": \"0\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"transactionDateDelay\": \"0\",\r\n  \"invoicingThreshold\": 0.01,\r\n  \"calendar\": \"MONTHLY\",\r\n  \"invoiceTypeCode\": \"ADJ\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billingCycle",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billingCycle"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Billing Cycle SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a0fdc06-e7e6-44b9-880f-33d48174e705",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"{{testCode}}_BC\",\r\n  \"description\": \"{{testDescription}} updated\",\r\n  \"billingTemplateName\": \"TEST\",\r\n  \"invoiceDateDelay\": \"0\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"transactionDateDelay\": \"0\",\r\n  \"invoicingThreshold\": 0.01,\r\n  \"calendar\": \"MONTHLY\",\r\n  \"invoiceTypeCode\": \"ADJ\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billingCycle",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read  Billing Cycle SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e1e973fe-c4bb-432b-9d70-7a99f2e84a75",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.billingCycle.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_BC\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.billingCycle.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billingCycle?billingCycleCode={{testCode}}_BC",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billingCycle"
									],
									"query": [
										{
											"key": "billingCycleCode",
											"value": "{{testCode}}_BC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Billing Cycle MISSING_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b031ac4-f135-41f6-ab5f-1b84fe8ffdd7",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: invoiceDateDelay.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"MISSING\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"calendar\": \"MONTHLY\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billingCycle",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Billing Cycle ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a9e5f5f-a674-4a50-a9ee-ae6c472d45b0",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Calendar with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"{{testCode}}_BC\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"invoiceDateDelay\": \"0\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"calendar\": \"NOT_EXIST\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billingCycle",
										"createOrUpdate"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Seller",
					"item": [
						{
							"name": "CreateOrUpdate Seller SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "72ac0231-7dc3-419e-aa76-f370f12c728c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"code\":\"{{testCode}}_SELLER\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"parentSeller\":\"SELLER_FR\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Seller SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f5a164e-ff03-4487-b1b7-096829648cc8",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Seller with code=\"+pm.collectionVariables.get(\"testCode\")+\"_SELLER already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"code\":\"{{testCode}}_SELLER\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"parentSeller\":\"SELLER_FR\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Seller SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79a560ce-de7b-4579-a3b6-45caf095b6d2",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.seller.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_SELLER\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.seller.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode={{testCode}}_SELLER",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "{{testCode}}_SELLER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Seller ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ecc2282-cbb7-4971-b5a6-a327fa93693b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Seller with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"code\":\"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"parentSeller\":\"SELLER_FR\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Seller SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a60a183b-4e32-4702-a18f-48f338b2d310",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"code\":\"{{testCode}}_SELLER\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"parentSeller\":\"SELLER_FR\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Seller SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "44a326e5-8e7b-44e7-94cf-fb32620a3e7c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{   \r\n    \"code\":\"{{testCode}}_SELLER\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"parentSeller\":\"SELLER_FR\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Seller SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3c688d60-79df-4a74-991e-6cce326c6dba",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.seller.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_SELLER\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.seller.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller?sellerCode={{testCode}}_SELLER",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller"
									],
									"query": [
										{
											"key": "sellerCode",
											"value": "{{testCode}}_SELLER"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Seller ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "641f6688-a6f1-4ba3-81c6-2856ee4ec13e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Seller with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_SELLER\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"parentSeller\": \"NOT_EXIST\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller",
										"createOrUpdate"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "CustomerBrand",
					"item": [
						{
							"name": "CreateOrUpdate CustomerBrand SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b15da05d-a2fc-45aa-8e46-232abce53d38",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_CB\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/createOrUpdateBrand",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"createOrUpdateBrand"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create CustomerBrand ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f636553-f0d1-4b29-8d1c-e3d278e0a29c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"CustomerBrand with code=\"+pm.collectionVariables.get(\"testCode\")+\"_CB already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_CB\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/createBrand",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"createBrand"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update CustomerBrand ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7dc49561-a757-4736-9962-b01a4ff672ec",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"CustomerBrand with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/updateBrand",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"updateBrand"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update CustomerBrand SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "716fa9eb-324f-4707-99a5-bfbee3237b82",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_CB\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/updateBrand",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"updateBrand"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate CustomerBrand SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a44c4126-9e8f-49aa-9226-6164f710dfec",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_CB\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/createOrUpdateBrand",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"createOrUpdateBrand"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate CustomerBrand MISSING_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d3ee19b3-efce-4504-a2fa-26691be11b87",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/createOrUpdateBrand",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"createOrUpdateBrand"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Customer Category",
					"item": [
						{
							"name": "CreateOrUpdate Customer Category SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e1294be4-a557-4dd7-86df-81551efffa81",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_CC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/createOrUpdateCategory",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"createOrUpdateCategory"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read  Customer Category SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2e44a3f-6507-4e3c-8227-bb0650b1b904",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.customerCategory.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_CC\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.customerCategory.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/category/{{testCode}}_CC",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"category",
										"{{testCode}}_CC"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Customer Category ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b69a949b-f5ed-4329-8e6f-944ec28dba9d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"CustomerCategory with code=\"+pm.collectionVariables.get(\"testCode\")+\"_CC already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_CC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/createCategory",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"createCategory"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Customer Category ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dab8c7ee-b070-4c6d-bb3a-016956221053",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"CustomerCategory with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/updateCategory",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"updateCategory"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Customer Category SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f099e7a5-95c7-42f3-b3aa-98a4d144d79b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_CC\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/updateCategory",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"updateCategory"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Customer Category SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc214182-38d5-4d2f-9ab8-34e0b21d8fd4",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_CC\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/createOrUpdateCategory",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"createOrUpdateCategory"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Customer Category SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b42a46f1-cd2f-41d2-a609-6f3fe526e737",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.customerCategory.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_CC\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.customerCategory.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/category/{{testCode}}_CC",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"category",
										"{{testCode}}_CC"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Customer Category MISSING_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "36277864-fcc5-4efc-a957-d8ccf0e15f41",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"description\": \"{{testCode}}\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/createOrUpdateCategory",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"createOrUpdateCategory"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Customer Category ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b8ef170c-2063-4f74-ada4-e6b4d7db5017",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"AccountingCode with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_CC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\",\r\n    \"accountingCode\": \"NOT_EXIST\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/createOrUpdateCategory",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"createOrUpdateCategory"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Customer Category INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "427af382-d27f-4cda-a04b-ab0ea03ad812",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Boolean` from String\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_CC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"exoneratedFromTaxes\": \"INVALID\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/createOrUpdateCategory",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"createOrUpdateCategory"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Customer",
					"item": [
						{
							"name": "CreateOrUpdate Customer SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "967cd8bb-6deb-4f74-b00f-f5c46a0b0088",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Customer SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06eb2b15-4653-40da-a69a-38189c836a5b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.customer.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_C\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.customer.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer?customerCode={{testCode}}_C",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									],
									"query": [
										{
											"key": "customerCode",
											"value": "{{testCode}}_C"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Customer ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f14c7b63-8042-4517-b2da-a8d888a08e03",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Customer with code=\"+pm.collectionVariables.get(\"testCode\")+\"_C already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Customer ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2c385b9c-a9e3-4fca-89af-0705556c7ade",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Customer with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Customer SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "85ce75a6-9891-47c8-bfc9-abf999577ee8",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Customer with no other Fields SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e3fb587-5ce6-47f8-962b-a32667a5e28e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_C\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Customer SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1b286c45-564a-4451-9923-becf56d4501f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Customer SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c3b5a8c0-f411-4eed-b46a-207dd4ad6e2e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.customer.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_C\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.customer.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer?customerCode={{testCode}}_C",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									],
									"query": [
										{
											"key": "customerCode",
											"value": "{{testCode}}_C"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Customer MISSING_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8630c50a-d4d2-46d5-91fb-814db4da9f4b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: customerCategory.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_C_INVALID\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\t\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Customer ENTITY_DOES_NOT_EXISTS_EXCEPTION 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a77cd241-c49b-4a60-81f4-cd03b0e66d7b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Seller with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"NOT_EXIST\",\r\n    \"mandateIdentification\": \"\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Customer ENTITY_DOES_NOT_EXISTS_EXCEPTION 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b4e475a-b991-42fc-9164-363118c6b902",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"CustomerCategory with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"NOT_EXIST\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Customer ENTITY_DOES_NOT_EXISTS_EXCEPTION 3",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67318392-71a2-4ad0-a54e-3d648f0dcaa4",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"CustomerBrand with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"NOT_EXIST\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"createOrUpdate"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "CustomerAccount",
					"item": [
						{
							"name": "CreateOrUpdate CustomerAccount SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21c6f37c-7ff6-415f-99ee-b906fb61b15e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_CA\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read CustomerAccount SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "51f5d10a-6162-4905-9d97-83af1a0d105c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.customerAccount.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_CA\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.customerAccount.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{testCode}}_CA",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount"
									],
									"query": [
										{
											"key": "customerAccountCode",
											"value": "{{testCode}}_CA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create CustomerAccount ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "74371c18-79e2-4e6f-8480-d3d87c6d91f0",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"CustomerAccount with code=\"+pm.collectionVariables.get(\"testCode\")+\"_CA already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_CA\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update CustomerAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "161fdcfe-678c-49de-b819-54935af55dae",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"CustomerAccount with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update CustomerAccount SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bdd26988-624d-4ced-b454-70091a37f1ba",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_CA\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate CustomerAccount SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "84756a02-de66-4f40-9928-6fba9f5debe1",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_CA\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read CustomerAccount SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dc8973f4-a7fc-4433-acc4-b40b64c83cc8",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.customerAccount.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_CA\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.customerAccount.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{testCode}}_CA",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount"
									],
									"query": [
										{
											"key": "customerAccountCode",
											"value": "{{testCode}}_CA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate CustomerAccount MISSING_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d84f0dcc-f347-41c8-8b47-01ff8aa9077b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: currency, language.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_CA\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate CustomerAccount INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a259133b-192e-444e-b500-136410ddc734",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.util.Date` from String\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_CA\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"mandateDate\": \"INVALID\"\r\n}\r\n\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate CustomerAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6a2e602a-bd26-4f69-890a-508999e91ff0",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Customer with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"customer\": \"NOT_EXIST\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "BillingAccount",
					"item": [
						{
							"name": "CreateOrUpdate BillingAccount SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b86de50a-f61d-4a6b-8a05-c38f235ef331",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_BA\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read BillingAccount SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6d7f5f3e-eea8-40a5-8b23-c4d45a5036ef",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.billingAccount.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_BA\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.billingAccount.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
											"});",
											"",
											"pm.test(request.name + \" - Billing Cycle is correct \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.billingAccount.billingCycle).to.eql(pm.collectionVariables.get(\"testCode\")+\"_BC\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{testCode}}_BA",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount"
									],
									"query": [
										{
											"key": "billingAccountCode",
											"value": "{{testCode}}_BA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create BillingAccount ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "34b49a8e-435f-4521-b90c-1babc6b15a25",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"BillingAccount with code=\"+pm.collectionVariables.get(\"testCode\")+\"_BA already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_BA\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update BillingAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "198819db-7f57-4840-8664-2af0a715cf30",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"BillingAccount with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update BillingAccount SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db83d86f-a0f6-4837-938c-89e6a5311da5",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_BA\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update BillingAccount SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a50f6417-6bf1-42a9-9ce1-5f70cbc20a08",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_BA\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read BillingAccount SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "70babbb6-06d5-4c70-8ce8-9ab2d0804bff",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.billingAccount.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_BA\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.billingAccount.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
											"});",
											"",
											"pm.test(request.name + \" - Billing Cycle is correct \", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.billingAccount.billingCycle).to.eql(pm.collectionVariables.get(\"testCode\")+\"_BC\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{testCode}}_BA",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount"
									],
									"query": [
										{
											"key": "billingAccountCode",
											"value": "{{testCode}}_BA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate BillingAccount MISSING_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ba9cb184-4b1c-46f2-8ce8-697f5f572e72",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: country, language.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"MISSING\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate BillingAccount INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "83296477-c4c4-4c5f-bfeb-3b5034c2da27",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.util.Date` from String\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_BA\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\",\r\n    \"subscriptionDate\": \"INVALID\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate BillingAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4566581e-961c-4f70-9113-b774364a0d0c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"CustomerAccount with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_BA\",\r\n    \"customerAccount\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "UserAccount",
					"item": [
						{
							"name": "CreateOrUpdate UserAccount SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d864a987-b7f4-43d7-b5f6-41b4718db722",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{testCode}}_UA\",\r\n\t\"description\" : \"{{testDescription}}\",\r\n\t\"billingAccount\": \"{{testCode}}_BA\",\r\n\t\"terminationReason\": \"TR_NONE\",\r\n\t\"terminationDate\": \"2018-09-14\",\r\n\t\"status\": \"ACTIVE\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read UserAccount SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c63bbc7f-ca6b-44c5-90bd-8834736bccbe",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.userAccount.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_UA\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.userAccount.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{testCode}}_UA",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount"
									],
									"query": [
										{
											"key": "userAccountCode",
											"value": "{{testCode}}_UA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create UserAccount ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d555a86f-ce39-4635-8099-b6f9af43ae01",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"UserAccount with code=\"+pm.collectionVariables.get(\"testCode\")+\"_UA already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{testCode}}_UA\",\r\n\t\"description\" : \"{{testDescription}}\",\r\n\t\"billingAccount\": \"{{testCode}}_BA\",\r\n\t\"terminationReason\": \"TR_NONE\",\r\n\t\"terminationDate\": \"2018-09-14\",\r\n\t\"status\": \"ACTIVE\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update UserAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fb97e8bf-0172-45f9-b3b3-ea689a07c001",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"UserAccount with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"NOT_EXIST\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"billingAccount\": \"{{testCode}}_BA\",\r\n\t\"terminationReason\": \"TR_NONE\",\r\n\t\"terminationDate\": \"2018-09-14\",\r\n\t\"status\": \"ACTIVE\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update UserAccount SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "33011260-f55a-45b6-a096-abc32992fc16",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{testCode}}_UA\",\r\n\t\"description\": \"{{testDescription}} updated\",\r\n\t\"billingAccount\": \"{{testCode}}_BA\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate UserAccount SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "974789b8-1c95-4fce-b2fc-98194dc3a780",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{testCode}}_UA\",\r\n\t\"description\": \"{{testDescription}} updated\",\r\n\t\"billingAccount\": \"{{testCode}}_BA\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read UserAccount SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "220309bd-2d91-48c9-9db2-f379eebf728d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.userAccount.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_UA\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.userAccount.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{testCode}}_UA",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount"
									],
									"query": [
										{
											"key": "userAccountCode",
											"value": "{{testCode}}_UA"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate UserAccount MISSING_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "49bc20e2-1292-46c9-bff8-a6356df2e74d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: billingAccount.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\t\"code\": \"MISSING\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate UserAccount INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "628fec4b-af70-4f54-ad0d-baa2cf6c613d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `org.meveo.model.billing.AccountStatusEnum` from String\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\t\"code\": \"{{testCode}}_UA\", \r\n\t\"billingAccount\":\"{{testCode}}_BA\",\r\n\t\"terminationReason\":\"TR\",\r\n\t\"terminationDate\":\"2018-09-14\",\r\n\t\"status\" : \"INVALID\" \r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate UserAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "18d76de2-a7b7-4acf-8940-eea216bc4483",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"BillingAccount with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\t\"code\": \"{{testCode}}_UA\", \r\n\t\"billingAccount\":\"NOT_EXIST\",\r\n\t\"terminationReason\":\"TR\",\r\n\t\"terminationDate\":\"2018-09-14\",\r\n\t\"status\" : \"ACTIVE\" \r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount",
										"createOrUpdate"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Provider Contact",
					"item": [
						{
							"name": "CreateOrUpdate Provider Contact SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7e04f94a-bd1e-4fca-8cf0-937ed163c459",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/providerContact/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"providerContact",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Provider Contact SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52b02eae-f937-4837-ac79-b853fa384cdd",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.providerContact.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_PC\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.providerContact.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/providerContact?providerContactCode={{testCode}}_PC",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"providerContact"
									],
									"query": [
										{
											"key": "providerContactCode",
											"value": "{{testCode}}_PC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Provider Contact ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "261e1b4a-7778-468c-83bf-570ed455238f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"ProviderContact with code=\"+pm.collectionVariables.get(\"testCode\")+\"_PC already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/providerContact",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"providerContact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Provider Contact ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cab692b9-6786-4728-8fdd-65bbdb609a49",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"ProviderContact with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/providerContact",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"providerContact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Provider Contact SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "21d29df7-5705-480e-a32b-6a0259fd9a64",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/providerContact",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"providerContact"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Provider Contact SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "922ba0e2-7c6c-4c27-be27-1f848de2a7d3",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/providerContact/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"providerContact",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Provider Contact SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6cdb5cd-c9c3-4128-830b-534328963056",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.providerContact.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_PC\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.providerContact.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/providerContact?providerContactCode={{testCode}}_PC",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"providerContact"
									],
									"query": [
										{
											"key": "providerContactCode",
											"value": "{{testCode}}_PC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Provider Contact MISSING_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d8f57ca1-3030-400f-90aa-c4a447326117",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: description.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/providerContact/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"providerContact",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Provider Contact INTERNAL_SERVER_ERROR",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3fcf272-39f7-4fb8-8075-0a5d734de357",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"At least 1 of the field in Contact Information tab is required [email, genericEmail, phone, mobile].\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/providerContact",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"providerContact"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Provider Contact INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "41665e04-a887-40a1-b126-a55dd747d575",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot construct instance of `org.meveo.api.dto.account.AddressDto`\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": \"INVALID\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/providerContact",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"providerContact"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Provider Contact SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "657e0773-9e67-47ba-8532-1bb180a79279",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/providerContact/{{testCode}}_PC",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"providerContact",
										"{{testCode}}_PC"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Provider Contact ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d96a4230-96ba-4e33-a92c-d360a1ff7553",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"ProviderContact with code=\"+pm.collectionVariables.get(\"testCode\")+\"_PC does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/providerContact/{{testCode}}_PC",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"providerContact",
										"{{testCode}}_PC"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Account Hierarchy",
					"item": [
						{
							"name": "CreateOrUpdate Account Hierarchy SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "622694a3-6575-4808-b1fe-3e3f6ca53bde",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"email\": \"test@test.com\",\r\n\t\"customerCode\": \"{{testCode}}_CH\",\r\n\t\"sellerCode\": \"{{testCode}}_SELLER\",\r\n\t\"customerBrandCode\": \"{{testCode}}_CB\",\r\n\t\"customerCategoryCode\": \"{{testCode}}_CC\",\r\n\t\"currencyCode\": \"USD\",\r\n\t\"countryCode\": \"US\",\r\n\t\"languageCode\": \"ENG\",\r\n\t\"billingCycleCode\": \"{{testCode}}_BC\",\r\n\t\"titleCode\": \"MR\",\r\n\t\"firstName\": \"created\",\r\n\t\"lastName\": \"TEST\",\r\n\t\"phoneNumber\": \"+102354749\",\r\n\t\"address1\": \"Address1\",\r\n\t\"address2\": \"Address2\",\r\n\t\"zipCode\": \"4050\",\r\n\t\"city\": \"Los Banos\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"accountHierarchy",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Account Hierarchy SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8ea4aab4-9beb-408c-9992-b722f91b6874",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.customer.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_CH\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.customer.name.firstName).to.eql(\"created\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer?customerCode={{testCode}}_CH",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									],
									"query": [
										{
											"key": "customerCode",
											"value": "{{testCode}}_CH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Account Hierarchy ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "847d9e5a-28e9-42a3-b628-076d40f38351",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Customer with code=\"+pm.collectionVariables.get(\"testCode\")+\"_CH already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"email\": \"test@test.com\",\r\n\t\"customerCode\": \"{{testCode}}_CH\",\r\n\t\"sellerCode\": \"{{testCode}}_SELLER\",\r\n\t\"customerBrandCode\": \"{{testCode}}_CB\",\r\n\t\"customerCategoryCode\": \"{{testCode}}_CC\",\r\n\t\"currencyCode\": \"USD\",\r\n\t\"countryCode\": \"US\",\r\n\t\"languageCode\": \"ENG\",\r\n\t\"billingCycleCode\": \"{{testCode}}_BC\",\r\n\t\"titleCode\": \"MR\",\r\n\t\"firstName\": \"created\",\r\n\t\"lastName\": \"TEST\",\r\n\t\"phoneNumber\": \"+102354749\",\r\n\t\"address1\": \"Address1\",\r\n\t\"address2\": \"Address2\",\r\n\t\"zipCode\": \"4050\",\r\n\t\"city\": \"Los Banos\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/accountHierarchy",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"accountHierarchy"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Account Hierarchy ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9f13dfe2-093e-4047-97fb-ccfa12825277",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Customer with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"customerCode\": \"NOT_EXIST\",\r\n    \"sellerCode\": \"{{testCode}}_SELLER\",\r\n    \"customerBrandCode\": \"{{testCode}}_CB\",\r\n    \"customerCategoryCode\": \"{{testCode}}_CC\",\r\n    \"currencyCode\": \"USD\",\r\n    \"countryCode\": \"US\",\r\n    \"languageCode\": \"ENG\",\r\n    \"billingCycleCode\": \"{{testCode}}_BC\",\r\n    \"titleCode\": \"MR\",\r\n    \"firstName\": \"updated\",\r\n    \"lastName\": \"TEST\",\r\n    \"phoneNumber\": \"+102354749\",\r\n    \"address1\": \"Address1\",\r\n    \"address2\": \"Address2\",\r\n    \"zipCode\": \"4050\",\r\n    \"city\": \"Los Banos\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/accountHierarchy",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"accountHierarchy"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Account Hierarchy SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "efde6b65-abf6-438d-9350-e3f0ebf72aa1",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"customerCode\": \"{{testCode}}_CH\",\r\n    \"sellerCode\": \"{{testCode}}_SELLER\",\r\n    \"customerBrandCode\": \"{{testCode}}_CB\",\r\n    \"customerCategoryCode\": \"{{testCode}}_CC\",\r\n    \"currencyCode\": \"USD\",\r\n    \"countryCode\": \"US\",\r\n    \"languageCode\": \"ENG\",\r\n    \"billingCycleCode\": \"{{testCode}}_BC\",\r\n    \"titleCode\": \"MR\",\r\n    \"firstName\": \"updated\",\r\n    \"lastName\": \"TEST\",\r\n    \"phoneNumber\": \"+102354749\",\r\n    \"address1\": \"Address1\",\r\n    \"address2\": \"Address2\",\r\n    \"zipCode\": \"4050\",\r\n    \"city\": \"Los Banos\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/accountHierarchy",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"accountHierarchy"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Account Hierarchy SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e808d99c-9599-44dc-95eb-d66e4de04a6b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"customerCode\": \"{{testCode}}_CH\",\r\n    \"sellerCode\": \"SELLER_US\",\r\n    \"customerBrandCode\": \"{{testCode}}_CB\",\r\n    \"customerCategoryCode\": \"{{testCode}}_CC\",\r\n    \"currencyCode\": \"USD\",\r\n    \"countryCode\": \"US\",\r\n    \"languageCode\": \"ENG\",\r\n    \"billingCycleCode\": \"{{testCode}}_BC\",\r\n    \"titleCode\": \"MR\",\r\n    \"firstName\": \"updated\",\r\n    \"lastName\": \"TEST\",\r\n    \"phoneNumber\": \"+102354749\",\r\n    \"address1\": \"Address1\",\r\n    \"address2\": \"Address2\",\r\n    \"zipCode\": \"4050\",\r\n    \"city\": \"Los Banos\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"accountHierarchy",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Account Hierarchy SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c176207b-2ea2-49cc-8d64-ec0ff4bb14f5",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.customer.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_CH\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.customer.name.firstName).to.eql(\"updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer?customerCode={{testCode}}_CH",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer"
									],
									"query": [
										{
											"key": "customerCode",
											"value": "{{testCode}}_CH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Account Hierarchy MISSING_PARAMETER 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3fb1087-4dad-4d8f-ac86-504069355348",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: customerCode, customerCategoryCode, sellerCode, currencyCode, countryCode, billingCycleCode, languageCode, email.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/accountHierarchy",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"accountHierarchy"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Account Hierarchy MISSING_PARAMETER 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "09cab162-1581-4a2b-8ea7-2348a07ea50e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: customerCategoryCode, sellerCode, currencyCode, countryCode, billingCycleCode, languageCode, email.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"customerCode\": \"{{testCode}}_CH\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/accountHierarchy",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"accountHierarchy"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Account Hierarchy ENTITY_DOES_NOT_EXISTS_EXCEPTION 1",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0df59a5b-0e60-4f2a-a3b5-6ba1042577b5",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Currency with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"customerCode\": \"{{testCode}}_CH\",\r\n    \"sellerCode\": \"{{testCode}}_SELLER\",\r\n    \"customerBrandCode\": \"{{testCode}}_CB\",\r\n    \"customerCategoryCode\": \"{{testCode}}_CC\",\r\n    \"currencyCode\": \"NOT_EXIST\",\r\n    \"countryCode\": \"US\",\r\n    \"languageCode\": \"ENG\",\r\n    \"billingCycleCode\": \"{{testCode}}_BC\",\r\n    \"titleCode\": \"MR\",\r\n    \"firstName\": \"created\",\r\n    \"lastName\": \"TEST\",\r\n    \"phoneNumber\": \"+102354749\",\r\n    \"address1\": \"Address1\",\r\n    \"address2\": \"Address2\",\r\n    \"zipCode\": \"4050\",\r\n    \"city\": \"Los Banos\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/accountHierarchy",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"accountHierarchy"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Account Hierarchy ENTITY_DOES_NOT_EXISTS_EXCEPTION 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "87428840-f689-447f-a7e6-c459a4f3c432",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Seller with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"customerCode\": \"{{testCode}}_CH\",\r\n    \"sellerCode\": \"NOT_EXIST\",\r\n    \"customerBrandCode\": \"{{testCode}}_CB\",\r\n    \"customerCategoryCode\": \"{{testCode}}_CC\",\r\n    \"currencyCode\": \"USD\",\r\n    \"countryCode\": \"US\",\r\n    \"languageCode\": \"ENG\",\r\n    \"billingCycleCode\": \"{{testCode}}_BC\",\r\n    \"titleCode\": \"MR\",\r\n    \"firstName\": \"created\",\r\n    \"lastName\": \"TEST\",\r\n    \"phoneNumber\": \"+102354749\",\r\n    \"address1\": \"Address1\",\r\n    \"address2\": \"Address2\",\r\n    \"zipCode\": \"4050\",\r\n    \"city\": \"Los Banos\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/accountHierarchy",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"accountHierarchy"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Account Hierarchy INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5655657e-fe11-4daf-97a6-6528709c9b0d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.util.Date` from String\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"customerCode\": \"{{testCode}}_CH\",\r\n    \"sellerCode\": \"{{testCode}}_SELLER\",\r\n    \"customerBrandCode\": \"{{testCode}}_BC\",\r\n    \"customerCategoryCode\": \"{{testCode}}_CC\",\r\n    \"currencyCode\": \"USD\",\r\n    \"countryCode\": \"US\",\r\n    \"languageCode\": \"ENG\",\r\n    \"billingCycleCode\": \"{{testCode}}_BC\",\r\n    \"titleCode\": \"MR\",\r\n    \"firstName\": \"created\",\r\n    \"lastName\": \"TEST\",\r\n    \"phoneNumber\": \"+102354749\",\r\n    \"address1\": \"Address1\",\r\n    \"address2\": \"Address2\",\r\n    \"zipCode\": \"4050\",\r\n    \"city\": \"Los Banos\",\r\n    \"birthDate\": \"INVALID\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/accountHierarchy",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"accountHierarchy"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Account Hierarchy SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19c7626f-eee6-4258-a7b6-55051e249c85",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/{{testCode}}_CH",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"{{testCode}}_CH"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Provider Contact ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f7454aa8-4c20-4d37-a7af-7bef9d43680b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Customer with code=\"+pm.collectionVariables.get(\"testCode\")+\"_CH does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/{{testCode}}_CH",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"{{testCode}}_CH"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Clear Data",
					"item": [
						{
							"name": "Delete UserAccount SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "946a5003-5bd1-4e52-b138-ed82a39a0fcf",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount/{{testCode}}_UA",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount",
										"{{testCode}}_UA"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete UserAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b6083dc-decd-4d76-b86b-1c8f09f63cbc",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"UserAccount with code=\"+pm.collectionVariables.get(\"testCode\")+\"_UA does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/userAccount/{{testCode}}_UA",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"userAccount",
										"{{testCode}}_UA"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete CustomerBrand  DELETE_REFERENCED_ENTITY_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9d2bd4f9-9290-4f4f-ab1b-2302c3e13f11",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"DELETE_REFERENCED_ENTITY_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"CustomerBrand with code=\"+pm.collectionVariables.get(\"testCode\")+\"_CB is referenced.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/removeBrand/{{testCode}}_CB",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"removeBrand",
										"{{testCode}}_CB"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete BillingAccount SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4ed6e68f-e305-411d-8fe0-585e567e6d9b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount/{{testCode}}_BA",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount",
										"{{testCode}}_BA"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete BillingAccount  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da17155e-5038-48b6-add5-16e2fb67af27",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"BillingAccount with code=\"+pm.collectionVariables.get(\"testCode\")+\"_BA does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/billingAccount/{{testCode}}_BA",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"billingAccount",
										"{{testCode}}_BA"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete CustomerAccount SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7caa7fb0-3547-4bbd-8bbb-a3040fd4b875",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount/{{testCode}}_CA",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount",
										"{{testCode}}_CA"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete CustomerAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "69d59774-dc15-491e-8958-752f0e76e812",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"CustomerAccount with code=\"+pm.collectionVariables.get(\"testCode\")+\"_CA does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"CLASSIC\",\r\n    \"seller\": \"CLASSIC\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customerAccount/{{testCode}}_CA",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customerAccount",
										"{{testCode}}_CA"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Customer SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e05ccdb0-68e0-4e91-98ec-80f01eb5f742",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/{{testCode}}_C",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"{{testCode}}_C"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Customer ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d6599526-726f-46d8-ba39-0fb634d7f540",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Customer with code=\"+pm.collectionVariables.get(\"testCode\")+\"_C does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"CLASSIC\",\r\n    \"seller\": \"CLASSIC\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/{{testCode}}_C",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"{{testCode}}_C"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Seller SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "df5b0ade-304b-47bc-8dd9-5d256442cf17",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller/{{testCode}}_SELLER",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller",
										"{{testCode}}_SELLER"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Seller ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4c8e4ff-622a-402a-b7f1-5817596ae04e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Seller with code=\"+pm.collectionVariables.get(\"testCode\")+\"_SELLER does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"CLASSIC\",\r\n    \"seller\": \"CLASSIC\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/seller/{{testCode}}_SELLER",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"seller",
										"{{testCode}}_SELLER"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Billing Cycle SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "95a326fa-513e-42e9-8701-e21c1102ff42",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billingCycle/{{testCode}}_BC",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billingCycle",
										"{{testCode}}_BC"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Billing Cycle ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a608e834-75d9-4f11-acb9-6a49029315ad",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"BillingCycle with code=\"+pm.collectionVariables.get(\"testCode\")+\"_BC does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"CLASSIC\",\r\n    \"seller\": \"CLASSIC\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billingCycle/{{testCode}}_BC",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billingCycle",
										"{{testCode}}_BC"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete CustomerBrand  SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47fdf4dc-15da-4c01-b958-2c1807a342fa",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/removeBrand/{{testCode}}_CB",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"removeBrand",
										"{{testCode}}_CB"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete CustomerBrand  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5696dd6a-c5c0-4d3e-80e8-995668bd991a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"CustomerBrand with code=\"+pm.collectionVariables.get(\"testCode\")+\"_CB does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/customer/removeBrand/{{testCode}}_CB",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"customer",
										"removeBrand",
										"{{testCode}}_CB"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Administration",
			"item": [
				{
					"name": "Module",
					"item": [
						{
							"name": "CreateOrUpdate Module SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d39de22e-b8f2-427c-950d-0736ae7e27d6",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{testCode}}_MOD\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"license\": \"COM\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/module/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"module",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Module SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0f68b811-413f-4bf4-858d-a9f4931bd395",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.module.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_MOD\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.module.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/module?code={{testCode}}_MOD",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"module"
									],
									"query": [
										{
											"key": "code",
											"value": "{{testCode}}_MOD"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Module ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7f44e127-ced1-49a7-bf0e-436b4f02e220",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"MeveoModule with code=\"+pm.collectionVariables.get(\"testCode\")+\"_MOD already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"{{testCode}}_MOD\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"license\": \"COM\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/module",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"module"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Module ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a748bea-b99e-4992-9f00-cdcb591df782",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"MeveoModule with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"NOT_EXIST\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"license\": \"COM\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/module",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"module"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Module SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "00a47ebb-65f8-4f18-96a2-95c3d2cb2d58",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_MOD\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"license\": \"COM\",\r\n    \"moduleItems\": [\r\n        {\r\n            \"script\": {\r\n                \"code\": \"org.meveo.service.script.SaveIngenicoCardScript\",\r\n                \"description\": \"Save Ingenico Card\",\r\n                \"script\": \"package org.meveo.service.script;\\\\r\\\\n\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.Client;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.RequestHeader;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.PaymentResponse;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.CardPaymentMethodSpecificOutput;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.PaymentOutput;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.PaymentReferences;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.PaymentStatusOutput;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.token.TokenResponse;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.webhooks.WebhooksEvent;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.InMemorySecretKeyStore;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.SignatureValidationException;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.Webhooks;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.WebhooksHelper;\\\\r\\\\nimport org.apache.commons.collections4.MapUtils;\\\\r\\\\nimport org.json.simple.JSONObject;\\\\r\\\\nimport org.json.simple.parser.JSONParser;\\\\r\\\\nimport org.json.simple.parser.ParseException;\\\\r\\\\nimport org.meveo.admin.exception.BusinessException;\\\\r\\\\nimport org.meveo.commons.utils.StringUtils;\\\\r\\\\nimport org.meveo.model.notification.InboundRequest;\\\\r\\\\nimport org.meveo.model.payments.CardPaymentMethod;\\\\r\\\\nimport org.meveo.model.payments.CreditCardTypeEnum;\\\\r\\\\nimport org.meveo.model.payments.CustomerAccount;\\\\r\\\\nimport org.meveo.model.payments.PaymentGateway;\\\\r\\\\nimport org.meveo.service.payments.impl.CustomerAccountService;\\\\r\\\\nimport org.meveo.service.payments.impl.PaymentGatewayService;\\\\r\\\\nimport org.meveo.service.payments.impl.PaymentMethodService;\\\\r\\\\nimport org.slf4j.Logger;\\\\r\\\\nimport org.slf4j.LoggerFactory;\\\\r\\\\n\\\\r\\\\nimport java.util.ArrayList;\\\\r\\\\nimport java.util.HashMap;\\\\r\\\\nimport java.util.List;\\\\r\\\\nimport java.util.Map;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n *\\\\r\\\\n * @author Mounir Bahije\\\\r\\\\n *\\\\r\\\\n *         Script executed to save card enrolled with Ingenico Hosted Checkout\\\\r\\\\n *\\\\r\\\\n */\\\\r\\\\npublic class SaveIngenicoCardScript extends Script {\\\\r\\\\n\\\\r\\\\n    private final static Logger log = LoggerFactory.getLogger(SaveIngenicoCardScript.class);\\\\r\\\\n\\\\r\\\\n    private PaymentMethodService paymentMethodService = (PaymentMethodService) getServiceInterface(\\\\\\\"PaymentMethodService\\\\\\\");\\\\r\\\\n    private CustomerAccountService customerAccountService = (CustomerAccountService) getServiceInterface(\\\\\\\"CustomerAccountService\\\\\\\");\\\\r\\\\n    private PaymentGatewayService paymentGatewayService = (PaymentGatewayService) getServiceInterface(\\\\\\\"PaymentGatewayService\\\\\\\");\\\\r\\\\n\\\\r\\\\n    @Override\\\\r\\\\n    public void execute(Map<String, Object> methodContext) throws BusinessException {\\\\r\\\\n\\\\r\\\\n        String verification = \\\\\\\"\\\\\\\";\\\\r\\\\n        InboundRequest inReq = (InboundRequest) methodContext.get(\\\\\\\"event\\\\\\\");\\\\r\\\\n\\\\r\\\\n        if (\\\\\\\"GET\\\\\\\".equalsIgnoreCase(inReq.getMethod())) {\\\\r\\\\n\\\\r\\\\n            String body = inReq.getBody();\\\\r\\\\n            Map<String, String> headers = inReq.getHeaders();\\\\r\\\\n            for (String headerKey : headers.keySet()) {\\\\r\\\\n                if (\\\\\\\"X-GCS-Webhooks-Endpoint-Verification\\\\\\\".equalsIgnoreCase(headerKey)) {\\\\r\\\\n                    String headerValue = headers.get(headerKey);\\\\r\\\\n                    verification = headerValue;\\\\r\\\\n                    inReq.setResponseBody(verification);\\\\r\\\\n                }\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n\\\\r\\\\n        if (\\\\\\\"POST\\\\\\\".equalsIgnoreCase(inReq.getMethod())) {\\\\r\\\\n\\\\r\\\\n            final String reqBody = inReq.getBody();\\\\r\\\\n\\\\r\\\\n            List<RequestHeader> requestHeaders = getWebhookRequestHeaders(inReq.getHeaders());\\\\r\\\\n            String webhooksKeyId = this.getHeaderValue(requestHeaders, \\\\\\\"X-GCS-KeyId\\\\\\\");\\\\r\\\\n\\\\r\\\\n            InMemorySecretKeyStore keyStore = InMemorySecretKeyStore.INSTANCE;\\\\r\\\\n            keyStore.storeSecretKey(webhooksKeyId, getWebhookSecretKey(webhooksKeyId));\\\\r\\\\n\\\\r\\\\n            WebhooksHelper helper = Webhooks.createHelper(keyStore);\\\\r\\\\n            WebhooksEvent webhooksEvent = helper.unmarshal(reqBody, requestHeaders);\\\\r\\\\n\\\\r\\\\n            PaymentResponse payment = webhooksEvent.getPayment();\\\\r\\\\n            if (payment == null) {\\\\r\\\\n                throw new BusinessException(String.format(\\\\\\\"PaymentResponse not found on webhooksEvent : [%s]\\\\\\\", webhooksEvent));\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n            PaymentOutput paymentOutput = payment.getPaymentOutput();\\\\r\\\\n            if (paymentOutput == null) {\\\\r\\\\n                throw new BusinessException(String.format(\\\\\\\"PaymentOutput not found on webhooksEvent.payment : [%s]\\\\\\\", payment));\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n            PaymentReferences paymentReferences = paymentOutput.getReferences();\\\\r\\\\n            if (paymentReferences == null) {\\\\r\\\\n                throw new BusinessException(String.format(\\\\\\\"paymentReferences not found on webhooksEvent.payment.paymentOutput : [%s]\\\\\\\", paymentOutput));\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n            String merchantReference = paymentReferences.getMerchantReference();\\\\r\\\\n\\\\r\\\\n            if (merchantReference.lastIndexOf(\\\\\\\"_-_\\\\\\\") >= 0) {\\\\r\\\\n\\\\r\\\\n                String longIdCA = merchantReference.substring(merchantReference.lastIndexOf(\\\\\\\"_-_\\\\\\\") + 3);\\\\r\\\\n                CustomerAccount ca = customerAccountService.findById(Long.valueOf(longIdCA));\\\\r\\\\n\\\\r\\\\n                PaymentGateway paymentGateway = paymentGatewayService.getPaymentGateway(ca, null, null);\\\\r\\\\n\\\\r\\\\n                if (paymentGateway == null) {\\\\r\\\\n                    throw new BusinessException(\\\\\\\"paymentGateway is null\\\\\\\");\\\\r\\\\n                }\\\\r\\\\n\\\\r\\\\n                if (!webhooksKeyId.equals(paymentGateway.getWebhooksKeyId())) {\\\\r\\\\n                    throw new BusinessException(\\\\\\\"paymentGateway is not the good one\\\\\\\");\\\\r\\\\n                }\\\\r\\\\n\\\\r\\\\n                String status = payment.getStatus();\\\\r\\\\n                if (\\\\\\\"PENDING_CAPTURE\\\\\\\".equalsIgnoreCase(status)) {\\\\r\\\\n                    PaymentStatusOutput paymentStatusOutput = payment.getStatusOutput();\\\\r\\\\n                    if (paymentStatusOutput == null) {\\\\r\\\\n                        throw new BusinessException(String.format(\\\\\\\"paymentStatusOutput not found on webhooksEvent.payment : [%s]\\\\\\\", payment));\\\\r\\\\n                    }\\\\r\\\\n                    Boolean isAuthorized = paymentStatusOutput.getIsAuthorized();\\\\r\\\\n\\\\r\\\\n                    if (isAuthorized) {\\\\r\\\\n\\\\r\\\\n                        CardPaymentMethodSpecificOutput cardPaymentMethodSpecificOutput = paymentOutput.getCardPaymentMethodSpecificOutput();\\\\r\\\\n                        if (cardPaymentMethodSpecificOutput == null) {\\\\r\\\\n                            throw new BusinessException(String.format(\\\\\\\"cardPaymentMethodSpecificOutput not found on webhooksEvent.payment.paymentOutput : [%s]\\\\\\\", paymentOutput));\\\\r\\\\n                        }\\\\r\\\\n                        Long paymentProductId = Long.valueOf(cardPaymentMethodSpecificOutput.getPaymentProductId());\\\\r\\\\n\\\\r\\\\n                        JSONParser jsonParser = new JSONParser();\\\\r\\\\n                        JSONObject obj = null;\\\\r\\\\n                        try {\\\\r\\\\n                            obj = (JSONObject) jsonParser.parse(reqBody);\\\\r\\\\n                        } catch (ParseException e) {\\\\r\\\\n                            e.printStackTrace();\\\\r\\\\n                        }\\\\r\\\\n\\\\r\\\\n                        String tokenId = (String) ((JSONObject) ((JSONObject) ((JSONObject) obj.get(\\\\\\\"payment\\\\\\\")).get(\\\\\\\"paymentOutput\\\\\\\")).get(\\\\\\\"cardPaymentMethodSpecificOutput\\\\\\\")).get(\\\\\\\"token\\\\\\\");\\\\r\\\\n                        if (StringUtils.isBlank(tokenId)) {\\\\r\\\\n                            throw new BusinessException(String.format(\\\\\\\"tokenId not found on webhooksEvent.payment.paymentOutput.cardPaymentMethodSpecificOutput : [%s]\\\\\\\", cardPaymentMethodSpecificOutput));\\\\r\\\\n                        }\\\\r\\\\n\\\\r\\\\n                        String merchantId = webhooksEvent.getMerchantId();\\\\r\\\\n\\\\r\\\\n                        try {\\\\r\\\\n\\\\r\\\\n                            CreditCardTypeEnum cardType = fromId(Long.valueOf(paymentProductId).intValue());\\\\r\\\\n\\\\r\\\\n                            Client client = (Client) paymentMethodService.getClient(Long.valueOf(longIdCA));\\\\r\\\\n\\\\r\\\\n                            TokenResponse response = client.merchant(merchantId).tokens().get(tokenId);\\\\r\\\\n\\\\r\\\\n                            String cardNumber = response.getCard().getData().getCardWithoutCvv().getCardNumber();\\\\r\\\\n                            String expiryDate = response.getCard().getData().getCardWithoutCvv().getExpiryDate();\\\\r\\\\n                            String ownerName = response.getCard().getData().getCardWithoutCvv().getCardholderName();\\\\r\\\\n                            CardPaymentMethod paymentMethod = new CardPaymentMethod();\\\\r\\\\n                            paymentMethod.setCardNumber(cardNumber);\\\\r\\\\n                            paymentMethod.setCardType(cardType);\\\\r\\\\n                            paymentMethod.setCustomerAccount(ca);\\\\r\\\\n                            paymentMethod.setPreferred(true);\\\\r\\\\n                            paymentMethod.setMonthExpiration(new Integer(expiryDate.substring(0, 2)));\\\\r\\\\n                            paymentMethod.setYearExpiration(new Integer(expiryDate.substring(2, 4)));\\\\r\\\\n                            paymentMethod.setOwner(ownerName);\\\\r\\\\n                            paymentMethod.setTokenId(tokenId);\\\\r\\\\n                            paymentMethod.setHiddenCardNumber(CardPaymentMethod.hideCardNumber(cardNumber));\\\\r\\\\n                            if (!paymentMethodService.cardTokenExist(paymentMethod)) {\\\\r\\\\n                                paymentMethodService.create(paymentMethod);\\\\r\\\\n                            }\\\\r\\\\n                        } catch (Exception e) {\\\\r\\\\n                            throw new BusinessException(\\\\\\\"Error on SaveIngenicoCardScript : \\\\\\\" + e.getMessage());\\\\r\\\\n                        }\\\\r\\\\n                    }\\\\r\\\\n                }\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private CreditCardTypeEnum fromId(Integer id) {\\\\r\\\\n        for (CreditCardTypeEnum es : CreditCardTypeEnum.values()) {\\\\r\\\\n            if (es.getId().equals(id)) {\\\\r\\\\n                return es;\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n        throw new IllegalArgumentException();\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private List<RequestHeader> getWebhookRequestHeaders(Map<String, String> headers) {\\\\r\\\\n        List<RequestHeader> webhookHeaders = new ArrayList<>();\\\\r\\\\n        if (MapUtils.isNotEmpty(headers)) {\\\\r\\\\n            headers.forEach((key, value) -> webhookHeaders.add(new RequestHeader(key, value)) );\\\\r\\\\n        }\\\\r\\\\n        return webhookHeaders;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private String getHeaderValue(List<RequestHeader> requestHeaders, String headerName) {\\\\r\\\\n        String value = null;\\\\r\\\\n        for (RequestHeader header : requestHeaders) {\\\\r\\\\n            if (headerName.equalsIgnoreCase(header.getName())) {\\\\r\\\\n                if (value == null) {\\\\r\\\\n                    value = header.getValue();\\\\r\\\\n                } else {\\\\r\\\\n                    throw new SignatureValidationException(\\\\\\\"enocuntered multiple occurrences of header '\\\\\\\" + headerName + \\\\\\\"'\\\\\\\");\\\\r\\\\n                }\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n        if (value == null) {\\\\r\\\\n            throw new SignatureValidationException(\\\\\\\"could not find header '\\\\\\\" + headerName + \\\\\\\"'\\\\\\\");\\\\r\\\\n        }\\\\r\\\\n        return value;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private String getWebhookSecretKey(String webhooksKeyId) throws BusinessException {\\\\r\\\\n        try {\\\\r\\\\n            String query = \\\\\\\"select pg.webhooksSecretKey from PaymentGateway pg where pg.webhooksKeyId=:webhooksKeyId\\\\\\\";\\\\r\\\\n            Map<String, Object> queryParams = new HashMap<>();\\\\r\\\\n            queryParams.put(\\\\\\\"webhooksKeyId\\\\\\\", webhooksKeyId);\\\\r\\\\n            Object result = paymentGatewayService.executeSelectQuery(query, queryParams);\\\\r\\\\n            return ((List<String>)result).get(0);\\\\r\\\\n        } catch (Exception e) {\\\\r\\\\n            throw new BusinessException(String.format(\\\\\\\"Error on getWebhookSecretKey for webhooksKeyId = [%s]\\\\\\\", webhooksKeyId));\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n}\",\r\n                \"type\": \"JAVA\"\r\n            }\r\n        },\r\n        {\r\n            \"notification\": {\r\n                \"updatedCode\": null,\r\n                \"code\": \"SaveIngenicoCardInbound\",\r\n                \"classNameFilter\": \"org.meveo.model.notification.InboundRequest\",\r\n                \"eventTypeFilter\": \"INBOUND_REQ\",\r\n                \"elFilter\": \"#{event.pathInfo.endsWith(\\\\\\\"/ingenico/saveCard\\\\\\\")}\",\r\n                \"scriptInstanceCode\": \"org.meveo.service.script.SaveIngenicoCardScript\",\r\n                \"scriptParams\": {\r\n                    \"event\": \"#{event}\"\r\n                },\r\n                \"counterTemplate\": null\r\n            }\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/module",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"module"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Module SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0548e9d6-fa0f-4cb8-be27-84a746d3417a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_MOD\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"license\": \"COM\",\r\n    \"moduleItems\": [\r\n        {\r\n            \"script\": {\r\n                \"code\": \"org.meveo.service.script.SaveIngenicoCardScript\",\r\n                \"description\": \"Save Ingenico Card\",\r\n                \"script\": \"package org.meveo.service.script;\\\\r\\\\n\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.Client;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.RequestHeader;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.PaymentResponse;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.CardPaymentMethodSpecificOutput;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.PaymentOutput;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.PaymentReferences;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.PaymentStatusOutput;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.token.TokenResponse;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.webhooks.WebhooksEvent;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.InMemorySecretKeyStore;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.SignatureValidationException;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.Webhooks;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.WebhooksHelper;\\\\r\\\\nimport org.apache.commons.collections4.MapUtils;\\\\r\\\\nimport org.json.simple.JSONObject;\\\\r\\\\nimport org.json.simple.parser.JSONParser;\\\\r\\\\nimport org.json.simple.parser.ParseException;\\\\r\\\\nimport org.meveo.admin.exception.BusinessException;\\\\r\\\\nimport org.meveo.commons.utils.StringUtils;\\\\r\\\\nimport org.meveo.model.notification.InboundRequest;\\\\r\\\\nimport org.meveo.model.payments.CardPaymentMethod;\\\\r\\\\nimport org.meveo.model.payments.CreditCardTypeEnum;\\\\r\\\\nimport org.meveo.model.payments.CustomerAccount;\\\\r\\\\nimport org.meveo.model.payments.PaymentGateway;\\\\r\\\\nimport org.meveo.service.payments.impl.CustomerAccountService;\\\\r\\\\nimport org.meveo.service.payments.impl.PaymentGatewayService;\\\\r\\\\nimport org.meveo.service.payments.impl.PaymentMethodService;\\\\r\\\\nimport org.slf4j.Logger;\\\\r\\\\nimport org.slf4j.LoggerFactory;\\\\r\\\\n\\\\r\\\\nimport java.util.ArrayList;\\\\r\\\\nimport java.util.HashMap;\\\\r\\\\nimport java.util.List;\\\\r\\\\nimport java.util.Map;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n *\\\\r\\\\n * @author Mounir Bahije\\\\r\\\\n *\\\\r\\\\n *         Script executed to save card enrolled with Ingenico Hosted Checkout\\\\r\\\\n *\\\\r\\\\n */\\\\r\\\\npublic class SaveIngenicoCardScript extends Script {\\\\r\\\\n\\\\r\\\\n    private final static Logger log = LoggerFactory.getLogger(SaveIngenicoCardScript.class);\\\\r\\\\n\\\\r\\\\n    private PaymentMethodService paymentMethodService = (PaymentMethodService) getServiceInterface(\\\\\\\"PaymentMethodService\\\\\\\");\\\\r\\\\n    private CustomerAccountService customerAccountService = (CustomerAccountService) getServiceInterface(\\\\\\\"CustomerAccountService\\\\\\\");\\\\r\\\\n    private PaymentGatewayService paymentGatewayService = (PaymentGatewayService) getServiceInterface(\\\\\\\"PaymentGatewayService\\\\\\\");\\\\r\\\\n\\\\r\\\\n    @Override\\\\r\\\\n    public void execute(Map<String, Object> methodContext) throws BusinessException {\\\\r\\\\n\\\\r\\\\n        String verification = \\\\\\\"\\\\\\\";\\\\r\\\\n        InboundRequest inReq = (InboundRequest) methodContext.get(\\\\\\\"event\\\\\\\");\\\\r\\\\n\\\\r\\\\n        if (\\\\\\\"GET\\\\\\\".equalsIgnoreCase(inReq.getMethod())) {\\\\r\\\\n\\\\r\\\\n            String body = inReq.getBody();\\\\r\\\\n            Map<String, String> headers = inReq.getHeaders();\\\\r\\\\n            for (String headerKey : headers.keySet()) {\\\\r\\\\n                if (\\\\\\\"X-GCS-Webhooks-Endpoint-Verification\\\\\\\".equalsIgnoreCase(headerKey)) {\\\\r\\\\n                    String headerValue = headers.get(headerKey);\\\\r\\\\n                    verification = headerValue;\\\\r\\\\n                    inReq.setResponseBody(verification);\\\\r\\\\n                }\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n\\\\r\\\\n        if (\\\\\\\"POST\\\\\\\".equalsIgnoreCase(inReq.getMethod())) {\\\\r\\\\n\\\\r\\\\n            final String reqBody = inReq.getBody();\\\\r\\\\n\\\\r\\\\n            List<RequestHeader> requestHeaders = getWebhookRequestHeaders(inReq.getHeaders());\\\\r\\\\n            String webhooksKeyId = this.getHeaderValue(requestHeaders, \\\\\\\"X-GCS-KeyId\\\\\\\");\\\\r\\\\n\\\\r\\\\n            InMemorySecretKeyStore keyStore = InMemorySecretKeyStore.INSTANCE;\\\\r\\\\n            keyStore.storeSecretKey(webhooksKeyId, getWebhookSecretKey(webhooksKeyId));\\\\r\\\\n\\\\r\\\\n            WebhooksHelper helper = Webhooks.createHelper(keyStore);\\\\r\\\\n            WebhooksEvent webhooksEvent = helper.unmarshal(reqBody, requestHeaders);\\\\r\\\\n\\\\r\\\\n            PaymentResponse payment = webhooksEvent.getPayment();\\\\r\\\\n            if (payment == null) {\\\\r\\\\n                throw new BusinessException(String.format(\\\\\\\"PaymentResponse not found on webhooksEvent : [%s]\\\\\\\", webhooksEvent));\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n            PaymentOutput paymentOutput = payment.getPaymentOutput();\\\\r\\\\n            if (paymentOutput == null) {\\\\r\\\\n                throw new BusinessException(String.format(\\\\\\\"PaymentOutput not found on webhooksEvent.payment : [%s]\\\\\\\", payment));\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n            PaymentReferences paymentReferences = paymentOutput.getReferences();\\\\r\\\\n            if (paymentReferences == null) {\\\\r\\\\n                throw new BusinessException(String.format(\\\\\\\"paymentReferences not found on webhooksEvent.payment.paymentOutput : [%s]\\\\\\\", paymentOutput));\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n            String merchantReference = paymentReferences.getMerchantReference();\\\\r\\\\n\\\\r\\\\n            if (merchantReference.lastIndexOf(\\\\\\\"_-_\\\\\\\") >= 0) {\\\\r\\\\n\\\\r\\\\n                String longIdCA = merchantReference.substring(merchantReference.lastIndexOf(\\\\\\\"_-_\\\\\\\") + 3);\\\\r\\\\n                CustomerAccount ca = customerAccountService.findById(Long.valueOf(longIdCA));\\\\r\\\\n\\\\r\\\\n                PaymentGateway paymentGateway = paymentGatewayService.getPaymentGateway(ca, null, null);\\\\r\\\\n\\\\r\\\\n                if (paymentGateway == null) {\\\\r\\\\n                    throw new BusinessException(\\\\\\\"paymentGateway is null\\\\\\\");\\\\r\\\\n                }\\\\r\\\\n\\\\r\\\\n                if (!webhooksKeyId.equals(paymentGateway.getWebhooksKeyId())) {\\\\r\\\\n                    throw new BusinessException(\\\\\\\"paymentGateway is not the good one\\\\\\\");\\\\r\\\\n                }\\\\r\\\\n\\\\r\\\\n                String status = payment.getStatus();\\\\r\\\\n                if (\\\\\\\"PENDING_CAPTURE\\\\\\\".equalsIgnoreCase(status)) {\\\\r\\\\n                    PaymentStatusOutput paymentStatusOutput = payment.getStatusOutput();\\\\r\\\\n                    if (paymentStatusOutput == null) {\\\\r\\\\n                        throw new BusinessException(String.format(\\\\\\\"paymentStatusOutput not found on webhooksEvent.payment : [%s]\\\\\\\", payment));\\\\r\\\\n                    }\\\\r\\\\n                    Boolean isAuthorized = paymentStatusOutput.getIsAuthorized();\\\\r\\\\n\\\\r\\\\n                    if (isAuthorized) {\\\\r\\\\n\\\\r\\\\n                        CardPaymentMethodSpecificOutput cardPaymentMethodSpecificOutput = paymentOutput.getCardPaymentMethodSpecificOutput();\\\\r\\\\n                        if (cardPaymentMethodSpecificOutput == null) {\\\\r\\\\n                            throw new BusinessException(String.format(\\\\\\\"cardPaymentMethodSpecificOutput not found on webhooksEvent.payment.paymentOutput : [%s]\\\\\\\", paymentOutput));\\\\r\\\\n                        }\\\\r\\\\n                        Long paymentProductId = Long.valueOf(cardPaymentMethodSpecificOutput.getPaymentProductId());\\\\r\\\\n\\\\r\\\\n                        JSONParser jsonParser = new JSONParser();\\\\r\\\\n                        JSONObject obj = null;\\\\r\\\\n                        try {\\\\r\\\\n                            obj = (JSONObject) jsonParser.parse(reqBody);\\\\r\\\\n                        } catch (ParseException e) {\\\\r\\\\n                            e.printStackTrace();\\\\r\\\\n                        }\\\\r\\\\n\\\\r\\\\n                        String tokenId = (String) ((JSONObject) ((JSONObject) ((JSONObject) obj.get(\\\\\\\"payment\\\\\\\")).get(\\\\\\\"paymentOutput\\\\\\\")).get(\\\\\\\"cardPaymentMethodSpecificOutput\\\\\\\")).get(\\\\\\\"token\\\\\\\");\\\\r\\\\n                        if (StringUtils.isBlank(tokenId)) {\\\\r\\\\n                            throw new BusinessException(String.format(\\\\\\\"tokenId not found on webhooksEvent.payment.paymentOutput.cardPaymentMethodSpecificOutput : [%s]\\\\\\\", cardPaymentMethodSpecificOutput));\\\\r\\\\n                        }\\\\r\\\\n\\\\r\\\\n                        String merchantId = webhooksEvent.getMerchantId();\\\\r\\\\n\\\\r\\\\n                        try {\\\\r\\\\n\\\\r\\\\n                            CreditCardTypeEnum cardType = fromId(Long.valueOf(paymentProductId).intValue());\\\\r\\\\n\\\\r\\\\n                            Client client = (Client) paymentMethodService.getClient(Long.valueOf(longIdCA));\\\\r\\\\n\\\\r\\\\n                            TokenResponse response = client.merchant(merchantId).tokens().get(tokenId);\\\\r\\\\n\\\\r\\\\n                            String cardNumber = response.getCard().getData().getCardWithoutCvv().getCardNumber();\\\\r\\\\n                            String expiryDate = response.getCard().getData().getCardWithoutCvv().getExpiryDate();\\\\r\\\\n                            String ownerName = response.getCard().getData().getCardWithoutCvv().getCardholderName();\\\\r\\\\n                            CardPaymentMethod paymentMethod = new CardPaymentMethod();\\\\r\\\\n                            paymentMethod.setCardNumber(cardNumber);\\\\r\\\\n                            paymentMethod.setCardType(cardType);\\\\r\\\\n                            paymentMethod.setCustomerAccount(ca);\\\\r\\\\n                            paymentMethod.setPreferred(true);\\\\r\\\\n                            paymentMethod.setMonthExpiration(new Integer(expiryDate.substring(0, 2)));\\\\r\\\\n                            paymentMethod.setYearExpiration(new Integer(expiryDate.substring(2, 4)));\\\\r\\\\n                            paymentMethod.setOwner(ownerName);\\\\r\\\\n                            paymentMethod.setTokenId(tokenId);\\\\r\\\\n                            paymentMethod.setHiddenCardNumber(CardPaymentMethod.hideCardNumber(cardNumber));\\\\r\\\\n                            if (!paymentMethodService.cardTokenExist(paymentMethod)) {\\\\r\\\\n                                paymentMethodService.create(paymentMethod);\\\\r\\\\n                            }\\\\r\\\\n                        } catch (Exception e) {\\\\r\\\\n                            throw new BusinessException(\\\\\\\"Error on SaveIngenicoCardScript : \\\\\\\" + e.getMessage());\\\\r\\\\n                        }\\\\r\\\\n                    }\\\\r\\\\n                }\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private CreditCardTypeEnum fromId(Integer id) {\\\\r\\\\n        for (CreditCardTypeEnum es : CreditCardTypeEnum.values()) {\\\\r\\\\n            if (es.getId().equals(id)) {\\\\r\\\\n                return es;\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n        throw new IllegalArgumentException();\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private List<RequestHeader> getWebhookRequestHeaders(Map<String, String> headers) {\\\\r\\\\n        List<RequestHeader> webhookHeaders = new ArrayList<>();\\\\r\\\\n        if (MapUtils.isNotEmpty(headers)) {\\\\r\\\\n            headers.forEach((key, value) -> webhookHeaders.add(new RequestHeader(key, value)) );\\\\r\\\\n        }\\\\r\\\\n        return webhookHeaders;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private String getHeaderValue(List<RequestHeader> requestHeaders, String headerName) {\\\\r\\\\n        String value = null;\\\\r\\\\n        for (RequestHeader header : requestHeaders) {\\\\r\\\\n            if (headerName.equalsIgnoreCase(header.getName())) {\\\\r\\\\n                if (value == null) {\\\\r\\\\n                    value = header.getValue();\\\\r\\\\n                } else {\\\\r\\\\n                    throw new SignatureValidationException(\\\\\\\"enocuntered multiple occurrences of header '\\\\\\\" + headerName + \\\\\\\"'\\\\\\\");\\\\r\\\\n                }\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n        if (value == null) {\\\\r\\\\n            throw new SignatureValidationException(\\\\\\\"could not find header '\\\\\\\" + headerName + \\\\\\\"'\\\\\\\");\\\\r\\\\n        }\\\\r\\\\n        return value;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private String getWebhookSecretKey(String webhooksKeyId) throws BusinessException {\\\\r\\\\n        try {\\\\r\\\\n            String query = \\\\\\\"select pg.webhooksSecretKey from PaymentGateway pg where pg.webhooksKeyId=:webhooksKeyId\\\\\\\";\\\\r\\\\n            Map<String, Object> queryParams = new HashMap<>();\\\\r\\\\n            queryParams.put(\\\\\\\"webhooksKeyId\\\\\\\", webhooksKeyId);\\\\r\\\\n            Object result = paymentGatewayService.executeSelectQuery(query, queryParams);\\\\r\\\\n            return ((List<String>)result).get(0);\\\\r\\\\n        } catch (Exception e) {\\\\r\\\\n            throw new BusinessException(String.format(\\\\\\\"Error on getWebhookSecretKey for webhooksKeyId = [%s]\\\\\\\", webhooksKeyId));\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n}\",\r\n                \"type\": \"JAVA\"\r\n            }\r\n        },\r\n        {\r\n            \"notification\": {\r\n                \"updatedCode\": null,\r\n                \"code\": \"SaveIngenicoCardInbound\",\r\n                \"classNameFilter\": \"org.meveo.model.notification.InboundRequest\",\r\n                \"eventTypeFilter\": \"INBOUND_REQ\",\r\n                \"elFilter\": \"#{event.pathInfo.endsWith(\\\\\\\"/ingenico/saveCard\\\\\\\")}\",\r\n                \"scriptInstanceCode\": \"org.meveo.service.script.SaveIngenicoCardScript\",\r\n                \"scriptParams\": {\r\n                    \"event\": \"#{event}\"\r\n                },\r\n                \"counterTemplate\": null\r\n            }\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/module/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"module",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Module SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d635b98-ccce-4aea-ab49-b8e6f1ed6c62",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.module.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_MOD\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.module.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/module?code={{testCode}}_MOD",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"module"
									],
									"query": [
										{
											"key": "code",
											"value": "{{testCode}}_MOD"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Module SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a20108c1-441d-45f1-8ed8-441db6d5fae4",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/module/{{testCode}}_MOD",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"module",
										"{{testCode}}_MOD"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Module ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79740c95-870f-4b75-868c-736cd99eab37",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"MeveoModule with code=\"+pm.collectionVariables.get(\"testCode\")+\"_MOD does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/module/{{testCode}}_MOD",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"module",
										"{{testCode}}_MOD"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Job Instance",
					"item": [
						{
							"name": "CreateOrUpdate Job Instance SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "903ff06f-08eb-4054-a1eb-d58eb31c3327",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_JI\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"jobTemplate\": \"SepaDirectDebitJob\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\",\r\n                \"entityReferenceValue\": {\r\n                    \"classname\": \"org.meveo.model.payments.DDRequestBuilder\",\r\n                    \"code\": \"Sepa_STD\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"jobInstance",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Job Instance SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ec91d13-0e4b-425d-9a7e-b958362cbcfc",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.jobInstanceDto.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_JI\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.jobInstanceDto.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/jobInstance?jobInstanceCode={{testCode}}_JI",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"jobInstance"
									],
									"query": [
										{
											"key": "jobInstanceCode",
											"value": "{{testCode}}_JI"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Job Instance ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b1141cfc-7e30-48e7-87f7-4704e4ed27a2",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"JobInstance with code=\"+pm.collectionVariables.get(\"testCode\")+\"_JI already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_JI\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"jobTemplate\": \"SepaDirectDebitJob\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\",\r\n                \"entityReferenceValue\": {\r\n                    \"classname\": \"org.meveo.model.payments.DDRequestBuilder\",\r\n                    \"code\": \"Sepa_STD\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/jobInstance/create",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"jobInstance",
										"create"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Job Instance ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1cc7c218-fa81-4649-8e80-26363c3a89cb",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"JobInstance with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"jobTemplate\": \"SepaDirectDebitJob\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\",\r\n                \"entityReferenceValue\": {\r\n                    \"classname\": \"org.meveo.model.payments.DDRequestBuilder\",\r\n                    \"code\": \"Sepa_STD\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/jobInstance/update",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"jobInstance",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Job Instance SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57a643f0-fc97-4abf-a450-7ed7aef8a870",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_JI\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"jobTemplate\": \"SepaDirectDebitJob\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\",\r\n                \"entityReferenceValue\": {\r\n                    \"classname\": \"org.meveo.model.payments.DDRequestBuilder\",\r\n                    \"code\": \"Sepa_STD\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/jobInstance/update",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"jobInstance",
										"update"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Job Instance SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c40862f-008c-4b3f-8b4c-8bc2c2e9171a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_JI\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"jobTemplate\": \"SepaDirectDebitJob\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\",\r\n                \"entityReferenceValue\": {\r\n                    \"classname\": \"org.meveo.model.payments.DDRequestBuilder\",\r\n                    \"code\": \"Sepa_STD\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"jobInstance",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Job Instance SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "da81ca06-2a0f-4244-8518-395d9ff2c4ca",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.jobInstanceDto.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_JI\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.jobInstanceDto.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/jobInstance?jobInstanceCode={{testCode}}_JI",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"jobInstance"
									],
									"query": [
										{
											"key": "jobInstanceCode",
											"value": "{{testCode}}_JI"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Job Instance MISSING_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "efcf1af9-bc16-42b6-b435-1b47b17736d3",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: SepaJob_ddRequestBuilder.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testDescription}}_JI\",\r\n    \"jobTemplate\": \"SepaDirectDebitJob\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"jobInstance",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Job Instance ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9ecf041d-bc45-470c-9988-599c2471a7fa",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"JobTemplate with code 'NOT_EXIST' doesn't exist.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"jobTemplate\": \"NOT_EXIST\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\",\r\n                \"entityReferenceValue\": {\r\n                    \"classname\": \"org.meveo.model.payments.DDRequestBuilder\",\r\n                    \"code\": \"Sepa_STD\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"jobInstance",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Job Instance SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db69045f-3114-40f9-9373-c234c392606f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/jobInstance/{{testCode}}_JI",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"jobInstance",
										"{{testCode}}_JI"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Job Instance ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c825f36b-a5a6-48d3-ba55-c65f171bf719",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"JobInstance with code=\"+pm.collectionVariables.get(\"testCode\")+\"_JI does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/jobInstance/{{testCode}}_JI",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"jobInstance",
										"{{testCode}}_JI"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Discount Plan",
					"item": [
						{
							"name": "CreateOrUpdate Discount Plan SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f4e4d5a8-c36c-4aaa-8e6d-fb7983093f1a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_DP\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"durationUnit\": \"1\",\r\n    \"startDate\": \"2019-03-03\",\r\n    \"endDate\": \"2019-03-04\",\r\n    \"defaultDuration\": \"1\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/discountPlan/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"discountPlan",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Discount Plan SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "17e5ce75-db5e-47f9-8a6d-7926319c7bc7",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.discountPlanDto.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_DP\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.discountPlanDto.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/discountPlan?discountPlanCode={{testCode}}_DP",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"discountPlan"
									],
									"query": [
										{
											"key": "discountPlanCode",
											"value": "{{testCode}}_DP"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Discount Plan ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67047ee4-aca8-4a51-8515-63586383da84",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"DiscountPlan with code=\"+pm.collectionVariables.get(\"testCode\")+\"_DP already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_DP\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"durationUnit\": \"1\",\r\n    \"startDate\": \"2019-03-03\",\r\n    \"endDate\": \"2019-03-04\",\r\n    \"defaultDuration\": \"1\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/discountPlan",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"discountPlan"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Discount Plan ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6cbf043-d155-44d5-9ef3-65b8dbeae16f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"DiscountPlan with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"TEST\",\r\n    \"durationUnit\": \"1\",\r\n    \"startDate\": \"2019-03-03\",\r\n    \"endDate\": \"2019-03-04\",\r\n    \"defaultDuration\": \"1\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/discountPlan",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"discountPlan"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Discount Plan SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8bacc765-1e0e-41af-aa6c-64cd2387340d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_DP\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"durationUnit\": \"1\",\r\n    \"startDate\": \"2019-03-03\",\r\n    \"endDate\": \"2019-03-04\",\r\n    \"defaultDuration\": \"1\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/discountPlan",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"discountPlan"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Discount Plan SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "051a34d1-fbf4-4a46-a959-43ab9605fa33",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_DP\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"durationUnit\": \"1\",\r\n    \"startDate\": \"2019-03-03\",\r\n    \"endDate\": \"2019-03-04\",\r\n    \"defaultDuration\": \"1\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/discountPlan/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"discountPlan",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Discount Plan SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7f1e5d14-b8c0-4c49-a370-e4fa0b06d603",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.discountPlanDto.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_DP\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.discountPlanDto.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/discountPlan?discountPlanCode={{testCode}}_DP",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"discountPlan"
									],
									"query": [
										{
											"key": "discountPlanCode",
											"value": "{{testCode}}_DP"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Discount Plan INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77689154-cf2b-4dc5-81e3-2aa6a2e92570",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.util.Date` from String\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_DP\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"durationUnit\": \"1\",\r\n    \"startDate\": \"INVALID\",\r\n    \"endDate\": \"INVALID\",\r\n    \"defaultDuration\": \"1\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/discountPlan/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"discountPlan",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Discount Plan SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8d933e82-95c2-4b19-a0c4-5c55f11389b8",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/discountPlan?discountPlanCode={{testCode}}_DP",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"discountPlan"
									],
									"query": [
										{
											"key": "discountPlanCode",
											"value": "{{testCode}}_DP"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Discount Plan ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0a51e473-32d0-4f62-b037-5772957c9520",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"DiscountPlan with code=\"+pm.collectionVariables.get(\"testCode\")+\"_DP does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/discountPlan?discountPlanCode={{testCode}}_DP",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"discountPlan"
									],
									"query": [
										{
											"key": "discountPlanCode",
											"value": "{{testCode}}_DP"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Offers",
			"item": [
				{
					"name": "Offer Template",
					"item": [
						{
							"name": "CreateOrUpdate  Offer Template  SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "02654f1e-42c3-47d9-9f19-00734526d0e5",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_OT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"validFrom\": \"2020-01-01\",\r\n    \"validTo\": \"2020-02-01\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"bomCode\": null,\r\n    \"offerTemplateCategoryCode\": null,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_USG_UNIT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read  Offer Template SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9630eb6c-6cae-443d-b13e-501ccaeca119",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\") + \"_OT\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.offerTemplate.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_OT\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.offerTemplate.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
											"});",
											"",
											"pm.test(request.name + \" - Check Data\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.offerTemplate.validFrom).to.contains(\"2020-01-01T\");",
											"    pm.expect(jsonData.offerTemplate.validTo).to.contains(\"2020-02-01T\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{testCode}}_OT&validFrom=2020-01-01&validTo=2020-02-01",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate"
									],
									"query": [
										{
											"key": "offerTemplateCode",
											"value": "{{testCode}}_OT"
										},
										{
											"key": "validFrom",
											"value": "2020-01-01"
										},
										{
											"key": "validTo",
											"value": "2020-02-01"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Offer Template  ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7fc55247-00cf-41bc-be76-bcf8768469f9",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contains(\"OfferTemplate with code=\" + pm.collectionVariables.get(\"testCode\") + \"_OT / Wed Jan 01\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_OT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"validFrom\": \"2020-01-01\",\r\n    \"validTo\": \"2020-02-01\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"bomCode\": null,\r\n    \"offerTemplateCategoryCode\": null,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_USG_UNIT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Offer Template  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "90f9ab8c-4cc9-4735-ac39-a85c80569391",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contains(\"OfferTemplate with code=NOT_EXIST\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"validFrom\": \"2020-01-01\",\r\n    \"validTo\": \"2020-02-01\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"bomCode\": null,\r\n    \"offerTemplateCategoryCode\": null,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_USG_UNIT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        }\r\n    ]\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Offer Template  SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "52595f52-1722-4051-ba06-20a473118cc5",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_OT\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"validFrom\": \"2020-01-01\",\r\n    \"validTo\": \"2020-02-01\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"bomCode\": null,\r\n    \"offerTemplateCategoryCode\": null,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_USG_UNIT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Offer Template  SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8579e938-9771-48ae-8447-c0fa2b351377",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_OT\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"validFrom\": \"2020-01-01\",\r\n    \"validTo\": \"2020-02-01\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"bomCode\": null,\r\n    \"offerTemplateCategoryCode\": null,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_USG_UNIT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Offer Template  SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "974352d0-74dd-4e55-a70c-d0f433ae6aec",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.offerTemplate.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_OT\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.offerTemplate.description).to.eql(pm.collectionVariables.get(\"testDescription\") + \" updated\");",
											"    pm.expect(jsonData.offerTemplate.validFrom).to.contain(\"2020-01-01T\");",
											"    pm.expect(jsonData.offerTemplate.validTo).to.contain(\"2020-02-01T\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{testCode}}_OT&validFrom=2020-01-01&validTo=2020-02-01",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate"
									],
									"query": [
										{
											"key": "offerTemplateCode",
											"value": "{{testCode}}_OT"
										},
										{
											"key": "validFrom",
											"value": "2020-01-01"
										},
										{
											"key": "validTo",
											"value": "2020-02-01"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Offer Template INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "56483948-b35c-4a53-9e02-a86fdd7508a4",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `org.meveo.model.catalog.LifeCycleStatusEnum` from String\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_OT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"INVALID\",\r\n    \"bomCode\": null,\r\n    \"offerTemplateCategoryCode\": null,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_USG_UNIT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"5_SE_CLASSIC_REC_FLAT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Offer Template INVALID_PARAMETER validity date",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a80e08de-b2cc-46da-be59-c5e2c4dd1b9d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"An offer, valid on 01/01/2020 - 01/03/2020, already exists. Please change the validity dates of an existing offer first.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_OT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"validFrom\": \"2020-01-01\",\r\n    \"validTo\": \"2020-03-01\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"bomCode\": null,\r\n    \"offerTemplateCategoryCode\": null,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_USG_UNIT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Offer Template SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80ac7627-0770-4e5e-8c58-80802ea09a56",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate/{{testCode}}_OT?validFrom=2020-01-01&validTo=2020-02-01",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate",
										"{{testCode}}_OT"
									],
									"query": [
										{
											"key": "validFrom",
											"value": "2020-01-01"
										},
										{
											"key": "validTo",
											"value": "2020-02-01"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Offer Template ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f509468c-f77e-4526-86ff-45b96fcce6be",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"OfferTemplate with code=\" + pm.collectionVariables.get(\"testCode\") + \"_OT /  /  does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/offerTemplate/{{testCode}}_OT",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"offerTemplate",
										"{{testCode}}_OT"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tax Class",
					"item": [
						{
							"name": "CreateOrUpdate  Tax Class  SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8670cfe9-c3c0-489e-ae81-01ed2e2edffa",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_TC\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/taxClass/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"taxClass",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read  Tax Class SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c4469690-e2a3-4d2f-803f-d5a6fc183576",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.dto.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_TC\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.dto.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/taxClass?code={{testCode}}_TC",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"taxClass"
									],
									"query": [
										{
											"key": "code",
											"value": "{{testCode}}_TC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Tax Class  ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8f286f3a-aa19-4dfe-a98d-2c7b699b5645",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"TaxClass with code=\" + pm.collectionVariables.get(\"testCode\") + \"_TC already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_TC\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/taxClass",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"taxClass"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Tax Class  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5ebf29a-a242-4f11-a69c-b7d5c587cb3b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"TaxClass with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testCode}}\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/taxClass",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"taxClass"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Tax Class  SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8e375949-8ceb-42bf-b4a3-71f8223c843d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_TC\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/taxClass",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"taxClass"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Tax Class  SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6c68b0d4-d808-404d-b562-101a1c450087",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_TC\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/taxClass/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"taxClass",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Tax Class  SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6784b54f-955f-449d-b1bc-80290c6b3426",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.dto.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_TC\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.dto.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/taxClass?code={{testCode}}_TC",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"taxClass"
									],
									"query": [
										{
											"key": "code",
											"value": "{{testCode}}_TC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Tax Class INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "de8324a1-f6e4-4b4a-b779-6b88009ddb33",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize instance of `java.util.ArrayList` out of VALUE_STRING token\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"INVALID\",\r\n    \"descriptionI18n\": \"INVALID\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/taxClass/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"taxClass",
										"createOrUpdate"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bbc1240a-745f-4cfe-8c6d-02e185c32089",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "29ea7add-a16c-47e7-997f-1d37b76a3ff3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Recurring Charge",
					"item": [
						{
							"name": "CreateOrUpdate  Recurring Charge SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aaccb6c5-49ce-4921-9546-03597a0a5b03",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_RCT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"invoiceSubCategory\": \"CLASSIC_USAGE\",\r\n    \"disabled\": false,\r\n    \"unitNbDecimal\": 4,\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\": \"{{testCode}}_TC\",\r\n    \"calendar\": \"MONTHLY\",\r\n    \"durationTermInMonth\": null,\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"triggeredEdrs\": null\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"recurringChargeTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read  Recurring Charge SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "28f600e4-dbd1-4260-a75b-736cd2ddcf98",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.recurringChargeTemplate.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_RCT\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.recurringChargeTemplate.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/recurringChargeTemplate?recurringChargeTemplateCode={{testCode}}_RCT",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"recurringChargeTemplate"
									],
									"query": [
										{
											"key": "recurringChargeTemplateCode",
											"value": "{{testCode}}_RCT"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Recurring Charge  ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d47ed126-ec18-4697-a269-73defb579662",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"RecurringChargeTemplate with code=\" + pm.collectionVariables.get(\"testCode\") + \"_RCT already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_RCT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"invoiceSubCategory\": \"CLASSIC_USAGE\",\r\n    \"disabled\": false,\r\n    \"unitNbDecimal\": 4,\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\": \"{{testCode}}_TC\",\r\n    \"calendar\": \"MONTHLY\",\r\n    \"durationTermInMonth\": null,\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"triggeredEdrs\": null\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/recurringChargeTemplate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"recurringChargeTemplate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Recurring Charge ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "977e6de7-3835-4135-9cb3-eee29a41ea66",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"RecurringChargeTemplate with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testCode}}\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/recurringChargeTemplate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"recurringChargeTemplate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Recurring Charge  SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9a864b97-6437-4cab-a057-a99f0666dbe7",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_RCT\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"invoiceSubCategory\": \"CLASSIC_USAGE\",\r\n    \"disabled\": false,\r\n    \"unitNbDecimal\": 4,\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\": \"{{testCode}}_TC\",\r\n    \"calendar\": \"MONTHLY\",\r\n    \"durationTermInMonth\": null,\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"triggeredEdrs\": null\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/recurringChargeTemplate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"recurringChargeTemplate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Recurring Charge SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6313a5aa-80d3-45e1-9973-aeceef49f88e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_RCT\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"invoiceSubCategory\": \"CLASSIC_USAGE\",\r\n    \"disabled\": false,\r\n    \"unitNbDecimal\": 4,\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\": \"{{testCode}}_TC\",\r\n    \"calendar\": \"MONTHLY\",\r\n    \"durationTermInMonth\": null,\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"triggeredEdrs\": null\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"recurringChargeTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Recurring Charge SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "62f9847a-fb5f-419d-99c3-29c0535ae819",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.recurringChargeTemplate.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_RCT\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.recurringChargeTemplate.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/recurringChargeTemplate?recurringChargeTemplateCode={{testCode}}_RCT",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"recurringChargeTemplate"
									],
									"query": [
										{
											"key": "recurringChargeTemplateCode",
											"value": "{{testCode}}_RCT"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Recurring Charge MISSING_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bb0695ee-0434-4141-8a81-6d800b924991",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: invoiceSubCategory, calendar, taxClassCode.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"MISSING\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"recurringChargeTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Recurring Charge INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63594081-5f01-4be5-b39c-ff6a26519eac",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Boolean` from String\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_RCT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"invoiceSubCategory\": \"ISCAT_REC\",\r\n    \"disabled\": \"INVAID\",\r\n    \"unitNbDecimal\": 4,\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"calendar\": \"CAL_MONTHLY_1ST\",\r\n    \"durationTermInMonth\": null,\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"triggeredEdrs\": null\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"recurringChargeTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "000f06b8-15a2-4c5c-a03a-2a523b8ae71b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "bb289c07-a673-48a0-a9f0-1bd32c2769a8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Price Plan",
					"item": [
						{
							"name": "CreateOrUpdate  Price Plan SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "58c7522f-54dc-4b73-bced-7362c3b9a4a2",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_PP\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"eventCode\": \"{{testCode}}_RCT\",\r\n    \"amountWithoutTax\": 100\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read  Price Plan SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a251fee7-8a67-4b28-8ddd-f3cb1dc79f66",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pricePlan.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_PP\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pricePlan.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan?pricePlanCode={{testCode}}_PP",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan"
									],
									"query": [
										{
											"key": "pricePlanCode",
											"value": "{{testCode}}_PP"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Price Plan  ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f6f6658a-aefb-446b-9a1a-277f4eb351ba",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"PricePlanMatrix with code=\" + pm.collectionVariables.get(\"testCode\") + \"_PP already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_PP\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"eventCode\": \"{{testCode}}_RCT\",\r\n    \"amountWithoutTax\": 100\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Price Plan ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8b5645ff-ed96-469c-8d29-3a3fb0eb2c9a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"PricePlanMatrix with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"eventCode\": \"{{testCode}}_RCT\",\r\n    \"amountWithoutTax\": 100\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Price Plan SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a5b13237-5d42-4e23-8ecd-fdb1083c162f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_PP\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"eventCode\": \"{{testCode}}_RCT\",\r\n    \"amountWithoutTax\": 100\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Price Plan SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ec007c1-b23e-4264-9e78-74b9b67d865d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_PP\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"eventCode\": \"{{testCode}}_RCT\",\r\n    \"amountWithoutTax\": 100\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Price Plan SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b051140c-5efb-4f48-9d68-fd7b18adcf07",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pricePlan.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_PP\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.pricePlan.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan?pricePlanCode={{testCode}}_PP",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan"
									],
									"query": [
										{
											"key": "pricePlanCode",
											"value": "{{testCode}}_PP"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Price Plan MISSING_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "299541af-c014-49f0-a842-ab39c2739ea8",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: eventCode, amountWithoutTax.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"MISSING\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Price Plan INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5d8c752-e743-4499-9268-8883e4018618",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.math.BigDecimal` from String\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_PP\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"eventCode\": \"{{testCode}}_RcT\",\r\n    \"amountWithoutTax\": \"INVALID\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Price Plan SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7ff8ad8c-11e8-441a-8e4b-e97603430b9a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan/{{testCode}}_PP",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan",
										"{{testCode}}_PP"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Price Plan ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "235f53e6-946a-4617-9701-0fe63f61d844",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"PricePlanMatrix with code=\" + pm.collectionVariables.get(\"testCode\") + \"_PP does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/pricePlan/{{testCode}}_PP",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"pricePlan",
										"{{testCode}}_PP"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cd5218d4-b204-415e-9b6d-0e287fb3f03a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "be7c8119-7098-4975-afcf-e2700389dcbf",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Service Template",
					"item": [
						{
							"name": "CreateOrUpdate  Service Template SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b13d9e1-64c5-4517-b0ef-14fb740eafb0",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_ST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"customFields\": null,\r\n    \"imageBase64\": null,\r\n    \"imagePath\": null,\r\n    \"invoicingCalendar\": null,\r\n    \"longDescription\": null,\r\n    \"mandatory\": true,\r\n    \"serviceChargeTemplateUsages\": null,\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{testCode}}_RCT\",\r\n                \"wallets\": null\r\n            }\r\n        ]\r\n    },\r\n    \"serviceChargeTemplateSubscriptions\": null,\r\n    \"serviceChargeTemplateTerminations\": null,\r\n    \"somCode\": null\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"serviceTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read  Service Template SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "79410fb4-3d5d-424f-ad38-c6da2a3a73d8",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.serviceTemplate.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_ST\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.serviceTemplate.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/serviceTemplate?serviceTemplateCode={{testCode}}_ST",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"serviceTemplate"
									],
									"query": [
										{
											"key": "serviceTemplateCode",
											"value": "{{testCode}}_ST"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Service Template  ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7dcb4306-59f5-450a-8070-593d0d43e4d9",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"ServiceTemplateService with code=\" + pm.collectionVariables.get(\"testCode\") + \"_ST already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_ST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"customFields\": null,\r\n    \"imageBase64\": null,\r\n    \"imagePath\": null,\r\n    \"invoicingCalendar\": null,\r\n    \"longDescription\": null,\r\n    \"mandatory\": true,\r\n    \"serviceChargeTemplateUsages\": null,\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{testCode}}_RCT\",\r\n                \"wallets\": null\r\n            }\r\n        ]\r\n    },\r\n    \"serviceChargeTemplateSubscriptions\": null,\r\n    \"serviceChargeTemplateTerminations\": null,\r\n    \"somCode\": null\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/serviceTemplate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"serviceTemplate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Service Template ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "31bcf061-7f9d-44f4-8c86-45438e5802e1",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"ServiceTemplateService with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"customFields\": null,\r\n    \"imageBase64\": null,\r\n    \"imagePath\": null,\r\n    \"invoicingCalendar\": null,\r\n    \"longDescription\": null,\r\n    \"mandatory\": true,\r\n    \"serviceChargeTemplateUsages\": null,\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{testCode}}_RCT\",\r\n                \"wallets\": null\r\n            }\r\n        ]\r\n    },\r\n    \"serviceChargeTemplateSubscriptions\": null,\r\n    \"serviceChargeTemplateTerminations\": null,\r\n    \"somCode\": null\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/serviceTemplate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"serviceTemplate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Service Template SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55e880ae-783f-4858-b970-3f9a5a134386",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_ST\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"customFields\": null,\r\n    \"imageBase64\": null,\r\n    \"imagePath\": null,\r\n    \"invoicingCalendar\": null,\r\n    \"longDescription\": null,\r\n    \"mandatory\": true,\r\n    \"serviceChargeTemplateUsages\": null,\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{testCode}}_RCT\",\r\n                \"wallets\": null\r\n            }\r\n        ]\r\n    },\r\n    \"serviceChargeTemplateSubscriptions\": null,\r\n    \"serviceChargeTemplateTerminations\": null,\r\n    \"somCode\": null\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/serviceTemplate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"serviceTemplate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Service Template SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ec2fddc-7872-4320-a43d-fd4e2f621008",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_ST\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"customFields\": null,\r\n    \"imageBase64\": null,\r\n    \"imagePath\": null,\r\n    \"invoicingCalendar\": null,\r\n    \"longDescription\": null,\r\n    \"mandatory\": true,\r\n    \"serviceChargeTemplateUsages\": null,\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{testCode}}_RCT\",\r\n                \"wallets\": null\r\n            }\r\n        ]\r\n    },\r\n    \"serviceChargeTemplateSubscriptions\": null,\r\n    \"serviceChargeTemplateTerminations\": null,\r\n    \"somCode\": null\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"serviceTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Service Template SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bb69aad8-08c5-4c57-ba23-e2484c3c4861",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.serviceTemplate.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_ST\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.serviceTemplate.description).to.eql(pm.collectionVariables.get(\"testDescription\") + \" updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/serviceTemplate?serviceTemplateCode={{testCode}}_ST",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"serviceTemplate"
									],
									"query": [
										{
											"key": "serviceTemplateCode",
											"value": "{{testCode}}_ST"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Service Template MISSING_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b6d2261-a9ef-4f0e-939b-d08972643799",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"serviceTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Service Template INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ab16e50c-77ce-4e5c-abf6-1752fd42c977",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `boolean` from String\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_ST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"customFields\": null,\r\n    \"imageBase64\": null,\r\n    \"imagePath\": null,\r\n    \"invoicingCalendar\": null,\r\n    \"longDescription\": null,\r\n    \"mandatory\": \"INVALID\",\r\n    \"serviceChargeTemplateUsages\": null,\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{testCode}}_RCT\",\r\n                \"wallets\": null\r\n            }\r\n        ]\r\n    },\r\n    \"serviceChargeTemplateSubscriptions\": null,\r\n    \"serviceChargeTemplateTerminations\": null,\r\n    \"somCode\": null\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"serviceTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "21ef75e9-65c1-4d6f-8d29-18125ba9cbc4",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dac8f3e3-9963-4380-8b79-1d30294de29d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Clear Data",
					"item": [
						{
							"name": "Delete Tax Class GENERIC_API_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f7adf65a-8f2c-4237-aee3-0aedd0972521",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"ERROR: update or delete on table \\\"billing_tax_class\\\" violates foreign key constraint\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/taxClass/{{testCode}}_TC",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"taxClass",
										"{{testCode}}_TC"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Recurring Charge GENERIC_API_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "33daf83f-d3d4-478c-925d-f65c556adc58",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"ERROR: update or delete on table\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/{{testCode}}_RCT",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"recurringChargeTemplate",
										"{{testCode}}_RCT"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Service Template SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "13e626c9-830b-475c-b365-613364335f99",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/serviceTemplate/{{testCode}}_ST",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"serviceTemplate",
										"{{testCode}}_ST"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Service Template ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ac0c7313-0129-42a3-926a-d43c4805db1f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"ServiceTemplate with code=\" + pm.collectionVariables.get(\"testCode\") + \"_ST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/serviceTemplate/{{testCode}}_ST",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"serviceTemplate",
										"{{testCode}}_ST"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Recurring Charge SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5df8b2a2-aca1-4f59-9763-ae0300c49fbe",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/{{testCode}}_RCT",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"recurringChargeTemplate",
										"{{testCode}}_RCT"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Recurring Charge ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "684b9667-a456-4e86-a841-3ebb80eda274",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"RecurringChargeTemplate with code=\" + pm.collectionVariables.get(\"testCode\") + \"_RCT does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/{{testCode}}_RCT",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"recurringChargeTemplate",
										"{{testCode}}_RCT"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Tax Class SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "edd9f456-04bc-422e-96be-8a7ad36aeb56",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/taxClass/{{testCode}}_TC",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"taxClass",
										"{{testCode}}_TC"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Tax Class ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ce61149b-5bc8-4ca4-a5a8-0b502b25c3ed",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"TaxClass with code=\" + pm.collectionVariables.get(\"testCode\") + \"_TC does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/taxClass/{{testCode}}_TC",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"taxClass",
										"{{testCode}}_TC"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Billing",
			"item": [
				{
					"name": "Invoice Category",
					"item": [
						{
							"name": "CreateOrUpdate Invoice Category  SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b75410d-2938-442b-ae8e-9ad6eb245c23",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_IC\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceCategory/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceCategory",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Invoice Category  SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e49667c7-1986-4c3c-ade7-99f57078df62",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.invoiceCategory.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_IC\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.invoiceCategory.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceCategory?invoiceCategoryCode={{testCode}}_IC",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceCategory"
									],
									"query": [
										{
											"key": "invoiceCategoryCode",
											"value": "{{testCode}}_IC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Invoice Category  ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9bd0eb4b-578c-4478-bd0f-b77e4b7407ae",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"InvoiceCategory with code=\"+pm.collectionVariables.get(\"testCode\")+\"_IC already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_IC\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceCategory",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceCategory"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Invoice Category  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "18f68128-8bf9-4673-972f-e936e4bd6d76",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"InvoiceCategory with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceCategory",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceCategory"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Invoice Category  SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4619e032-aed3-4d63-a22a-4d7978441dd6",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_IC\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceCategory",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceCategory"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Invoice Category  SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fbb77f47-886f-4c4c-ac65-a86b9979add0",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_IC\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceCategory/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceCategory",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Invoice Category  SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b892dd47-385b-4ea6-a2b3-b714c58dc51d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.invoiceCategory.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_IC\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.invoiceCategory.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceCategory?invoiceCategoryCode={{testCode}}_IC",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceCategory"
									],
									"query": [
										{
											"key": "invoiceCategoryCode",
											"value": "{{testCode}}_IC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Invoice Category  MISSING_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a4db8d7d-bbf0-4d5c-b2fe-f5ac3f9a7dd3",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceCategory/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceCategory",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Invoice Category INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc8d73d3-9a44-41c9-9116-f230668932fe",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot construct instance of `org.meveo.api.dto.CustomFieldsDto`\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_IC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"customFields\": \"INVALID\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceCategory/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceCategory",
										"createOrUpdate"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Invoice SubCategory",
					"item": [
						{
							"name": "CreateOrUpdate Invoice SubCategory  SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f488cd01-cc4b-40d5-80be-db2166a3e497",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"{{testCode}}_ISC\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"invoiceCategory\": \"{{testCode}}_IC\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceSubCategory",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Invoice SubCategory  SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e5fc6027-3f0a-4ba1-a6e4-af469671d412",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.invoiceSubCategory.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_ISC\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.invoiceSubCategory.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceSubCategory?invoiceSubCategoryCode={{testCode}}_ISC",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceSubCategory"
									],
									"query": [
										{
											"key": "invoiceSubCategoryCode",
											"value": "{{testCode}}_ISC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Invoice SubCategory  ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e1f95b45-f109-4f14-859b-c773ac020c05",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"InvoiceSubCategory with code=\"+pm.collectionVariables.get(\"testCode\")+\"_ISC already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"{{testCode}}_ISC\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"invoiceCategory\": \"{{testCode}}_IC\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceSubCategory",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceSubCategory"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Invoice SubCategory  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c79a1a7d-6d04-4c16-a426-dff8b6b1d227",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"InvoiceSubCategory with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"invoiceCategory\": \"{{testCode}}_IC\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceSubCategory",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceSubCategory"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Invoice SubCategory  SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d786538c-9729-4106-984d-8b8621ae9609",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_ISC\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"invoiceCategory\": \"{{testCode}}_IC\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceSubCategory",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceSubCategory"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Invoice SubCategory  SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "47a6a8fc-7a88-4d38-b469-6d126dd044b7",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_ISC\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"invoiceCategory\": \"{{testCode}}_IC\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceSubCategory",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Invoice Category  SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cb3092df-5027-40fe-b9e5-2e24cc26eb43",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.invoiceSubCategory.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_ISC\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.invoiceSubCategory.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceSubCategory?invoiceSubCategoryCode={{testCode}}_ISC",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceSubCategory"
									],
									"query": [
										{
											"key": "invoiceSubCategoryCode",
											"value": "{{testCode}}_ISC"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Invoice SubCategory  MISSING_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f9c7b5c6-6a7a-46fc-bdb0-b1049b7a8add",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: invoiceCategory.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_ISC\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceSubCategory",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Invoice SubCategory INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d19d0ff8-c8fb-4af9-8e80-99688634d33d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot construct instance of `org.meveo.api.dto.CustomFieldsDto`\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_ISC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"customFields\": \"INVALID\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceSubCategory",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Invoice SubCategory ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9857909d-87c2-4358-80f4-77d3453cde70",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"InvoiceCategory with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_ISC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"invoiceCategory\": \"NOT_EXIST\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceSubCategory",
										"createOrUpdate"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Invoice Sequence",
					"item": [
						{
							"name": "CreateOrUpdate Invoice Sequence SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c3385f2b-eba4-4308-896c-d7a9ee1d5036",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_IS\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"sequenceSize\": \"14\",\r\n    \"currentInvoiceNb\": \"0\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceSequence/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceSequence",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Invoice Sequence SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "673910a2-7f73-4435-885b-ad74f427f0bc",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.invoiceSequenceDto.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_IS\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.invoiceSequenceDto.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceSequence?invoiceSequenceCode={{testCode}}_IS",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceSequence"
									],
									"query": [
										{
											"key": "invoiceSequenceCode",
											"value": "{{testCode}}_IS"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Invoice Sequence ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e6ca5d0f-d86a-468c-bdf2-5c2bb9362e5e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"InvoiceSequence with code=\"+pm.collectionVariables.get(\"testCode\")+\"_IS already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_IS\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"sequenceSize\": \"14\",\r\n    \"currentInvoiceNb\": \"0\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceSequence",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceSequence"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Invoice Sequence ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3ce0ab6-99db-49e4-815d-1d51595b05f8",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"InvoiceSequence with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"sequenceSize\": \"14\",\r\n    \"currentInvoiceNb\": \"0\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceSequence",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceSequence"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Invoice Sequence SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa2eb897-7d7e-449e-85c0-7da8ec0c007f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_IS\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"sequenceSize\": \"14\",\r\n    \"currentInvoiceNb\": \"0\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceSequence",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceSequence"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Invoice Sequence SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b3ba36d1-8b9c-4f48-8962-ce536b0d6031",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_IS\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"sequenceSize\": \"14\",\r\n    \"currentInvoiceNb\": \"0\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceSequence/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceSequence",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Invoice Sequence SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7858037e-d9c3-4a7f-ad2c-25fe9b48ecb0",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.invoiceSequenceDto.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_IS\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.invoiceSequenceDto.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceSequence?invoiceSequenceCode={{testCode}}_IS",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceSequence"
									],
									"query": [
										{
											"key": "invoiceSequenceCode",
											"value": "{{testCode}}_IS"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Invoice Sequence MISSING_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bce679e9-8817-4c29-b21b-b7874f3fece3",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceSequence/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceSequence",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Invoice Sequence INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "04ea8ca0-9a3a-442a-9e8b-24fc2c664bc3",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Integer` from String\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_IS\",\r\n    \"sequenceSize\": \"INVALID\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceSequence/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceSequence",
										"createOrUpdate"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Clear Data",
					"item": [
						{
							"name": "Delete Invoice Category GENERIC_API_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5f662be1-924f-4832-ac27-2d95f5ae6095",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"GENERIC_API_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"ERROR: update or delete on table\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceCategory/{{testCode}}_IC",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceCategory",
										"{{testCode}}_IC"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Invoice SubCategory SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "73c5eed4-e72a-457d-a71d-d87d2a1e6974",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceSubCategory/{{testCode}}_ISC",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceSubCategory",
										"{{testCode}}_ISC"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Invoice SubCategory ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77a92aef-c0f9-4ddd-8a69-5bfa6e8c48fd",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"InvoiceSubCategory with code=\"+pm.collectionVariables.get(\"testCode\")+\"_ISC does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceSubCategory/{{testCode}}_ISC",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceSubCategory",
										"{{testCode}}_ISC"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Invoice Category SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "35fa3822-67ef-4c35-98b7-2e9cc56eeec8",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceCategory/{{testCode}}_IC",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceCategory",
										"{{testCode}}_IC"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Invoice Category ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b7ff333e-0383-4a6a-a589-ae2a5abf4e90",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"InvoiceCategory with code=\"+pm.collectionVariables.get(\"testCode\")+\"_IC does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceCategory/{{testCode}}_IC",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceCategory",
										"{{testCode}}_IC"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Wallet Operation",
					"item": [
						{
							"name": "Create Wallet Operation SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e0998a4c-197f-4cb4-883f-8ea6029f348e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_WLT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"subscription\": \"ben.ohara\",\r\n    \"chargeInstance\": \"CH_CLASSIC_REC_FLAT\",\r\n    \"currency\": \"EUR\",\r\n    \"taxCode\": \"TAX_CLASSIC_HIGH\",\r\n    \"status\": \"TREATED\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/wallet/operation",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"wallet",
										"operation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wallet Operation ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7bb0b09c-aeab-4428-91e6-cdd7638290d0",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"WalletOperation with code=\"+pm.collectionVariables.get(\"testCode\")+\"_WLT already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_WLT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"subscription\": \"ben.ohara\",\r\n    \"chargeInstance\": \"CH_CLASSIC_REC_FLAT\",\r\n    \"currency\": \"EUR\",\r\n    \"taxCode\": \"TAX_CLASSIC_HIGH\",\r\n    \"status\": \"TREATED\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/wallet/operation",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"wallet",
										"operation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wallet Operation MISSING_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3af9f0fc-5797-4ae2-884d-2015f2c85646",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: userAccount or subscription, chargeInstance or chargeInstanceId, currency, taxCode or taxPercent.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"MISSING\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/wallet/operation",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"wallet",
										"operation"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Wallet Operation INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4dcaf8fb-8448-4cad-8305-8d2b3ed28bc0",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.util.Date` from String\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_WLT_INVALID\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"subscription\": \"ben.ohara\",\r\n    \"subscriptionDate\": \"INVALID\",\r\n    \"chargeInstance\": \"CH_CLASSIC_OSS_UNIT\",\r\n    \"currency\": \"EUR\",\r\n    \"taxCode\": \"TAX_CLASSIC_HIGH\",\r\n    \"status\": \"TREATED\",\r\n    \"quantity\": 1\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/wallet/operation",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"wallet",
										"operation"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Subscription",
			"item": [
				{
					"name": "Subscription",
					"item": [
						{
							"name": "CreateOrUpdate Subscription SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8700df5f-0430-498a-b478-7ff1be9ab8e9",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"userAccount\": \"ben.ohara\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01\"\r\n}\t\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Subscription SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ecdb62ef-1a41-46f8-8548-689c16a65e15",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_SUB\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.subscription.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{testCode}}_SUB",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{testCode}}_SUB"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Subscription ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cfab2e4a-19e1-4b45-bcd2-111b844bed2e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Subscription with code=\"+pm.collectionVariables.get(\"testCode\")+\"_SUB already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"userAccount\": \"ben.ohara\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Subscription ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9303908d-7d32-480a-8d2d-51adb367a051",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Subscription with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"code\": \"NOT_EXIST\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"userAccount\": \"ben.ohara\",\r\n\t\"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n\t\"subscriptionDate\": \"2019-01-01\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Subscription SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a3a4a6e3-b408-4345-a6f3-83edce85b8f8",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"userAccount\": \"ben.ohara\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Subscription SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "12de2bdb-b7fe-46a1-a304-ec46511824d0",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"userAccount\": \"ben.ohara\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Subscription SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6345eee8-33d5-47b4-9762-bee1907131e3",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_SUB\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.subscription.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{testCode}}_SUB",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription"
									],
									"query": [
										{
											"key": "subscriptionCode",
											"value": "{{testCode}}_SUB"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Subscription ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6f228572-1ae2-4ef8-86ca-1ff085bf77c5",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"UserAccount with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"userAccount\": \"NOT_EXIST\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Subscription MISSING_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "caf387df-d99b-4436-8325-ae1724b6d670",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: subscriptionDate.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"userAccount\": \"ben.ohara\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Subscription INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1aab3165-96a2-4336-9b7c-129fa9d28283",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.util.Date` from String\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"userAccount\": \"ben.ohara\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"INVALID\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Terminate Subscription SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d5d39723-a1bf-4eb2-9c3f-ffb68043dfd4",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subscriptionCode\": \"{{testCode}}_SUB\",\r\n    \"terminationReason\" : \"TERM_REASON_1\",\r\n    \"terminationDate\": \"2019-01-01\",\r\n    \"orderItemAction\" : \"DELETE\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/terminate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"terminate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Terminate Subscription RESILIATED",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22aace42-219c-4c51-9148-2768fc3f82dc",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Subscription is already RESILIATED.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"subscriptionCode\": \"{{testCode}}_SUB\",\r\n    \"terminationReason\" : \"TERM_REASON_1\",\r\n    \"terminationDate\": \"2019-01-01\",\r\n    \"orderItemAction\" : \"DELETE\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/terminate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"terminate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Subscribe and Activate Subscription SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d924af62-3610-49ee-b18e-f5a95641ae1d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"SUB_TEST_1\",\r\n    \"userAccount\": \"DEMO.CLASSIC\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01T22:00:00Z\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"subscriptionDate\": \"2019-01-01T22:00:00Z\",\r\n                \"quantity\": 1\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/subscribeAndActivateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"subscribeAndActivateServices"
									]
								}
							},
							"response": []
						},
						{
							"name": "Subscribe and Activate Subscription ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5d557f9-cf8c-47f2-b1c0-d9a59e98b9e8",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Subscription with code=SUB_TEST_1 already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"SUB_TEST_1\",\r\n    \"userAccount\": \"DEMO.CLASSIC\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01T22:00:00Z\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"subscriptionDate\": \"2019-01-01T22:00:00Z\",\r\n                \"quantity\": 1\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/billing/subscription/subscribeAndActivateServices",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"billing",
										"subscription",
										"subscribeAndActivateServices"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Settings",
			"item": [
				{
					"name": "Title",
					"item": [
						{
							"name": "CreateOrUpdate Title SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1ff70077-0633-43f3-8391-917067d7ac72",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_TITLE\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{testDescription}}\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"false\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/title/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"title",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Title SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "955c4d0b-7abe-43c7-bec6-0f8654511375",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.titleDto.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_TITLE\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.titleDto.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/title?titleCode={{testCode}}_TITLE",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"title"
									],
									"query": [
										{
											"key": "titleCode",
											"value": "{{testCode}}_TITLE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Title ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "855a5984-1520-41d4-82d2-e7824d77bc4e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Title with code=\"+pm.collectionVariables.get(\"testCode\")+\"_TITLE already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_TITLE\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{testDescription}}\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"false\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/title",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"title"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Title ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "191724c9-3c9b-422a-bceb-efdff0d398e7",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Title with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{testDescription}}\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"false\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/title",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"title"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Title SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6ae0a81b-2472-458c-8171-c2cfc2ad56be",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_TITLE\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{testDescription}}\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"false\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/title",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"title"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Account Operation SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "387cc1c0-2383-484f-84a7-976b3446a997",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_TITLE\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{testDescription}}\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"false\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/title/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"title",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Title SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fef627a3-9746-4cf7-b97a-50c82bbc0616",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.titleDto.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_TITLE\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.titleDto.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/title?titleCode={{testCode}}_TITLE",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"title"
									],
									"query": [
										{
											"key": "titleCode",
											"value": "{{testCode}}_TITLE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Title MISSING_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f8f0fb40-6082-4b1a-9e65-1a0ae0ccdf9f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: titleCode.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{testDescription}}\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"false\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/title/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"title",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Title INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e372f068-3cec-4f26-aae8-444540c2b7f5",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Boolean` from String\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"Test\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"INVALID\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/title/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"title",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Title SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "bdb23da6-8be2-4a20-903f-891ce1898137",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/title/{{testCode}}_TITLE",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"title",
										"{{testCode}}_TITLE"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Title ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e4636b73-4ed8-4d75-9463-bb2b87df3997",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Title with code=\"+pm.collectionVariables.get(\"testCode\")+\"_TITLE does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/account/title/{{testCode}}_TITLE",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"account",
										"title",
										"{{testCode}}_TITLE"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Calendar",
					"item": [
						{
							"name": "CreateOrUpdate Calendar SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5255e6d7-cb0c-46d0-871b-c213d63bdc12",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_CAL\",\r\n    \"description\": \"Monthly (1st of the month)\",\r\n    \"calendarType\": \"YEARLY\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/calendar/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"calendar",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Calendar SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db2046e8-7c68-419f-886c-5104462c8b4b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.calendar.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_CAL\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal Monthly (1st of the month)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.calendar.description).to.eql(\"Monthly (1st of the month)\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/calendar/?calendarCode={{testCode}}_CAL",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"calendar",
										""
									],
									"query": [
										{
											"key": "calendarCode",
											"value": "{{testCode}}_CAL"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Calendar ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2baa80ec-2b54-4ad7-a9ec-200991f2b382",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Calendar with code=\"+pm.collectionVariables.get(\"testCode\")+\"_CAL already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_CAL\",\r\n    \"description\": \"Monthly (1st of the month)\",\r\n    \"calendarType\": \"YEARLY\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/calendar",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"calendar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Calendar ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2422257e-c008-4f1d-8d66-1c396751873d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Calendar with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"Monthly (1st of the month)\",\r\n    \"calendarType\": \"YEARLY\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/calendar",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"calendar"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Calendar SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c32a02d4-8476-4042-869f-045a0361fca8",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_CAL\",\r\n    \"description\": \"Monthly (1st of the month) updated\",\r\n    \"calendarType\": \"YEARLY\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/calendar",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"calendar"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Calendar SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b73dc3cb-7e5e-4899-a427-041956da69d7",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_CAL\",\r\n    \"description\": \"Monthly (1st of the month) updated\",\r\n    \"calendarType\": \"YEARLY\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/calendar/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"calendar",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Calendar SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "460182ad-20fc-42d4-af65-ea172fa5fdc1",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.calendar.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_CAL\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal Monthly (1st of the month)\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.calendar.description).to.eql(\"Monthly (1st of the month) updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/calendar/?calendarCode={{testCode}}_CAL",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"calendar",
										""
									],
									"query": [
										{
											"key": "calendarCode",
											"value": "{{testCode}}_CAL"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Calendar MISSING_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d3e87b0-6a71-48b8-b98a-9908b47274a1",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: calendarType.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_CAL\",\r\n    \"description\": \"Monthly (1st of the month)\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/calendar/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"calendar",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Calendar GENERIC_API_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b43cd3d6-740a-44c8-8e98-96779c3b2eda",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"GENERIC_API_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"query did not return a unique result\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"description\": \"Monthly (1st of the month)\",\r\n    \"calendarType\": \"YEARLY\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/calendar/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"calendar",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Calendar INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "93676efe-098c-418c-8dc4-26c80ae60f77",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `org.meveo.api.dto.CalendarTypeEnum` from String\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_CAL\",\r\n    \"description\": \"Monthly (1st of the month)\",\r\n    \"calendarType\": \"INVALID\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/calendar/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"calendar",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Calendar SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3b8bc8d4-e6da-4966-9071-dd16fb81fe13",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/calendar/{{testCode}}_CAL",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"calendar",
										"{{testCode}}_CAL"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Calendar ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "23413290-3b1e-4d9c-8ddd-83d6ea9b7300",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Calendar with code=\"+pm.collectionVariables.get(\"testCode\")+\"_CAL does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/calendar/{{testCode}}_CAL",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"calendar",
										"{{testCode}}_CAL"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Channel",
					"item": [
						{
							"name": "CreateOrUpdate Channel SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4dbf969e-6829-424d-9e28-5851f2b3b3a1",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_CH\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"channel",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Channel SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "77deb545-b908-4b96-8ce8-23e97b6ebbe8",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.channel.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_CH\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.channel.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/channel?channelCode={{testCode}}_CH",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"channel"
									],
									"query": [
										{
											"key": "channelCode",
											"value": "{{testCode}}_CH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Channel ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "43a4a323-66b9-4f0d-b12d-ff8c8e8622fd",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Channel with code=\"+pm.collectionVariables.get(\"testCode\")+\"_CH already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_CH\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/channel",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"channel"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Channel ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ee1d42f1-2138-4684-ac0e-862d44ea1819",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Channel with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/channel",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"channel"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Channel SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b4ec39f1-1c50-4d33-ba44-6adb5f91cec5",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_CH\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/channel",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"channel"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Channel SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c0d7a733-c589-4b32-9225-ec35b4bbbea5",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_CH\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"channel",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Channel SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "57686eb3-111c-42ba-ab13-6e6f259ac336",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.channel.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_CH\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.channel.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/channel?channelCode={{testCode}}_CH",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"channel"
									],
									"query": [
										{
											"key": "channelCode",
											"value": "{{testCode}}_CH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Channel MISSING_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "53c8bde9-440f-4a56-ba4a-adb20e755a16",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"description\": \"{{testDescription}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"channel",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Channel INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8a1e65a1-1576-4ce0-b5e2-07639eab026f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Boolean` from String\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_CH\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"disabled\": \"INVALID\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"channel",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Channel SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2a8b9e83-bfdb-4d97-bf96-87fcde778f72",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/channel?channelCode={{testCode}}_CH",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"channel"
									],
									"query": [
										{
											"key": "channelCode",
											"value": "{{testCode}}_CH"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Channel ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fdee2bd8-4a73-4300-8049-6a5a5c5b16df",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Channel with code=\"+pm.collectionVariables.get(\"testCode\")+\"_CH does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/channel?channelCode={{testCode}}_CH",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"channel"
									],
									"query": [
										{
											"key": "channelCode",
											"value": "{{testCode}}_CH"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "CountryIso",
					"item": [
						{
							"name": "CreateOrUpdate CountryIso SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a888a8e6-a927-4fd3-a671-5965c534763d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"countryCode\": \"TS\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/countryIso/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"countryIso",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read CountryIso SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "45b949a5-247f-4886-acbe-ba3136df06dc",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal TS\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.country.countryCode).to.eql(\"TS\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.country.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/countryIso?countryCode=TS",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"countryIso"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "TS"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create CountryIso  ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "245b8bf1-8c85-4c2e-8d52-da7e8eefdc91",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Country with code=TS already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"countryCode\": \"TS\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/countryIso",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"countryIso"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update CountryIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0cc97ea3-7125-4eb0-8cfa-2de094f39088",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Country with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"countryCode\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/countryIso",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"countryIso"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update CountryIso SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05f9c05d-67d8-41f3-8d3d-2ad14d24af6f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"countryCode\": \"TS\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/countryIso",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"countryIso"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate CountryIso SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b292c891-a2ae-4e95-9936-62e083bf7982",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"countryCode\": \"TS\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/countryIso/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"countryIso",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read CountryIso SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3edb3bb8-e355-47cc-b90e-1408459eb2dc",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal TS\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.country.countryCode).to.eql(\"TS\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.country.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/countryIso?countryCode=TS",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"countryIso"
									],
									"query": [
										{
											"key": "countryCode",
											"value": "TS"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate CountryIso  MISSING_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7306cdfe-dbbd-404a-ae64-839968c671a2",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: currencyCode.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"countryCode\": \"MISSING\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"FRA\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/countryIso/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"countryIso",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate CountryIso INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "092c5ae4-fe94-4e95-87d0-071f21d699ff",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize instance of `java.util.ArrayList` out of VALUE_STRING\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"countryCode\": \"INVALID\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\",\r\n    \"languageDescriptions\": \"INVALID\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/countryIso/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"countryIso",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate CountryIso INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "630530af-47fd-4270-a581-8343e4dacf8c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Invalid values passed:     Country.countryCode: value 'TOO_LONG_NAME' - size must be between 0 and 10;\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"countryCode\": \"TOO_LONG_NAME\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/countryIso/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"countryIso",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate CountryIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2e9fb995-52f6-4b5b-9c7d-70fda923b783",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Language with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"countryCode\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"NOT_EXIST\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/countryIso/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"countryIso",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete CountryIso SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d09b0142-0e59-4c9d-a335-0fdb74ea4563",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/countryIso/TS",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"countryIso",
										"TS"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete CountryIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8882da4c-8df2-4f2d-8942-e4a357b4ef17",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Country with code=TS does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/countryIso/TS",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"countryIso",
										"TS"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "CurrencyIso",
					"item": [
						{
							"name": "CreateOrUpdate CurrencyIso SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f2abfde8-3c74-4ba1-b0af-a8e210185050",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/currencyIso/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"currencyIso",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read CurrencyIso SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10c3bec8-6c16-4258-b220-4dd015a2f95e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal TST\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.currency.code).to.eql(\"TST\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.currency.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/currencyIso?currencyCode=TST",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"currencyIso"
									],
									"query": [
										{
											"key": "currencyCode",
											"value": "TST"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create CurrencyIso ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "867b1924-eae7-47fd-986d-22101edf366b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Currency with code=TST already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/currencyIso",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"currencyIso"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update CurrencyIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db6084f8-a0b3-4b31-a00e-b856d81ff91d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Currency with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/currencyIso",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"currencyIso"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update CurrencyIso SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d729015b-8999-42c1-965f-3da6eaaf93fd",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/currencyIso",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"currencyIso"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate CurrencyIso SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c5d679ab-9f40-41aa-a069-ffae2d79d5e1",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/currencyIso/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"currencyIso",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read CurrencyIso SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dbea79d3-dd1a-4198-9e09-99ae5e246fc5",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal TST\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.currency.code).to.eql(\"TST\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.currency.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/currencyIso?currencyCode=TST",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"currencyIso"
									],
									"query": [
										{
											"key": "currencyCode",
											"value": "TST"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate CurrencyIso INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "134e7e68-37c9-4fb6-9cf7-ee02d9864c1e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Invalid values passed:     Currency.currencyCode: value 'TOO_LONG_NAME' - size must be between 0 and 3;\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"TOO_LONG_NAME\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/currencyIso/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"currencyIso",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate CurrencyIso  INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5771e30e-65dc-41fd-8d56-d9cceb6a614a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"ERROR: null value in column\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"TST\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/currencyIso/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"currencyIso",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate CurrencyIso  MISSING_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e1d0d67b-1a4c-45c5-a956-67647a05f2b0",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"description\": \"{{testDescription}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/currencyIso/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"currencyIso",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete CurrencyIso SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "66ecd17d-470b-4e5f-9487-e0713fef5100",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/currencyIso/TST",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"currencyIso",
										"TST"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete CurrencyIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2d7aac65-1263-4b92-9963-4d5b5c463b46",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Currency with code=TST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/currencyIso/TST",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"currencyIso",
										"TST"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "LanguageIso",
					"item": [
						{
							"name": "CreateOrUpdate LanguageIso SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "34634d66-590b-4c9a-a3c6-538eb15a7ba2",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n  \"code\": \"TST\",\r\n  \"description\": \"{{testDescription}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/languageIso/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"languageIso",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read LanguageIso SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "f5cbb3fe-58de-4e1a-a3d9-91a8de3d0ac8",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal TST\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.language.code).to.eql(\"TST\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.language.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/languageIso?languageCode=TST",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"languageIso"
									],
									"query": [
										{
											"key": "languageCode",
											"value": "TST"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create LanguageIso  ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "dba1cc6d-2f12-4802-9d2e-12f876faf7a3",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Language with code=TST already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/languageIso",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"languageIso"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update LanguageIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a0db9982-1343-4801-ae99-67bb71d0cd95",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Language with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/languageIso",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"languageIso"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update LanguageIso SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ddd95f26-7f4d-4313-a0fc-e14ddf715512",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/languageIso",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"languageIso"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate LanguageIso SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "227e05e4-1226-4c5a-8b9f-44b29aaa2655",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/languageIso/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"languageIso",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read LanguageIso SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "06cd5708-c94e-4489-899d-060de6ec4a84",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal TST\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.language.code).to.eql(\"TST\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.language.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/languageIso?languageCode=TST",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"languageIso"
									],
									"query": [
										{
											"key": "languageCode",
											"value": "TST"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate LanguageIso INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a2b3c0ba-bcc3-45f0-993c-19cc6f642ee6",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Invalid values passed:     Language.languageCode: value 'TOO_LONG_NAME' - size must be between 0 and 3;\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"TOO_LONG_NAME\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/languageIso/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"languageIso",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate LanguageIso INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e36a9023-eeba-4ad2-aa32-9e42eae7ad2f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"ERROR: null value in column\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"TST\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/languageIso/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"languageIso",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate LanguageIso MISSING_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "233f50f5-dd3a-495b-a357-37f05bef5323",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"description\": \"{{testDescription}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/languageIso/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"languageIso",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete LanguageIso SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "448bdd5e-549a-4603-8aa4-b506eb4c5263",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/languageIso/TST",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"languageIso",
										"TST"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete LanguageIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c44ca8e7-503b-47c2-8c29-9e79f238f42a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Language with code=TST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/languageIso/TST",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"languageIso",
										"TST"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Provider",
					"item": [
						{
							"name": "Create Provider BUSINESS_API_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1fde2557-f8ae-40da-b91a-29598b3db204",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(500);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"BUSINESS_API_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"There should already be a provider setup\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_PROVIDER\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"enterprise\": \"true\",\r\n    \"rounding\": \"5\",\r\n    \"invoiceConfiguration\": {\r\n        \"displaySubscriptions\": \"true\",\r\n        \"displayServices\": \"true\",\r\n        \"displayOffers\": \"true\",\r\n        \"displayEdrs\": \"true\",\r\n        \"displayProvider\": \"true\",\r\n        \"displayCfAsXML\": \"true\",\r\n        \"displayPricePlans\": \"true\",\r\n        \"displayDetail\": \"true\",\r\n        \"displayChargesPeriods\": \"true\",\r\n        \"displayFreeTransacInInvoice\": \"false\",\r\n        \"displayBillingCycle\": \"true\",\r\n        \"displayOrders\": \"true\"\r\n    },\r\n    \"bankCoordinates\": {\r\n        \"iban\": \"30004 01234 12345678901 23\",\r\n        \"bic\": \"BNPAFRPPXXX\",\r\n        \"ics\": \"\"\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/provider",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"provider"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Provider SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "55f32c85-0bde-4874-8233-d6e0dfe21d6c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_PROVIDER\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"enterprise\": \"true\",\r\n    \"rounding\": \"5\",\r\n    \"invoiceConfiguration\": {\r\n        \"displaySubscriptions\": \"true\",\r\n        \"displayServices\": \"true\",\r\n        \"displayOffers\": \"true\",\r\n        \"displayEdrs\": \"true\",\r\n        \"displayProvider\": \"true\",\r\n        \"displayCfAsXML\": \"true\",\r\n        \"displayPricePlans\": \"true\",\r\n        \"displayDetail\": \"true\",\r\n        \"displayChargesPeriods\": \"true\",\r\n        \"displayFreeTransacInInvoice\": \"false\",\r\n        \"displayBillingCycle\": \"true\",\r\n        \"displayOrders\": \"true\"\r\n    },\r\n    \"bankCoordinates\": {\r\n        \"iban\": \"30004 01234 12345678901 23\",\r\n        \"bic\": \"BNPAFRPPXXX\",\r\n        \"ics\": \"\"\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/provider",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"provider"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Provider SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fcb40f70-6b86-494e-adc3-04862e9505d8",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.provider.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_PROVIDER\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.provider.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/provider",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"provider"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Provider SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3fecb56d-2702-46f8-9f48-7deeba10f79a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_PROVIDER\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"enterprise\": \"true\",\r\n    \"rounding\": \"5\",\r\n    \"invoiceConfiguration\": {\r\n        \"displaySubscriptions\": \"true\",\r\n        \"displayServices\": \"true\",\r\n        \"displayOffers\": \"true\",\r\n        \"displayEdrs\": \"true\",\r\n        \"displayProvider\": \"true\",\r\n        \"displayCfAsXML\": \"true\",\r\n        \"displayPricePlans\": \"true\",\r\n        \"displayDetail\": \"true\",\r\n        \"displayChargesPeriods\": \"true\",\r\n        \"displayFreeTransacInInvoice\": \"false\",\r\n        \"displayBillingCycle\": \"true\",\r\n        \"displayOrders\": \"true\"\r\n    },\r\n    \"bankCoordinates\": {\r\n        \"iban\": \"30004 01234 12345678901 23\",\r\n        \"bic\": \"BNPAFRPPXXX\",\r\n        \"ics\": \"\"\r\n    }\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/provider",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"provider"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Provider SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d2d0de4e-a8ff-42ec-99a0-6796dfbbe39a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.provider.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_PROVIDER\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.provider.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/provider",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"provider"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Provider INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0ceb7299-23f7-4215-8634-27b6af1e3e7c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Boolean` from String\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"{{testCode}}_PROVIDER\",\r\n  \"description\": \"{{testDescription}}\",\r\n    \"enterprise\": \"INVALID\",\r\n    \"rounding\": \"5\",\r\n    \"invoiceConfiguration\": {\r\n      \"displaySubscriptions\": \"true\",\r\n      \"displayServices\": \"true\",\r\n      \"displayOffers\": \"true\",\r\n      \"displayEdrs\": \"true\",\r\n      \"displayProvider\": \"true\",\r\n      \"displayCfAsXML\": \"true\",\r\n      \"displayPricePlans\": \"true\",\r\n      \"displayDetail\": \"true\",\r\n      \"displayChargesPeriods\": \"true\",\r\n      \"displayFreeTransacInInvoice\": \"false\",\r\n      \"displayBillingCycle\": \"true\",\r\n      \"displayOrders\": \"true\"\r\n    },\r\n    \"bankCoordinates\": {\r\n        \"iban\": \"30004 01234 12345678901 23\",\r\n        \"bic\": \"BNPAFRPPXXX\",\r\n        \"ics\": \"\"\r\n    }\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/provider",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"provider"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Provider INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2c4f91b6-14b3-434b-8ce6-045c74711484",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Integer` from String\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"code\": \"{{testCode}}_PROVIDER\",\r\n  \"description\": \"{{testDescription}}\",\r\n    \"enterprise\": \"true\",\r\n    \"rounding\": \"INVALID\",\r\n    \"invoiceConfiguration\": {\r\n      \"displaySubscriptions\": \"true\",\r\n      \"displayServices\": \"true\",\r\n      \"displayOffers\": \"true\",\r\n      \"displayEdrs\": \"true\",\r\n      \"displayProvider\": \"true\",\r\n      \"displayCfAsXML\": \"true\",\r\n      \"displayPricePlans\": \"true\",\r\n      \"displayDetail\": \"true\",\r\n      \"displayChargesPeriods\": \"true\",\r\n      \"displayFreeTransacInInvoice\": \"false\",\r\n      \"displayBillingCycle\": \"true\",\r\n      \"displayOrders\": \"true\"\r\n    },\r\n    \"bankCoordinates\": {\r\n        \"iban\": \"30004 01234 12345678901 23\",\r\n        \"bic\": \"BNPAFRPPXXX\",\r\n        \"ics\": \"\"\r\n    }\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/provider",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"provider"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "940a460d-4ef8-459d-a0b8-5f300157e981",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2ff809df-d61c-4c8b-87d7-87516c2e1006",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Role",
					"item": [
						{
							"name": "CreateOrUpdate Role SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fc3073b0-b6dd-47ef-a0c3-ff6fca333a9e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{testCode}}_ROLE\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"permission\": [\r\n        {\r\n            \"permission\": \"cc-module-read\",\r\n            \"name\": \"cc-module-read\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/role/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"role",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Role SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1f559fb3-5ee0-44d9-826b-27e2b1f5ffdc",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal\"+pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleDto.name).to.eql(pm.collectionVariables.get(\"testCode\") + \"_ROLE\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleDto.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/role?roleName={{testCode}}_ROLE",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"role"
									],
									"query": [
										{
											"key": "roleName",
											"value": "{{testCode}}_ROLE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Role ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "10b4e3a1-8518-4cbd-9a67-8ae3a581444b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Role with role name=\"+pm.collectionVariables.get(\"testCode\")+\"_ROLE already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{testCode}}_ROLE\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"permission\": [\r\n        {\r\n            \"permission\": \"cc-module-read\",\r\n            \"name\": \"cc-module-read\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/role",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"role"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Role ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b5879be2-33a6-4cb6-8c18-1d6d1f6b4f1c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Role with name=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"permission\": [\r\n        {\r\n            \"permission\": \"cc-module-read\",\r\n            \"name\": \"cc-module-read\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/role",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"role"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Role SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "237fc6ca-8e5f-4e0a-843c-e96cf3134a24",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{testCode}}_ROLE\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/role",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"role"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Role  SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "271000e2-c98e-4e70-a6f6-06974b0c51b1",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{testCode}}_ROLE\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/role/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"role",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Role  SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "6fa19f26-2561-4bfb-b98e-95e86b6ce8b1",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal\" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleDto.name).to.eql(pm.collectionVariables.get(\"testCode\") + \"_ROLE\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.roleDto.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/role?roleName={{testCode}}_ROLE",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"role"
									],
									"query": [
										{
											"key": "roleName",
											"value": "{{testCode}}_ROLE"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Role INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cccb11e6-a364-4d43-b518-a1fe4da7adc6",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize instance of `java.util.ArrayList` out of VALUE_STRING\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{testCode}}_ROLE\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"permission\": \"INVALID\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/role/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"role",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Role MISSING_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "228e0c2d-c225-4a84-8f81-a144e83bd3cf",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: name.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{ \r\n\t\"description\": \"{{testDescription}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/role/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"role",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Role ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c8643572-92b9-4bf8-993f-9470826d0168",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Permission with name=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"name\": \"{{testCode}}_ROLE\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"permission\": [\r\n        {\r\n            \"permission\": \"cc-module-read\",\r\n            \"name\": \"NOT_EXIST\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/role/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"role",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Role  SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e3b458e6-9149-4fd1-b655-6f1ef94c93ff",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/role/{{testCode}}_ROLE",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"role",
										"{{testCode}}_ROLE"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Role ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5b49dad2-0653-4a98-a4dd-0dae344aebac",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Role with name=\"+pm.collectionVariables.get(\"testCode\")+\"_ROLE does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/role/{{testCode}}_ROLE",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"role",
										"{{testCode}}_ROLE"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Tax",
					"item": [
						{
							"name": "CreateOrUpdate Tax SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3c779a09-692c-424b-bed4-5546dd3c4d13",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_TAX\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"percent\": \"20\",\r\n    \"accountingCode\": null,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"TVA 20%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 20%\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/tax/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"tax",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Tax SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8b8f6f15-99d1-43bb-a715-fac643c64701",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal\" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.tax.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_TAX\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.tax.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/tax?taxCode={{testCode}}_TAX",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"tax"
									],
									"query": [
										{
											"key": "taxCode",
											"value": "{{testCode}}_TAX"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Tax ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "844c59f2-e681-4281-ba01-1d5d42860bbc",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Tax with code=\" + pm.collectionVariables.get(\"testCode\") + \"_TAX already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_TAX\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"percent\": \"20\",\r\n    \"accountingCode\": null,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"TVA 20%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 20%\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/tax",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"tax"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Tax  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7c2acfdd-426e-4e12-8cfb-dc3ff6717a1b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Tax with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"percent\": \"20\",\r\n    \"accountingCode\": null,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"TVA 20%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 20%\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/tax",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"tax"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Tax SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4b386cde-e963-42f9-815a-e7571cea524a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_TAX\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"percent\": \"30\",\r\n    \"accountingCode\": null,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"TVA 30%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 30%\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/tax",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"tax"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Tax SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "496563e3-ff47-4381-8fdd-442c94827680",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_TAX\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"percent\": \"30\",\r\n    \"accountingCode\": null,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"TVA 30%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 30%\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/tax/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"tax",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Tax   SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "518ab2a9-2cc3-4293-95ed-2f947fe71c7e",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal\" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.tax.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_TAX\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.tax.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/tax?taxCode={{testCode}}_TAX",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"tax"
									],
									"query": [
										{
											"key": "taxCode",
											"value": "{{testCode}}_TAX"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Tax INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "eb211e81-32e4-4892-afb0-00666c68af91",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.math.BigDecimal` from String\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"percent\": \"INVALID\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/tax/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"tax",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Tax INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "95043ded-8c0a-4500-8197-633aa3ced2ae",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Language INVALID is not supported by the provider.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"percent\": \"20\",\r\n    \"accountingCode\": null,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"INVALID\",\r\n            \"description\": \"TVA 20%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 20%\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/tax/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"tax",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Tax MISSING_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d902db58-df58-4ffd-bbdc-ab2e5d395980",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: percent.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_TAX\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/tax/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"tax",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Tax ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4a8e9e7f-dcdb-453b-8cef-792ed95777d5",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"AccountingCode with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_TAX\",\r\n    \"description\": \"TVA 20%\",\r\n    \"percent\": \"20\",\r\n    \"accountingCode\": \"NOT_EXIST\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"TVA 20%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 20%\"\r\n        }\r\n    ]\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/tax/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"tax",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Tax SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d0727fff-c30c-491c-9d9c-3e3045b97434",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/tax/{{testCode}}_TAX",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"tax",
										"{{testCode}}_TAX"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Tax  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cbe29dc0-1759-4bf9-b60c-c0b185accde6",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Tax with code=\"+pm.collectionVariables.get(\"testCode\")+\"_TAX does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/tax/{{testCode}}_TAX",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"tax",
										"{{testCode}}_TAX"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Invoice Type",
					"item": [
						{
							"name": "CreateOrUpdate Invoice Type SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "708dc8d2-1ae5-4d62-bc6c-5c3ed308b6b8",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_IT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceType",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Invoice Type SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3ff21fd6-ea5a-4c7a-add4-ad8ab75d06b4",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal\" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.invoiceTypeDto.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_IT\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.invoiceTypeDto.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceType?invoiceTypeCode={{testCode}}_IT",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceType"
									],
									"query": [
										{
											"key": "invoiceTypeCode",
											"value": "{{testCode}}_IT"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Invoice Type ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0b14e147-92e2-4067-b210-32269031689b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"InvoiceType with code=\" + pm.collectionVariables.get(\"testCode\") + \"_IT already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_IT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceType",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceType"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Invoice Type ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "486334e0-2a67-4c63-80c7-e79d95007747",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"InvoiceType with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceType",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceType"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Invoice Type SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "282eb410-1405-4b77-9658-d530a8c62979",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_IT\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceType",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceType"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Invoice Type SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "0e6c892a-f2d7-4aa4-8060-7ecd67054dac",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_IT\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceType",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Invoice Type SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2f85ae32-e705-4515-a2d6-7fd3fbeb7480",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal\" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.invoiceTypeDto.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_IT\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.invoiceTypeDto.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceType?invoiceTypeCode={{testCode}}_IT",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceType"
									],
									"query": [
										{
											"key": "invoiceTypeCode",
											"value": "{{testCode}}_IT"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Invoice Type INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "05d47598-8605-40e5-af5d-cf1cc90559e9",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `boolean` from String\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_IT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": \"INVALID\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceType",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Invoice Type MISSING_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e17ecdd2-42a7-4cb5-b69c-e40e80b4af5d",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"description\": \"{{testDescription}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceType",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Invoice Type ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "67ee06bc-6e2e-4d73-9de9-2e736b889230",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"EmailTemplate with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false,\r\n    \"mailingType\": \"manual\",\r\n    \"emailTemplateCode\": \"NOT_EXIST\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceType",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Invoice Type ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d7fbb18-4ca0-4c07-b267-3da78fc4cdb4",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"InvoiceSequence with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"XX\",\r\n        \"invoiceSequenceCode\": \"NOT_EXIST\"\r\n    },\r\n    \"matchingAuto\": false,\r\n    \"mailingType\": \"XX\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceType",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Invoice Type ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5d478b38-ea5e-4955-bfb6-eacd2328d113",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"OCCTemplate with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"NOT_EXIST\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false,\r\n    \"mailingType\": \"manual\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceType",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Invoice Type ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "61908386-6ad5-448c-a96e-6ece826b55aa",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"OCCTemplate with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"NOT_EXIST\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"XX\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false,\r\n    \"mailingType\": \"XX\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceType",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Invoice Type SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "db33ed3a-02e1-4565-b860-6033e2f7f918",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceType/{{testCode}}_IT",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceType",
										"{{testCode}}_IT"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Invoice Type ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ebe348e8-f688-44f8-8a3e-0298a24db509",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"InvoiceType with code=\"+pm.collectionVariables.get(\"testCode\")+\"_IT does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceType/{{testCode}}_IT",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceType",
										"{{testCode}}_IT"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Payments",
			"item": [
				{
					"name": "Credit Category",
					"item": [
						{
							"name": "CreateOrUpdate Credit Category SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "7d4e166c-3bc4-4962-b068-58e7faf81f1a",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_CrCat\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/creditCategory/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"creditCategory",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Credit Category  SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aace98f0-af3a-4a2a-b9e2-7f3814094811",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.creditCategory.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_CrCat\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.creditCategory.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/creditCategory?creditCategoryCode={{testCode}}_CrCat",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"creditCategory"
									],
									"query": [
										{
											"key": "creditCategoryCode",
											"value": "{{testCode}}_CrCat"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Credit Category ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "240584c3-23f7-4020-9c85-ce51659fe51f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"CreditCategory with code=\" + pm.collectionVariables.get(\"testCode\") + \"_CrCat already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_CrCat\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/creditCategory",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"creditCategory"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Credit Category ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b2c54e59-df4f-4d2f-8e96-5b808f85c58f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"CreditCategory with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/creditCategory",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"creditCategory"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Credit Category SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e7e9888-c945-44ba-b531-3fe4cafd6ced",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_CrCat\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/creditCategory",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"creditCategory"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Credit Category SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ee9f2a1f-8389-4c3d-ae5f-0974be37abc1",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_CrCat\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/creditCategory/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"creditCategory",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Credit Category SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d70ee256-bc23-42b7-af70-eb1a94bcd3f7",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.creditCategory.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_CrCat\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.creditCategory.description).to.eql(pm.collectionVariables.get(\"testDescription\") + \" updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/creditCategory?creditCategoryCode={{testCode}}_CrCat",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"creditCategory"
									],
									"query": [
										{
											"key": "creditCategoryCode",
											"value": "{{testCode}}_CrCat"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Credit Category MISSING_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e38eef4e-6117-4c80-a4eb-6ac60839e268",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"description\": \"{{testDescription}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/creditCategory/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"creditCategory",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Credit Category SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b46e8824-ca86-4d3a-b28f-9ec9e47a41b6",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/creditCategory/{{testCode}}_CrCat",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"creditCategory",
										"{{testCode}}_CrCat"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Credit Category ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aabd8d51-afb9-416f-aee8-1c9717b4239c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"CreditCategory with code=\" + pm.collectionVariables.get(\"testCode\") + \"_CrCat does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/creditCategory/{{testCode}}_CrCat",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"creditCategory",
										"{{testCode}}_CrCat"
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "4aef8c95-6f55-4b3b-9657-6e6bff516377",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2cef5dbe-36e4-4209-84b5-522d692bfcde",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Payment Gateway",
					"item": [
						{
							"name": "CreateOrUpdate Payment Gateway SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "704caf6c-501e-4f82-9dc5-33169da72e8f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_PG\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"sellerCode\": \"CLASSIC\",\r\n    \"scriptInstanceCode\": \"org.meveo.service.script.demo.CustomGatewayPaymentScript\",\r\n    \"type\": \"CUSTOM\",\r\n    \"paymentMethodType\": \"CHECK\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/paymentGateway/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"paymentGateway",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Payment Gateway  SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "27bf858b-8372-4932-b684-25c3a784695b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.paymentGateway[0].code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_PG\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.paymentGateway[0].description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/paymentGateway?code={{testCode}}_PG",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"paymentGateway"
									],
									"query": [
										{
											"key": "code",
											"value": "{{testCode}}_PG"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Payment Gateway ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fe7daa31-6ce4-46bb-91ed-2a3b3d500220",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"PaymentGateway with code=\" + pm.collectionVariables.get(\"testCode\") + \"_PG already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_PG\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"sellerCode\": \"CLASSIC\",\r\n    \"scriptInstanceCode\": \"org.meveo.service.script.demo.CustomGatewayPaymentScript\",\r\n    \"type\": \"CUSTOM\",\r\n    \"paymentMethodType\": \"CHECK\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/paymentGateway",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"paymentGateway"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Payment Gateway ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "edc35500-dec5-465a-a097-5e41f43a50ae",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"PaymentGateway with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"type\": \"CUSTOM\",\r\n    \"paymentMethodType\": \"CHECK\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/paymentGateway",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"paymentGateway"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Payment Gateway SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "912e8fea-5c74-418e-a9f8-a909e6dcb64f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_PG\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"sellerCode\": \"CLASSIC\",\r\n    \"scriptInstanceCode\": \"org.meveo.service.script.demo.CustomGatewayPaymentScript\",\r\n    \"type\": \"CUSTOM\",\r\n    \"paymentMethodType\": \"CHECK\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/paymentGateway",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"paymentGateway"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Payment Gateway SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "496d490d-ed8c-435c-95ef-c4381312c822",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.message).to.eql();",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_PG\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/paymentGateway/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"paymentGateway",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Payment Gateway SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "cdd232bf-f50e-446d-a9af-619fbc4696ac",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.paymentGateway[0].code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_PG\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.paymentGateway[0].description).to.eql(pm.collectionVariables.get(\"testDescription\") + \" updated\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/paymentGateway?code={{testCode}}_PG",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"paymentGateway"
									],
									"query": [
										{
											"key": "code",
											"value": "{{testCode}}_PG"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Payment Gateway MISSING_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "22277c81-5129-4259-84a0-30d6be4b0db3",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code, type, paymentMethodType, sellerCode.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"description\": \"{{testDescription}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/paymentGateway/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"paymentGateway",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Payment Gateway INVALID_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d5229948-f925-48c9-91bb-876fc1fd3880",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `org.meveo.model.payments.PaymentGatewayTypeEnum` from String\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_PG\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"type\": \"INVALID\",\r\n    \"paymentMethodType\": \"CHECK\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/paymentGateway/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"paymentGateway",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Payment Gateway SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "547ccd4e-5fca-42f2-aecd-35f2791a1d15",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/paymentGateway?code={{testCode}}_PG",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"paymentGateway"
									],
									"query": [
										{
											"key": "code",
											"value": "{{testCode}}_PG"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Payment Gateway ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b22117de-1d00-4303-8140-93368431bbb5",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"PaymentGateway with code=\" + pm.collectionVariables.get(\"testCode\") + \"_PG does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/paymentGateway?code={{testCode}}_PG",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"paymentGateway"
									],
									"query": [
										{
											"key": "code",
											"value": "{{testCode}}_PG"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7b8e2fab-c429-4da5-9ba4-f41180c174ce",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "853b0fb9-e8b9-4f54-8aa1-e3dff6c076c3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Payment Schedule Template",
					"item": [
						{
							"name": "CreateOrUpdate Payment Schedule Template SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "40f04320-a072-4881-933a-c7aad1136413",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"\");",
											"    pm.globals.set(\"id_PST\", jsonData.message);",
											"});",
											"",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_PST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"paymentScheduleTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Payment Schedule Template SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "60520b18-5668-45c3-84b6-fcc955282176",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.paymentScheduleTemplateDto.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_PST\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.paymentScheduleTemplateDto.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
											"});",
											"pm.test(request.name + \" - Id is equal \"+pm.globals.get(\"id_PST\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.paymentScheduleTemplateDto.id+\"\").to.eql(pm.globals.get(\"id_PST\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_PST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/paymentScheduleTemplate?paymentScheduleTemplateCode={{testCode}}_PST",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"paymentScheduleTemplate"
									],
									"query": [
										{
											"key": "paymentScheduleTemplateCode",
											"value": "{{testCode}}_PST"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Payment Schedule Template ENTITY_ALREADY_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "2142d030-5c5a-4f09-98b5-1db5d6bf7597",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(403);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"PaymentScheduleTemplate with code=\" + pm.collectionVariables.get(\"testCode\") + \"_PST already exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_PST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/paymentScheduleTemplate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"paymentScheduleTemplate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Payment Schedule Template ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "1e4f9557-8a23-462c-851c-6a9e1720fd29",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"PaymentScheduleTemplate with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}\r\n",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/paymentScheduleTemplate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"paymentScheduleTemplate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Payment Schedule Template SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "15c06c58-aa27-4235-a59b-09c3e9766c37",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_PST\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/paymentScheduleTemplate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"paymentScheduleTemplate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Payment Schedule Template SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "19f9427a-c18a-4346-9807-4653ebf61490",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_PST\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"paymentScheduleTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Read Payment Schedule Template SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c9d914c2-8955-481e-8988-94aeb57acd2c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.paymentScheduleTemplateDto.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_PST\");",
											"});",
											"",
											"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.paymentScheduleTemplateDto.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
											"});",
											"pm.test(request.name + \" - Id is equal \"+pm.globals.get(\"id_PST\"), function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.paymentScheduleTemplateDto.id+\"\").to.eql(pm.globals.get(\"id_PST\"));",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/paymentScheduleTemplate?paymentScheduleTemplateCode={{testCode}}_PST",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"paymentScheduleTemplate"
									],
									"query": [
										{
											"key": "paymentScheduleTemplateCode",
											"value": "{{testCode}}_PST"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Payment Schedule Template MISSING_PARAMETER",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c11d4d9f-b51e-4fe7-a2ff-45ad73261cc8",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code, calendarCode, serviceTemplateCode, paymentDayInMonth, amount, paymentLabel, advancePaymentInvoiceTypeCode, advancePaymentInvoiceSubCategoryCode, doPayment.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"description\": \"{{testDescription}}\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"paymentScheduleTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Payment Schedule Template INVALID_PARAMETER_amount",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d392ab33-b588-4c95-afed-22aa6abd3050",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Integer` from String\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}_PST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"INVALID\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"paymentScheduleTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Payment Schedule Template INVALID_PARAMETER_doPayment",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "ed101ff0-efe7-492e-ac92-0a1d36b75431",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Boolean` from String\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"INVALID\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"paymentScheduleTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Payment Schedule Template INVALID_PARAMETER_generateAdvancePaymentInvoice",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "31af3bc5-f345-4a75-9c97-6ede68951fb5",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.math.BigDecimal` from String\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"INVALID\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"paymentScheduleTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Payment Schedule Template INVALID_PARAMETER_paymentDateInMonth",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e080c9f9-0b21-44d5-b80f-b185a73703ef",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(400);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Integer` from String\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"INVALID\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"paymentScheduleTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Payment Schedule Template ENTITY_DOES_NOT_EXIST_advPaymentInvSubCat",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "78d8a314-41cc-4749-af90-b56fdc4cc60f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"InvoiceSubCategory with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"NOT_EXIST\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"paymentScheduleTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Payment Schedule Template ENTITY_DOES_NOT_EXIST_advPaymentInvType",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "896358d3-48d2-4403-8675-8c2636eec729",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"InvoiceType with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"NOT_EXIST\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"paymentScheduleTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Payment Schedule Template ENTITY_DOES_NOT_EXIST_calendarCode",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "63207dc0-e181-48f6-865f-3f5305353b63",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"Calendar with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"NOT_EXIST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"paymentScheduleTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "CreateOrUpdate Payment Schedule Template ENTITY_DOES_NOT_EXIST_serviceTemplate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "423dc72c-8ab3-4eb6-8c5b-75bae06a23fc",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"ServiceTemplate with code=NOT_EXIST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"NOT_EXIST\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"paymentScheduleTemplate",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Payment Schedule Template SUCCESS",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "230bdaa7-096a-428a-8189-48c5e00f8b80",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/paymentScheduleTemplate?paymentScheduleTemplateCode={{testCode}}_PST",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"paymentScheduleTemplate"
									],
									"query": [
										{
											"key": "paymentScheduleTemplateCode",
											"value": "{{testCode}}_PST"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Payment Schedule Template ENTITY_DOES_NOT_EXISTS_EXCEPTION",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "827c0741-ad29-4654-a6f7-b7f3f16ae42b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(404);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"PaymentScheduleTemplate with code=\" + pm.collectionVariables.get(\"testCode\") + \"_PST does not exists.\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									},
									{
										"key": "Content-Type",
										"name": "Content-Type",
										"type": "text",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/payment/paymentScheduleTemplate?paymentScheduleTemplateCode={{testCode}}_PST",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"payment",
										"paymentScheduleTemplate"
									],
									"query": [
										{
											"key": "paymentScheduleTemplateCode",
											"value": "{{testCode}}_PST"
										}
									]
								}
							},
							"response": []
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cb64a0f4-b19a-4bbf-a205-ccd64fb1e17b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "b837a06c-0c1d-4075-8ac9-4b82f6aede5e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Custom",
			"item": [
				{
					"name": "Entity Customization",
					"item": [],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Custom Table",
					"item": [],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "1bcb0f0a-9e9c-4ea7-9709-3d97180c0b7b",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "918e91b0-2b34-421f-b51b-c5cd07081138",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "54b5baf8-dc87-403e-9576-5a292c10f378",
			"key": "opencell.base",
			"value": "http://localhost:8080/opencell"
		},
		{
			"id": "85846338-d9ab-41bf-bd4d-c838efaf25ba",
			"key": "opencell.url",
			"value": "{{opencell.base}}/api/rest"
		},
		{
			"id": "a442bc15-c05e-4f8a-839c-4c434f68afec",
			"key": "opencell.username",
			"value": "opencell.admin"
		},
		{
			"id": "4b834928-f97c-4291-afcc-53d3847df050",
			"key": "opencell.password",
			"value": "opencell.admin"
		},
		{
			"id": "d03861bf-de8a-4537-bc31-2b4558f55187",
			"key": "opencell.superusername",
			"value": "opencell.superadmin"
		},
		{
			"id": "06c1a9f3-c419-4047-b4d0-58d4c2b92ec7",
			"key": "opencell.superpassword",
			"value": "opencell.superadmin"
		},
		{
			"id": "54384cbf-9233-44b8-a712-2214dfd661ea",
			"key": "testCode",
			"value": "TEST"
		},
		{
			"id": "8360fb5a-75ae-4376-a798-8d5802a0e764",
			"key": "testDescription",
			"value": "This is a test description"
		},
		{
			"id": "478d785e-206f-45f9-93fd-f29a3a8456a1",
			"key": "timezone",
			"value": "CET"
		}
	],
	"protocolProfileBehavior": {}
}
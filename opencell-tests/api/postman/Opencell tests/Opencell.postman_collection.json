{
	"info": {
		"_postman_id": "b44ef209-b162-45d9-b55a-4c87faa219b9",
		"name": "Opencell",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "API",
			"item": [
				{
					"name": "Accounting",
					"item": [
						{
							"name": "Account Code",
							"item": [
								{
									"name": "CreateOrUpdate Accounting Code SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "682241ae-7ed5-45ac-b323-ca7d5e303066",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_AC\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULAR\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Accounting Code SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a5bf0004-c3c5-4e3d-9f08-8980c57b9578",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\") + \"_AC\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.accountingCode.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_AC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.accountingCode.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode?accountingCode={{testCode}}_AC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode"
											],
											"query": [
												{
													"key": "accountingCode",
													"value": "{{testCode}}_AC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Accounting Code ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "690412e9-6dad-47b7-9623-17156d40b6c7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"AccountingCode with code=\"+pm.collectionVariables.get(\"testCode\")+\"_AC already exists.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_AC\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULAR\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Accounting Code ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a3c8750-2522-4acd-8648-590b23659761",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"AccountingCode with code=NOT_EXIST does not exists.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"chartOfAccountTypeEnum\": \"ASSETS\",\r\n    \"chartOfAccountViewTypeEnum\": \"REGULAR\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Accounting Code SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dbc3aeb9-d865-416f-82e8-8fb8ca9c64cd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_AC\",\r\n\t\"description\": \"{{testDescription}} updated\",\r\n\t\"disabled\": false,\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULAR\",\r\n\t\"migrated\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Accounting Code SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e8a0f6a-33eb-471a-972c-9c65bd8bd544",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_AC\",\r\n\t\"description\": \"{{testDescription}} updated\",\r\n\t\"disabled\": false,\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULAR\",\r\n\t\"migrated\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Accounting Code SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60989802-c050-4c47-b721-97ccdf607551",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\")+\"_AC\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.accountingCode.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_AC\");",
													"});",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.accountingCode.description).to.eql(pm.collectionVariables.get(\"testDescription\")+ \" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode?accountingCode={{testCode}}_AC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode"
											],
											"query": [
												{
													"key": "accountingCode",
													"value": "{{testCode}}_AC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Accounting Code MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ecc301f6-614b-409c-9ec8-2c68440d2fe2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Accounting Code INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e1715ed3-1abb-48ac-ae4b-e4c7f7573a2e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `org.meveo.model.billing.ChartOfAccountViewTypeEnum`\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULARXX\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "OCC Template",
							"item": [
								{
									"name": "CreateOrUpdate OCC Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9bd8ad3b-0799-48c8-bf2b-c55757b5730a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_OCCT\",\r\n  \"accountingCode\": \"{{testCode}}_AC\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"occCategory\": \"DEBIT\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create OCC Template ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f05fad86-d00b-4a70-a828-a427fe823119",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"OCCTemplate with code=\"+pm.collectionVariables.get(\"testCode\")+\"_OCCT already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_OCCT\",\r\n  \"accountingCode\": \"{{testCode}}_AC\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"occCategory\": \"DEBIT\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update OCC Template ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a7c9de1-3145-4a8e-a741-892f21ddb7eb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"OCCTemplate with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"NOT_EXIST\",\r\n  \"accountingCode\": \"{{testCode}}_AC\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"occCategory\": \"DEBIT\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update OCC Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "537595f2-56a2-496c-8472-8e1edfdbc90d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_OCCT\",\r\n  \"accountingCode\": \"{{testCode}}_AC\",\r\n  \"description\": \"{{testDescription}} updated\",\r\n  \"occCategory\": \"DEBIT\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate OCC Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0faa5625-518d-489d-a66b-7bd1846d7272",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_OCCT\",\r\n  \"accountingCode\": \"{{testCode}}_AC\",\r\n  \"description\": \"{{testDescription}} updated\",\r\n  \"occCategory\": \"DEBIT\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate OCC Template MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "664cd621-544f-4813-9319-3e7b0c46a528",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: accountCode / accountingCode.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_Missing\",\r\n  \"description\": \"{{testDescription}} missing\",\r\n  \"occCategory\": \"DEBIT\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate OCC Template INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "577291c5-d094-445e-9a6b-4604279f34c6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `org.meveo.model.payments.OperationCategoryEnum` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_INVALID\",\r\n  \"description\": \"{{testDescription}} invalid\",\r\n  \"occCategory\": \"INVALID\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Clear Data",
							"item": [
								{
									"name": "Delete Accounting Code INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9029048f-6621-45f9-8b24-6e6bc8624bc5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"is still referenced from table\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"description\": \"123\",\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULARXX\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode/{{testCode}}_AC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode",
												"{{testCode}}_AC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete OCC Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f2b653c-0e06-4daf-89d9-309edc9c2d13",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}\",\r\n  \"description\": \"{{testDescription}} invalid\",\r\n  \"occCategory\": \"INVALID\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate/{{testCode}}_OCCT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate",
												"{{testCode}}_OCCT"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete OCC Template FAIL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36789d8d-8497-44bc-9623-4d7e2325c16e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"OCCTemplate with code=\"+pm.collectionVariables.get(\"testCode\")+\"_OCCT does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}\",\r\n  \"description\": \"{{testDescription}} invalid\",\r\n  \"occCategory\": \"INVALID\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate/{{testCode}}_OCCT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate",
												"{{testCode}}_OCCT"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Accounting Code SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a017a3f-413e-45fd-a426-137fdb90f533",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"description\": \"123\",\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULARXX\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode/{{testCode}}_AC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode",
												"{{testCode}}_AC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Accounting Code FAIL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ce91f9b9-9e28-4a80-b601-68bf92a8654f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"AccountingCode with code=\"+pm.collectionVariables.get(\"testCode\")+\"_AC does not exists.\");",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"description\": \"123\",\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULARXX\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode/{{testCode}}_AC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode",
												"{{testCode}}_AC"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Accounts",
					"item": [
						{
							"name": "BillingCycle",
							"item": [
								{
									"name": "CreateOrUpdate Billing Cylcle SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0e8dd5f4-65bb-4990-9395-3785547da604",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_BC\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"billingTemplateName\": \"{{testCode}}_BTN\",\r\n  \"invoiceDateDelay\": \"0\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"transactionDateDelay\": \"0\",\r\n  \"invoicingThreshold\": 0.01,\r\n  \"calendar\": \"MONTHLY\",\r\n  \"invoiceTypeCode\": \"ADJ\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Cycle ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c6174113-98be-4806-a071-aab51931d134",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"BillingCycle with code=\"+pm.collectionVariables.get(\"testCode\")+\"_BC already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_BC\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"billingTemplateName\": \"{{testCode}}_BTN\",\r\n  \"invoiceDateDelay\": \"0\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"transactionDateDelay\": \"0\",\r\n  \"invoicingThreshold\": 0.01,\r\n  \"calendar\": \"MONTHLY\",\r\n  \"invoiceTypeCode\": \"ADJ\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Billing Cycle SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5a25c062-2692-4aba-a9fe-ff04aa09b95b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingCycle.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_BC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingCycle.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle?billingCycleCode={{testCode}}_BC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle"
											],
											"query": [
												{
													"key": "billingCycleCode",
													"value": "{{testCode}}_BC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Cycle ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4869d299-17b8-4c4a-8977-453ae63289ea",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"BillingCycle with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"NOT_EXIST\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"billingTemplateName\": \"{{testCode}}_BtN\",\r\n  \"invoiceDateDelay\": \"0\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"transactionDateDelay\": \"0\",\r\n  \"invoicingThreshold\": 0.01,\r\n  \"calendar\": \"MONTHLY\",\r\n  \"invoiceTypeCode\": \"ADJ\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Cycle SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "faf0b210-266c-4341-a3a9-3a00cfac34ca",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_BC\",\r\n  \"description\": \"{{testDescription}} updated\",\r\n  \"billingTemplateName\": \"TEST\",\r\n  \"invoiceDateDelay\": \"0\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"transactionDateDelay\": \"0\",\r\n  \"invoicingThreshold\": 0.01,\r\n  \"calendar\": \"MONTHLY\",\r\n  \"invoiceTypeCode\": \"ADJ\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Billing Cycle SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e901b4a8-9656-4a4c-9261-213f479e8074",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_BC\",\r\n  \"description\": \"{{testDescription}} updated\",\r\n  \"billingTemplateName\": \"TEST\",\r\n  \"invoiceDateDelay\": \"0\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"transactionDateDelay\": \"0\",\r\n  \"invoicingThreshold\": 0.01,\r\n  \"calendar\": \"MONTHLY\",\r\n  \"invoiceTypeCode\": \"ADJ\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read  Billing Cycle SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "863891fb-1359-4d6a-8fef-f220e8893273",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingCycle.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_BC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingCycle.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle?billingCycleCode={{testCode}}_BC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle"
											],
											"query": [
												{
													"key": "billingCycleCode",
													"value": "{{testCode}}_BC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Billing Cycle MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "72a67b29-ee4e-4f5b-b782-798a2758f807",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: invoiceDateDelay.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"MISSING\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"calendar\": \"MONTHLY\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Billing Cycle ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6302d51a-397a-4774-8451-b19fc6084608",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Calendar with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_BC\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"invoiceDateDelay\": \"0\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"calendar\": \"NOT_EXIST\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Seller",
							"item": [
								{
									"name": "CreateOrUpdate Seller SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a45fb7b8-5676-4758-bbf6-b777bf12cdfc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"code\":\"{{testCode}}_SELLER\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"parentSeller\":\"SELLER_FR\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Seller SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c137b497-3cdc-4283-8918-0dbad73a1226",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Seller with code=\"+pm.collectionVariables.get(\"testCode\")+\"_SELLER already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"code\":\"{{testCode}}_SELLER\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"parentSeller\":\"SELLER_FR\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Seller SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2795cbbe-2aff-467a-b331-2a01db422e5b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.seller.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_SELLER\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.seller.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{testCode}}_SELLER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{testCode}}_SELLER"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Seller ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7cbd22ad-0ed7-42b0-9421-7ee0a4e41761",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Seller with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"code\":\"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"parentSeller\":\"SELLER_FR\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Seller SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1683d2aa-ca14-4999-b541-2bf1f30077db",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"code\":\"{{testCode}}_SELLER\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"parentSeller\":\"SELLER_FR\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Seller SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e130311d-e3c4-47f3-8907-0c460d848e79",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"code\":\"{{testCode}}_SELLER\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"parentSeller\":\"SELLER_FR\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Seller SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "77f36fb3-046f-43ef-a121-8afdbd54fa70",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.seller.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_SELLER\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.seller.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{testCode}}_SELLER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{testCode}}_SELLER"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Seller ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8eacb69b-953a-436c-8a98-b14fd3402420",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Seller with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_SELLER\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"parentSeller\": \"NOT_EXIST\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CustomerBrand",
							"item": [
								{
									"name": "CreateOrUpdate CustomerBrand SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b4a2a047-80a7-4c2b-a021-6a74e085938a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CB\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateBrand",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateBrand"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CustomerBrand ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a80c34d2-3a6c-47d9-9545-86247bbd4404",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerBrand with code=\"+pm.collectionVariables.get(\"testCode\")+\"_CB already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CB\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createBrand",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createBrand"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CustomerBrand ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "458f52e9-843a-46aa-bf7d-de10ac7fe1d2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerBrand with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/updateBrand",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"updateBrand"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CustomerBrand SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7f7449f-0fa0-4e22-afca-c2b0c9666bd4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CB\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/updateBrand",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"updateBrand"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CustomerBrand SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e26d9933-3842-4d61-a4eb-8b721ccbfab0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CB\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateBrand",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateBrand"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CustomerBrand MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "efdd5a26-c5ee-40fd-b6f0-3be86c50540f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateBrand",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateBrand"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Customer Category",
							"item": [
								{
									"name": "CreateOrUpdate Customer Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b4efd7ed-6ddc-4fe6-8949-fb795cc6f6fd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read  Customer Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67555857-7b27-4c78-876b-cb0dde305650",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerCategory.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_CC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerCategory.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/category/{{testCode}}_CC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"category",
												"{{testCode}}_CC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Customer Category ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f30e31cd-1fc9-4192-a83d-754821636a2f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerCategory with code=\"+pm.collectionVariables.get(\"testCode\")+\"_CC already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Customer Category ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cdf077bc-1eb9-41b3-b6cc-c7e449c64034",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerCategory with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/updateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"updateCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Customer Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1c299f0-def3-4e76-b101-0a821368cdba",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CC\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/updateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"updateCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "776f189e-4da9-4f0c-a306-e075a64b2f57",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CC\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Customer Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9d8ea045-3795-4034-9386-31664adef223",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerCategory.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_CC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerCategory.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/category/{{testCode}}_CC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"category",
												"{{testCode}}_CC"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer Category MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f09696f-1e85-4810-83cf-1543684202fd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testCode}}\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer Category ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d85fae1-4bff-4167-bcad-19507e8a332f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"AccountingCode with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\",\r\n    \"accountingCode\": \"NOT_EXIST\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer Category INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e01ffc93-6136-4cdb-9b05-2e844aaafe9f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Boolean` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"exoneratedFromTaxes\": \"INVALID\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateCategory"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Customer",
							"item": [
								{
									"name": "CreateOrUpdate Customer SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a135b7bf-6b2f-4c39-a589-38bc0b524d59",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Customer SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1a491bc-2f80-4e2d-959f-09b8ab7ef690",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_C\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{testCode}}_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{testCode}}_C"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Customer ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c39dc3d9-25c7-4001-920f-6e933288de5b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Customer with code=\"+pm.collectionVariables.get(\"testCode\")+\"_C already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Customer ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5608451e-bd96-48b5-ad4d-6341ad94416e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Customer with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Customer SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c441523b-5840-4582-8239-f2c1faed4809",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Customer with no other Fields SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd474625-0f8c-464f-b5c8-0f00436af40e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "629dfa06-ae35-4e0d-b7d4-e83bb3b25048",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Customer SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5dd1e764-4fc5-414d-9989-62386234fe40",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_C\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{testCode}}_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{testCode}}_C"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed72f575-5f68-4916-ab29-ce9f0377e53a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: customerCategory.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C_INVALID\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\t\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer ENTITY_DOES_NOT_EXISTS_EXCEPTION 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e61d8af1-80af-4ccc-83f0-c1c5d4955cc7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Seller with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"NOT_EXIST\",\r\n    \"mandateIdentification\": \"\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer ENTITY_DOES_NOT_EXISTS_EXCEPTION 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c37a8c63-8af8-47ed-b717-2f422591ffb6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerCategory with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"NOT_EXIST\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer ENTITY_DOES_NOT_EXISTS_EXCEPTION 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eed6efdf-ad2e-48c3-b5c1-979be33eb4f8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerBrand with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"NOT_EXIST\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CustomerAccount",
							"item": [
								{
									"name": "CreateOrUpdate CustomerAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3cc3d39a-bfc3-43e1-a91a-8c160e73ec4e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CA\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read CustomerAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "29d0adb9-6706-4675-badb-293ed8a1f210",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerAccount.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_CA\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerAccount.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{testCode}}_CA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{testCode}}_CA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CustomerAccount ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a35a0c7-352f-4747-8eb5-0feacf649af6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerAccount with code=\"+pm.collectionVariables.get(\"testCode\")+\"_CA already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CA\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CustomerAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "058f46b3-a38a-4ea2-92db-7cfc8170fabd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerAccount with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CustomerAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b8ac0c88-0eb9-4df7-8193-d8c9a0703808",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CA\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CustomerAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c33097b-ff11-4e7d-b4b1-76bf9cb8a234",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CA\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read CustomerAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3bf3907b-4e06-40ea-b786-12e1ce292561",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerAccount.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_CA\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerAccount.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{testCode}}_CA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{testCode}}_CA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CustomerAccount MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c17a35a7-9602-446f-812b-7cf2b92574e1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: currency, language.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CA\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CustomerAccount INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d24abd5-3654-4a03-9cbd-0f7ec13f2b3d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.util.Date` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CA\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"mandateDate\": \"INVALID\"\r\n}\r\n\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CustomerAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0046ed35-0d73-4663-a7bf-5b9aad808c89",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Customer with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"customer\": \"NOT_EXIST\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "BillingAccount",
							"item": [
								{
									"name": "CreateOrUpdate BillingAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc3a57f7-1301-4c7f-b811-12c0d3e65dc0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_BA\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read BillingAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "89353be0-c663-4faa-8981-b0f4eb663390",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingAccount.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_BA\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingAccount.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
													"});",
													"",
													"pm.test(request.name + \" - Billing Cycle is correct \", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingAccount.billingCycle).to.eql(pm.collectionVariables.get(\"testCode\")+\"_BC\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{testCode}}_BA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{testCode}}_BA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create BillingAccount ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "74f48dbf-a900-4771-8646-37d85492b334",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"BillingAccount with code=\"+pm.collectionVariables.get(\"testCode\")+\"_BA already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_BA\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update BillingAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3314ca7f-4b82-4d68-8d72-6b4fadcd8f93",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"BillingAccount with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update BillingAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "983887e9-f43e-48e0-aa6e-27ac5760eb1d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_BA\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update BillingAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c8ac520-ad3f-4a9f-a8c8-39e59473fcd8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_BA\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read BillingAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e02917d-4c6e-4364-93da-ccb505558cf3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingAccount.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_BA\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingAccount.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
													"});",
													"",
													"pm.test(request.name + \" - Billing Cycle is correct \", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingAccount.billingCycle).to.eql(pm.collectionVariables.get(\"testCode\")+\"_BC\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{testCode}}_BA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{testCode}}_BA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate BillingAccount MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e281dd68-0603-4b23-a79c-5d1924eef1a4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: country, language.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"MISSING\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate BillingAccount INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0b5b9227-8c4a-4571-a901-08eec1298405",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.util.Date` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_BA\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\",\r\n    \"subscriptionDate\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate BillingAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9cd3a8e-9a90-4f83-bc5d-6935f1e7e37e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerAccount with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_BA\",\r\n    \"customerAccount\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "UserAccount",
							"item": [
								{
									"name": "CreateOrUpdate UserAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ca77492-de23-46a7-80d3-442f7e61fdb1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{testCode}}_UA\",\r\n\t\"description\" : \"{{testDescription}}\",\r\n\t\"billingAccount\": \"{{testCode}}_BA\",\r\n\t\"terminationReason\": \"TR_NONE\",\r\n\t\"terminationDate\": \"2018-09-14\",\r\n\t\"status\": \"ACTIVE\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read UserAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "13be40df-53f8-4dff-9fa6-ab69e856a74a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.userAccount.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_UA\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.userAccount.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{testCode}}_UA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{testCode}}_UA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create UserAccount ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "902c3467-08fa-45a9-a05c-96b49b258706",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"UserAccount with code=\"+pm.collectionVariables.get(\"testCode\")+\"_UA already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{testCode}}_UA\",\r\n\t\"description\" : \"{{testDescription}}\",\r\n\t\"billingAccount\": \"{{testCode}}_BA\",\r\n\t\"terminationReason\": \"TR_NONE\",\r\n\t\"terminationDate\": \"2018-09-14\",\r\n\t\"status\": \"ACTIVE\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update UserAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b05e926-f090-4a53-8044-b382b770b271",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"UserAccount with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"NOT_EXIST\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"billingAccount\": \"{{testCode}}_BA\",\r\n\t\"terminationReason\": \"TR_NONE\",\r\n\t\"terminationDate\": \"2018-09-14\",\r\n\t\"status\": \"ACTIVE\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update UserAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73454ff1-4c4f-4d64-a302-2d5fbf91fa8a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{testCode}}_UA\",\r\n\t\"description\": \"{{testDescription}} updated\",\r\n\t\"billingAccount\": \"{{testCode}}_BA\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate UserAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed40e955-d2a3-45c5-8951-a1819ff1469d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{testCode}}_UA\",\r\n\t\"description\": \"{{testDescription}} updated\",\r\n\t\"billingAccount\": \"{{testCode}}_BA\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read UserAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e70705c2-2f76-4e23-9835-a37420453000",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.userAccount.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_UA\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.userAccount.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{testCode}}_UA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{testCode}}_UA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate UserAccount MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5dd1f7a-9ff1-4173-ba1a-509c468e81fa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: billingAccount.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n\t\"code\": \"MISSING\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate UserAccount INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1f66ff5a-7f10-4195-b2ed-91269f15b006",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `org.meveo.model.billing.AccountStatusEnum` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n\t\"code\": \"{{testCode}}_UA\", \r\n\t\"billingAccount\":\"{{testCode}}_BA\",\r\n\t\"terminationReason\":\"TR\",\r\n\t\"terminationDate\":\"2018-09-14\",\r\n\t\"status\" : \"INVALID\" \r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate UserAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "25ab0f47-e7c8-4164-8a38-b201f2b0bb0e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"BillingAccount with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n\t\"code\": \"{{testCode}}_UA\", \r\n\t\"billingAccount\":\"NOT_EXIST\",\r\n\t\"terminationReason\":\"TR\",\r\n\t\"terminationDate\":\"2018-09-14\",\r\n\t\"status\" : \"ACTIVE\" \r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Provider Contact",
							"item": [
								{
									"name": "CreateOrUpdate Provider Contact SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "343136b1-e4e5-4755-8f03-64938d6e9e26",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Provider Contact SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "104500cd-e4de-4ec8-8344-e7f22c792688",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.providerContact.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_PC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.providerContact.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact?providerContactCode={{testCode}}_PC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact"
											],
											"query": [
												{
													"key": "providerContactCode",
													"value": "{{testCode}}_PC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Provider Contact ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "01956aa8-d617-4d38-ab71-86b1b40c3f64",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ProviderContact with code=\"+pm.collectionVariables.get(\"testCode\")+\"_PC already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Provider Contact ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "71a9481d-3ba1-4252-b499-c3a2344a2ab1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ProviderContact with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Provider Contact SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50124c68-6936-4dc8-93a7-a6a8ab436952",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Provider Contact SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7446880f-b790-4e92-b541-ea9dc6d40256",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Provider Contact SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "482bdc80-aafe-471d-a767-dce4270fff4b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.providerContact.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_PC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.providerContact.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact?providerContactCode={{testCode}}_PC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact"
											],
											"query": [
												{
													"key": "providerContactCode",
													"value": "{{testCode}}_PC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Provider Contact MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e1f4cb0-5a73-4f3c-ab62-6f541548a9c6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: description.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Provider Contact INTERNAL_SERVER_ERROR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "06a6a47d-d6b5-472a-9f33-c3756323a411",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"At least 1 of the field in Contact Information tab is required [email, genericEmail, phone, mobile].\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Provider Contact INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ebd6ab3-9ccb-4aef-a05d-6f500d26346d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot construct instance of `org.meveo.api.dto.account.AddressDto`\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Provider Contact SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "671b9bc1-6a74-416c-8a3a-23e0a6ea9baf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact/{{testCode}}_PC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact",
												"{{testCode}}_PC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Provider Contact ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8c791ee3-53b9-4a88-aa66-99f4380c0b7e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ProviderContact with code=\"+pm.collectionVariables.get(\"testCode\")+\"_PC does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact/{{testCode}}_PC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact",
												"{{testCode}}_PC"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Account Hierarchy",
							"item": [
								{
									"name": "CreateOrUpdate Account Hierarchy SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bda1ccae-74ec-4973-b5f5-232f456b10b2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"email\": \"test@test.com\",\r\n\t\"customerCode\": \"{{testCode}}_CH\",\r\n\t\"sellerCode\": \"{{testCode}}_SELLER\",\r\n\t\"customerBrandCode\": \"{{testCode}}_CB\",\r\n\t\"customerCategoryCode\": \"{{testCode}}_CC\",\r\n\t\"currencyCode\": \"USD\",\r\n\t\"countryCode\": \"US\",\r\n\t\"languageCode\": \"ENG\",\r\n\t\"billingCycleCode\": \"{{testCode}}_BC\",\r\n\t\"titleCode\": \"MR\",\r\n\t\"firstName\": \"created\",\r\n\t\"lastName\": \"TEST\",\r\n\t\"phoneNumber\": \"+102354749\",\r\n\t\"address1\": \"Address1\",\r\n\t\"address2\": \"Address2\",\r\n\t\"zipCode\": \"4050\",\r\n\t\"city\": \"Los Banos\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Account Hierarchy SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e48673a3-0c2a-49cb-a296-2c866fb45636",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_CH\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.name.firstName).to.eql(\"created\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{testCode}}_CH",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{testCode}}_CH"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Account Hierarchy ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86b8c404-4862-4234-8898-ecf9fe4b7135",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Customer with code=\"+pm.collectionVariables.get(\"testCode\")+\"_CH already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"email\": \"test@test.com\",\r\n\t\"customerCode\": \"{{testCode}}_CH\",\r\n\t\"sellerCode\": \"{{testCode}}_SELLER\",\r\n\t\"customerBrandCode\": \"{{testCode}}_CB\",\r\n\t\"customerCategoryCode\": \"{{testCode}}_CC\",\r\n\t\"currencyCode\": \"USD\",\r\n\t\"countryCode\": \"US\",\r\n\t\"languageCode\": \"ENG\",\r\n\t\"billingCycleCode\": \"{{testCode}}_BC\",\r\n\t\"titleCode\": \"MR\",\r\n\t\"firstName\": \"created\",\r\n\t\"lastName\": \"TEST\",\r\n\t\"phoneNumber\": \"+102354749\",\r\n\t\"address1\": \"Address1\",\r\n\t\"address2\": \"Address2\",\r\n\t\"zipCode\": \"4050\",\r\n\t\"city\": \"Los Banos\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Account Hierarchy ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c670f918-2250-4745-967b-500f01602dce",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Customer with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"customerCode\": \"NOT_EXIST\",\r\n    \"sellerCode\": \"{{testCode}}_SELLER\",\r\n    \"customerBrandCode\": \"{{testCode}}_CB\",\r\n    \"customerCategoryCode\": \"{{testCode}}_CC\",\r\n    \"currencyCode\": \"USD\",\r\n    \"countryCode\": \"US\",\r\n    \"languageCode\": \"ENG\",\r\n    \"billingCycleCode\": \"{{testCode}}_BC\",\r\n    \"titleCode\": \"MR\",\r\n    \"firstName\": \"updated\",\r\n    \"lastName\": \"TEST\",\r\n    \"phoneNumber\": \"+102354749\",\r\n    \"address1\": \"Address1\",\r\n    \"address2\": \"Address2\",\r\n    \"zipCode\": \"4050\",\r\n    \"city\": \"Los Banos\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Account Hierarchy SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f3cb644a-5899-4093-8475-e02c47b2bcd2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"customerCode\": \"{{testCode}}_CH\",\r\n    \"sellerCode\": \"{{testCode}}_SELLER\",\r\n    \"customerBrandCode\": \"{{testCode}}_CB\",\r\n    \"customerCategoryCode\": \"{{testCode}}_CC\",\r\n    \"currencyCode\": \"USD\",\r\n    \"countryCode\": \"US\",\r\n    \"languageCode\": \"ENG\",\r\n    \"billingCycleCode\": \"{{testCode}}_BC\",\r\n    \"titleCode\": \"MR\",\r\n    \"firstName\": \"updated\",\r\n    \"lastName\": \"TEST\",\r\n    \"phoneNumber\": \"+102354749\",\r\n    \"address1\": \"Address1\",\r\n    \"address2\": \"Address2\",\r\n    \"zipCode\": \"4050\",\r\n    \"city\": \"Los Banos\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Account Hierarchy SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed3e319e-7d90-4a31-8e4a-03ba01e6bc69",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"customerCode\": \"{{testCode}}_CH\",\r\n    \"sellerCode\": \"SELLER_US\",\r\n    \"customerBrandCode\": \"{{testCode}}_CB\",\r\n    \"customerCategoryCode\": \"{{testCode}}_CC\",\r\n    \"currencyCode\": \"USD\",\r\n    \"countryCode\": \"US\",\r\n    \"languageCode\": \"ENG\",\r\n    \"billingCycleCode\": \"{{testCode}}_BC\",\r\n    \"titleCode\": \"MR\",\r\n    \"firstName\": \"updated\",\r\n    \"lastName\": \"TEST\",\r\n    \"phoneNumber\": \"+102354749\",\r\n    \"address1\": \"Address1\",\r\n    \"address2\": \"Address2\",\r\n    \"zipCode\": \"4050\",\r\n    \"city\": \"Los Banos\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Account Hierarchy SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "71384c01-8044-4fde-bbc5-7ebf4356d861",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_CH\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.name.firstName).to.eql(\"updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{testCode}}_CH",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{testCode}}_CH"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Account Hierarchy MISSING_PARAMETER 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cdf956f0-71ff-4fab-abbd-d6997621fec6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: customerCode, customerCategoryCode, sellerCode, currencyCode, countryCode, billingCycleCode, languageCode, email.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Account Hierarchy MISSING_PARAMETER 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6af20ebe-bb4f-442c-bab3-9fcdbbca6031",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: customerCategoryCode, sellerCode, currencyCode, countryCode, billingCycleCode, languageCode, email.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"customerCode\": \"{{testCode}}_CH\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Account Hierarchy ENTITY_DOES_NOT_EXISTS_EXCEPTION 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e32c9b15-ddb1-4154-bf6d-3f29cab744a5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Currency with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"customerCode\": \"{{testCode}}_CH\",\r\n    \"sellerCode\": \"{{testCode}}_SELLER\",\r\n    \"customerBrandCode\": \"{{testCode}}_CB\",\r\n    \"customerCategoryCode\": \"{{testCode}}_CC\",\r\n    \"currencyCode\": \"NOT_EXIST\",\r\n    \"countryCode\": \"US\",\r\n    \"languageCode\": \"ENG\",\r\n    \"billingCycleCode\": \"{{testCode}}_BC\",\r\n    \"titleCode\": \"MR\",\r\n    \"firstName\": \"created\",\r\n    \"lastName\": \"TEST\",\r\n    \"phoneNumber\": \"+102354749\",\r\n    \"address1\": \"Address1\",\r\n    \"address2\": \"Address2\",\r\n    \"zipCode\": \"4050\",\r\n    \"city\": \"Los Banos\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Account Hierarchy ENTITY_DOES_NOT_EXISTS_EXCEPTION 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "66af6f13-9db0-4ba6-8815-4aca833b8c01",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Seller with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"customerCode\": \"{{testCode}}_CH\",\r\n    \"sellerCode\": \"NOT_EXIST\",\r\n    \"customerBrandCode\": \"{{testCode}}_CB\",\r\n    \"customerCategoryCode\": \"{{testCode}}_CC\",\r\n    \"currencyCode\": \"USD\",\r\n    \"countryCode\": \"US\",\r\n    \"languageCode\": \"ENG\",\r\n    \"billingCycleCode\": \"{{testCode}}_BC\",\r\n    \"titleCode\": \"MR\",\r\n    \"firstName\": \"created\",\r\n    \"lastName\": \"TEST\",\r\n    \"phoneNumber\": \"+102354749\",\r\n    \"address1\": \"Address1\",\r\n    \"address2\": \"Address2\",\r\n    \"zipCode\": \"4050\",\r\n    \"city\": \"Los Banos\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Account Hierarchy INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "482bffc0-4e2a-4a6e-ae09-3dd6f1b690bd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.util.Date` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"customerCode\": \"{{testCode}}_CH\",\r\n    \"sellerCode\": \"{{testCode}}_SELLER\",\r\n    \"customerBrandCode\": \"{{testCode}}_BC\",\r\n    \"customerCategoryCode\": \"{{testCode}}_CC\",\r\n    \"currencyCode\": \"USD\",\r\n    \"countryCode\": \"US\",\r\n    \"languageCode\": \"ENG\",\r\n    \"billingCycleCode\": \"{{testCode}}_BC\",\r\n    \"titleCode\": \"MR\",\r\n    \"firstName\": \"created\",\r\n    \"lastName\": \"TEST\",\r\n    \"phoneNumber\": \"+102354749\",\r\n    \"address1\": \"Address1\",\r\n    \"address2\": \"Address2\",\r\n    \"zipCode\": \"4050\",\r\n    \"city\": \"Los Banos\",\r\n    \"birthDate\": \"INVALID\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Account Hierarchy SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9035739-3d76-4d32-a474-74485a0fae96",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/{{testCode}}_CH",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"{{testCode}}_CH"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Provider Contact ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c42196f-988d-4a7a-9e5f-c28caa919b12",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Customer with code=\"+pm.collectionVariables.get(\"testCode\")+\"_CH does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/{{testCode}}_CH",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"{{testCode}}_CH"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Clear Data",
							"item": [
								{
									"name": "Delete UserAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "495617b9-b7b7-4834-8f74-b54dc2f7d43c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/{{testCode}}_UA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"{{testCode}}_UA"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete UserAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd781788-fd81-4d57-b305-8c0ad257bbbe",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"UserAccount with code=\"+pm.collectionVariables.get(\"testCode\")+\"_UA does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/{{testCode}}_UA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"{{testCode}}_UA"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CustomerBrand  DELETE_REFERENCED_ENTITY_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f30d6b8c-6f68-4dff-85cb-817d247f25ab",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"DELETE_REFERENCED_ENTITY_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerBrand with code=\"+pm.collectionVariables.get(\"testCode\")+\"_CB is referenced.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/removeBrand/{{testCode}}_CB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"removeBrand",
												"{{testCode}}_CB"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete BillingAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a0079ac2-0a32-4b82-a063-d3a9fd6f58b1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/{{testCode}}_BA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"{{testCode}}_BA"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete BillingAccount  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d74ca4f-d8d4-498e-a0f3-b778a59bfe4a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"BillingAccount with code=\"+pm.collectionVariables.get(\"testCode\")+\"_BA does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/{{testCode}}_BA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"{{testCode}}_BA"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CustomerAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee7d3c18-a19f-4833-9063-1369f951553d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/{{testCode}}_CA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"{{testCode}}_CA"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CustomerAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "93924989-7de9-4565-933f-b3e5ab4ee39a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerAccount with code=\"+pm.collectionVariables.get(\"testCode\")+\"_CA does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"CLASSIC\",\r\n    \"seller\": \"CLASSIC\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/{{testCode}}_CA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"{{testCode}}_CA"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Customer SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3dcd790-7d48-4f6d-b9af-8663cde512c0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/{{testCode}}_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"{{testCode}}_C"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Customer ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7211bad3-a3f3-4685-9694-d04ba467ed20",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Customer with code=\"+pm.collectionVariables.get(\"testCode\")+\"_C does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"CLASSIC\",\r\n    \"seller\": \"CLASSIC\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/{{testCode}}_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"{{testCode}}_C"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Seller SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "715aa3d1-9617-43f6-88ef-8c238491066d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/{{testCode}}_SELLER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"{{testCode}}_SELLER"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Seller ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c771fc36-165a-4e51-8430-8bd41c4c3117",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Seller with code=\"+pm.collectionVariables.get(\"testCode\")+\"_SELLER does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"CLASSIC\",\r\n    \"seller\": \"CLASSIC\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/{{testCode}}_SELLER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"{{testCode}}_SELLER"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Billing Cycle SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fdb7cc6d-3925-451d-830d-4f0853c00d2b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/{{testCode}}_BC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"{{testCode}}_BC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Billing Cycle ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b226e625-630b-464c-9bef-ccb02bc45e19",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"BillingCycle with code=\"+pm.collectionVariables.get(\"testCode\")+\"_BC does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"CLASSIC\",\r\n    \"seller\": \"CLASSIC\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/{{testCode}}_BC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"{{testCode}}_BC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CustomerBrand  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a77a272c-738f-429c-8b0a-2ecf61533f72",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/removeBrand/{{testCode}}_CB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"removeBrand",
												"{{testCode}}_CB"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CustomerBrand  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "07d7de9a-46f3-4f87-9913-7e50109ed7ef",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerBrand with code=\"+pm.collectionVariables.get(\"testCode\")+\"_CB does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/removeBrand/{{testCode}}_CB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"removeBrand",
												"{{testCode}}_CB"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Administration",
					"item": [
						{
							"name": "Module",
							"item": [
								{
									"name": "CreateOrUpdate Module SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a64008c8-415a-47ad-a3b5-e95d22193034",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{testCode}}_MOD\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"license\": \"COM\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Module SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd43a059-8f11-4bd5-9f4f-7e67d2e9a5d7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.module.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_MOD\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.module.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module?code={{testCode}}_MOD",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module"
											],
											"query": [
												{
													"key": "code",
													"value": "{{testCode}}_MOD"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Module ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42515ed0-1e83-44f4-beac-1b45192e468d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"MeveoModule with code=\"+pm.collectionVariables.get(\"testCode\")+\"_MOD already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{testCode}}_MOD\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"license\": \"COM\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Module ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "064c68e7-89f0-4490-b983-885b51f2adf2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"MeveoModule with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"NOT_EXIST\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"license\": \"COM\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Module SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e4f99c2a-1326-49cc-91fd-afc369b4d66f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_MOD\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"license\": \"COM\",\r\n    \"moduleItems\": [\r\n        {\r\n            \"script\": {\r\n                \"code\": \"org.meveo.service.script.SaveIngenicoCardScript\",\r\n                \"description\": \"Save Ingenico Card\",\r\n                \"script\": \"package org.meveo.service.script;\\\\r\\\\n\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.Client;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.RequestHeader;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.PaymentResponse;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.CardPaymentMethodSpecificOutput;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.PaymentOutput;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.PaymentReferences;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.PaymentStatusOutput;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.token.TokenResponse;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.webhooks.WebhooksEvent;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.InMemorySecretKeyStore;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.SignatureValidationException;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.Webhooks;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.WebhooksHelper;\\\\r\\\\nimport org.apache.commons.collections4.MapUtils;\\\\r\\\\nimport org.json.simple.JSONObject;\\\\r\\\\nimport org.json.simple.parser.JSONParser;\\\\r\\\\nimport org.json.simple.parser.ParseException;\\\\r\\\\nimport org.meveo.admin.exception.BusinessException;\\\\r\\\\nimport org.meveo.commons.utils.StringUtils;\\\\r\\\\nimport org.meveo.model.notification.InboundRequest;\\\\r\\\\nimport org.meveo.model.payments.CardPaymentMethod;\\\\r\\\\nimport org.meveo.model.payments.CreditCardTypeEnum;\\\\r\\\\nimport org.meveo.model.payments.CustomerAccount;\\\\r\\\\nimport org.meveo.model.payments.PaymentGateway;\\\\r\\\\nimport org.meveo.service.payments.impl.CustomerAccountService;\\\\r\\\\nimport org.meveo.service.payments.impl.PaymentGatewayService;\\\\r\\\\nimport org.meveo.service.payments.impl.PaymentMethodService;\\\\r\\\\nimport org.slf4j.Logger;\\\\r\\\\nimport org.slf4j.LoggerFactory;\\\\r\\\\n\\\\r\\\\nimport java.util.ArrayList;\\\\r\\\\nimport java.util.HashMap;\\\\r\\\\nimport java.util.List;\\\\r\\\\nimport java.util.Map;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n *\\\\r\\\\n * @author Mounir Bahije\\\\r\\\\n *\\\\r\\\\n *         Script executed to save card enrolled with Ingenico Hosted Checkout\\\\r\\\\n *\\\\r\\\\n */\\\\r\\\\npublic class SaveIngenicoCardScript extends Script {\\\\r\\\\n\\\\r\\\\n    private final static Logger log = LoggerFactory.getLogger(SaveIngenicoCardScript.class);\\\\r\\\\n\\\\r\\\\n    private PaymentMethodService paymentMethodService = (PaymentMethodService) getServiceInterface(\\\\\\\"PaymentMethodService\\\\\\\");\\\\r\\\\n    private CustomerAccountService customerAccountService = (CustomerAccountService) getServiceInterface(\\\\\\\"CustomerAccountService\\\\\\\");\\\\r\\\\n    private PaymentGatewayService paymentGatewayService = (PaymentGatewayService) getServiceInterface(\\\\\\\"PaymentGatewayService\\\\\\\");\\\\r\\\\n\\\\r\\\\n    @Override\\\\r\\\\n    public void execute(Map<String, Object> methodContext) throws BusinessException {\\\\r\\\\n\\\\r\\\\n        String verification = \\\\\\\"\\\\\\\";\\\\r\\\\n        InboundRequest inReq = (InboundRequest) methodContext.get(\\\\\\\"event\\\\\\\");\\\\r\\\\n\\\\r\\\\n        if (\\\\\\\"GET\\\\\\\".equalsIgnoreCase(inReq.getMethod())) {\\\\r\\\\n\\\\r\\\\n            String body = inReq.getBody();\\\\r\\\\n            Map<String, String> headers = inReq.getHeaders();\\\\r\\\\n            for (String headerKey : headers.keySet()) {\\\\r\\\\n                if (\\\\\\\"X-GCS-Webhooks-Endpoint-Verification\\\\\\\".equalsIgnoreCase(headerKey)) {\\\\r\\\\n                    String headerValue = headers.get(headerKey);\\\\r\\\\n                    verification = headerValue;\\\\r\\\\n                    inReq.setResponseBody(verification);\\\\r\\\\n                }\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n\\\\r\\\\n        if (\\\\\\\"POST\\\\\\\".equalsIgnoreCase(inReq.getMethod())) {\\\\r\\\\n\\\\r\\\\n            final String reqBody = inReq.getBody();\\\\r\\\\n\\\\r\\\\n            List<RequestHeader> requestHeaders = getWebhookRequestHeaders(inReq.getHeaders());\\\\r\\\\n            String webhooksKeyId = this.getHeaderValue(requestHeaders, \\\\\\\"X-GCS-KeyId\\\\\\\");\\\\r\\\\n\\\\r\\\\n            InMemorySecretKeyStore keyStore = InMemorySecretKeyStore.INSTANCE;\\\\r\\\\n            keyStore.storeSecretKey(webhooksKeyId, getWebhookSecretKey(webhooksKeyId));\\\\r\\\\n\\\\r\\\\n            WebhooksHelper helper = Webhooks.createHelper(keyStore);\\\\r\\\\n            WebhooksEvent webhooksEvent = helper.unmarshal(reqBody, requestHeaders);\\\\r\\\\n\\\\r\\\\n            PaymentResponse payment = webhooksEvent.getPayment();\\\\r\\\\n            if (payment == null) {\\\\r\\\\n                throw new BusinessException(String.format(\\\\\\\"PaymentResponse not found on webhooksEvent : [%s]\\\\\\\", webhooksEvent));\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n            PaymentOutput paymentOutput = payment.getPaymentOutput();\\\\r\\\\n            if (paymentOutput == null) {\\\\r\\\\n                throw new BusinessException(String.format(\\\\\\\"PaymentOutput not found on webhooksEvent.payment : [%s]\\\\\\\", payment));\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n            PaymentReferences paymentReferences = paymentOutput.getReferences();\\\\r\\\\n            if (paymentReferences == null) {\\\\r\\\\n                throw new BusinessException(String.format(\\\\\\\"paymentReferences not found on webhooksEvent.payment.paymentOutput : [%s]\\\\\\\", paymentOutput));\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n            String merchantReference = paymentReferences.getMerchantReference();\\\\r\\\\n\\\\r\\\\n            if (merchantReference.lastIndexOf(\\\\\\\"_-_\\\\\\\") >= 0) {\\\\r\\\\n\\\\r\\\\n                String longIdCA = merchantReference.substring(merchantReference.lastIndexOf(\\\\\\\"_-_\\\\\\\") + 3);\\\\r\\\\n                CustomerAccount ca = customerAccountService.findById(Long.valueOf(longIdCA));\\\\r\\\\n\\\\r\\\\n                PaymentGateway paymentGateway = paymentGatewayService.getPaymentGateway(ca, null, null);\\\\r\\\\n\\\\r\\\\n                if (paymentGateway == null) {\\\\r\\\\n                    throw new BusinessException(\\\\\\\"paymentGateway is null\\\\\\\");\\\\r\\\\n                }\\\\r\\\\n\\\\r\\\\n                if (!webhooksKeyId.equals(paymentGateway.getWebhooksKeyId())) {\\\\r\\\\n                    throw new BusinessException(\\\\\\\"paymentGateway is not the good one\\\\\\\");\\\\r\\\\n                }\\\\r\\\\n\\\\r\\\\n                String status = payment.getStatus();\\\\r\\\\n                if (\\\\\\\"PENDING_CAPTURE\\\\\\\".equalsIgnoreCase(status)) {\\\\r\\\\n                    PaymentStatusOutput paymentStatusOutput = payment.getStatusOutput();\\\\r\\\\n                    if (paymentStatusOutput == null) {\\\\r\\\\n                        throw new BusinessException(String.format(\\\\\\\"paymentStatusOutput not found on webhooksEvent.payment : [%s]\\\\\\\", payment));\\\\r\\\\n                    }\\\\r\\\\n                    Boolean isAuthorized = paymentStatusOutput.getIsAuthorized();\\\\r\\\\n\\\\r\\\\n                    if (isAuthorized) {\\\\r\\\\n\\\\r\\\\n                        CardPaymentMethodSpecificOutput cardPaymentMethodSpecificOutput = paymentOutput.getCardPaymentMethodSpecificOutput();\\\\r\\\\n                        if (cardPaymentMethodSpecificOutput == null) {\\\\r\\\\n                            throw new BusinessException(String.format(\\\\\\\"cardPaymentMethodSpecificOutput not found on webhooksEvent.payment.paymentOutput : [%s]\\\\\\\", paymentOutput));\\\\r\\\\n                        }\\\\r\\\\n                        Long paymentProductId = Long.valueOf(cardPaymentMethodSpecificOutput.getPaymentProductId());\\\\r\\\\n\\\\r\\\\n                        JSONParser jsonParser = new JSONParser();\\\\r\\\\n                        JSONObject obj = null;\\\\r\\\\n                        try {\\\\r\\\\n                            obj = (JSONObject) jsonParser.parse(reqBody);\\\\r\\\\n                        } catch (ParseException e) {\\\\r\\\\n                            e.printStackTrace();\\\\r\\\\n                        }\\\\r\\\\n\\\\r\\\\n                        String tokenId = (String) ((JSONObject) ((JSONObject) ((JSONObject) obj.get(\\\\\\\"payment\\\\\\\")).get(\\\\\\\"paymentOutput\\\\\\\")).get(\\\\\\\"cardPaymentMethodSpecificOutput\\\\\\\")).get(\\\\\\\"token\\\\\\\");\\\\r\\\\n                        if (StringUtils.isBlank(tokenId)) {\\\\r\\\\n                            throw new BusinessException(String.format(\\\\\\\"tokenId not found on webhooksEvent.payment.paymentOutput.cardPaymentMethodSpecificOutput : [%s]\\\\\\\", cardPaymentMethodSpecificOutput));\\\\r\\\\n                        }\\\\r\\\\n\\\\r\\\\n                        String merchantId = webhooksEvent.getMerchantId();\\\\r\\\\n\\\\r\\\\n                        try {\\\\r\\\\n\\\\r\\\\n                            CreditCardTypeEnum cardType = fromId(Long.valueOf(paymentProductId).intValue());\\\\r\\\\n\\\\r\\\\n                            Client client = (Client) paymentMethodService.getClient(Long.valueOf(longIdCA));\\\\r\\\\n\\\\r\\\\n                            TokenResponse response = client.merchant(merchantId).tokens().get(tokenId);\\\\r\\\\n\\\\r\\\\n                            String cardNumber = response.getCard().getData().getCardWithoutCvv().getCardNumber();\\\\r\\\\n                            String expiryDate = response.getCard().getData().getCardWithoutCvv().getExpiryDate();\\\\r\\\\n                            String ownerName = response.getCard().getData().getCardWithoutCvv().getCardholderName();\\\\r\\\\n                            CardPaymentMethod paymentMethod = new CardPaymentMethod();\\\\r\\\\n                            paymentMethod.setCardNumber(cardNumber);\\\\r\\\\n                            paymentMethod.setCardType(cardType);\\\\r\\\\n                            paymentMethod.setCustomerAccount(ca);\\\\r\\\\n                            paymentMethod.setPreferred(true);\\\\r\\\\n                            paymentMethod.setMonthExpiration(new Integer(expiryDate.substring(0, 2)));\\\\r\\\\n                            paymentMethod.setYearExpiration(new Integer(expiryDate.substring(2, 4)));\\\\r\\\\n                            paymentMethod.setOwner(ownerName);\\\\r\\\\n                            paymentMethod.setTokenId(tokenId);\\\\r\\\\n                            paymentMethod.setHiddenCardNumber(CardPaymentMethod.hideCardNumber(cardNumber));\\\\r\\\\n                            if (!paymentMethodService.cardTokenExist(paymentMethod)) {\\\\r\\\\n                                paymentMethodService.create(paymentMethod);\\\\r\\\\n                            }\\\\r\\\\n                        } catch (Exception e) {\\\\r\\\\n                            throw new BusinessException(\\\\\\\"Error on SaveIngenicoCardScript : \\\\\\\" + e.getMessage());\\\\r\\\\n                        }\\\\r\\\\n                    }\\\\r\\\\n                }\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private CreditCardTypeEnum fromId(Integer id) {\\\\r\\\\n        for (CreditCardTypeEnum es : CreditCardTypeEnum.values()) {\\\\r\\\\n            if (es.getId().equals(id)) {\\\\r\\\\n                return es;\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n        throw new IllegalArgumentException();\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private List<RequestHeader> getWebhookRequestHeaders(Map<String, String> headers) {\\\\r\\\\n        List<RequestHeader> webhookHeaders = new ArrayList<>();\\\\r\\\\n        if (MapUtils.isNotEmpty(headers)) {\\\\r\\\\n            headers.forEach((key, value) -> webhookHeaders.add(new RequestHeader(key, value)) );\\\\r\\\\n        }\\\\r\\\\n        return webhookHeaders;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private String getHeaderValue(List<RequestHeader> requestHeaders, String headerName) {\\\\r\\\\n        String value = null;\\\\r\\\\n        for (RequestHeader header : requestHeaders) {\\\\r\\\\n            if (headerName.equalsIgnoreCase(header.getName())) {\\\\r\\\\n                if (value == null) {\\\\r\\\\n                    value = header.getValue();\\\\r\\\\n                } else {\\\\r\\\\n                    throw new SignatureValidationException(\\\\\\\"enocuntered multiple occurrences of header '\\\\\\\" + headerName + \\\\\\\"'\\\\\\\");\\\\r\\\\n                }\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n        if (value == null) {\\\\r\\\\n            throw new SignatureValidationException(\\\\\\\"could not find header '\\\\\\\" + headerName + \\\\\\\"'\\\\\\\");\\\\r\\\\n        }\\\\r\\\\n        return value;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private String getWebhookSecretKey(String webhooksKeyId) throws BusinessException {\\\\r\\\\n        try {\\\\r\\\\n            String query = \\\\\\\"select pg.webhooksSecretKey from PaymentGateway pg where pg.webhooksKeyId=:webhooksKeyId\\\\\\\";\\\\r\\\\n            Map<String, Object> queryParams = new HashMap<>();\\\\r\\\\n            queryParams.put(\\\\\\\"webhooksKeyId\\\\\\\", webhooksKeyId);\\\\r\\\\n            Object result = paymentGatewayService.executeSelectQuery(query, queryParams);\\\\r\\\\n            return ((List<String>)result).get(0);\\\\r\\\\n        } catch (Exception e) {\\\\r\\\\n            throw new BusinessException(String.format(\\\\\\\"Error on getWebhookSecretKey for webhooksKeyId = [%s]\\\\\\\", webhooksKeyId));\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n}\",\r\n                \"type\": \"JAVA\"\r\n            }\r\n        },\r\n        {\r\n            \"notification\": {\r\n                \"updatedCode\": null,\r\n                \"code\": \"SaveIngenicoCardInbound\",\r\n                \"classNameFilter\": \"org.meveo.model.notification.InboundRequest\",\r\n                \"eventTypeFilter\": \"INBOUND_REQ\",\r\n                \"elFilter\": \"#{event.pathInfo.endsWith(\\\\\\\"/ingenico/saveCard\\\\\\\")}\",\r\n                \"scriptInstanceCode\": \"org.meveo.service.script.SaveIngenicoCardScript\",\r\n                \"scriptParams\": {\r\n                    \"event\": \"#{event}\"\r\n                },\r\n                \"counterTemplate\": null\r\n            }\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Module SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83553ae7-d83f-442e-87c7-aa2bdea1be4c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_MOD\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"license\": \"COM\",\r\n    \"moduleItems\": [\r\n        {\r\n            \"script\": {\r\n                \"code\": \"org.meveo.service.script.SaveIngenicoCardScript\",\r\n                \"description\": \"Save Ingenico Card\",\r\n                \"script\": \"package org.meveo.service.script;\\\\r\\\\n\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.Client;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.RequestHeader;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.PaymentResponse;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.CardPaymentMethodSpecificOutput;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.PaymentOutput;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.PaymentReferences;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.PaymentStatusOutput;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.token.TokenResponse;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.webhooks.WebhooksEvent;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.InMemorySecretKeyStore;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.SignatureValidationException;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.Webhooks;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.WebhooksHelper;\\\\r\\\\nimport org.apache.commons.collections4.MapUtils;\\\\r\\\\nimport org.json.simple.JSONObject;\\\\r\\\\nimport org.json.simple.parser.JSONParser;\\\\r\\\\nimport org.json.simple.parser.ParseException;\\\\r\\\\nimport org.meveo.admin.exception.BusinessException;\\\\r\\\\nimport org.meveo.commons.utils.StringUtils;\\\\r\\\\nimport org.meveo.model.notification.InboundRequest;\\\\r\\\\nimport org.meveo.model.payments.CardPaymentMethod;\\\\r\\\\nimport org.meveo.model.payments.CreditCardTypeEnum;\\\\r\\\\nimport org.meveo.model.payments.CustomerAccount;\\\\r\\\\nimport org.meveo.model.payments.PaymentGateway;\\\\r\\\\nimport org.meveo.service.payments.impl.CustomerAccountService;\\\\r\\\\nimport org.meveo.service.payments.impl.PaymentGatewayService;\\\\r\\\\nimport org.meveo.service.payments.impl.PaymentMethodService;\\\\r\\\\nimport org.slf4j.Logger;\\\\r\\\\nimport org.slf4j.LoggerFactory;\\\\r\\\\n\\\\r\\\\nimport java.util.ArrayList;\\\\r\\\\nimport java.util.HashMap;\\\\r\\\\nimport java.util.List;\\\\r\\\\nimport java.util.Map;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n *\\\\r\\\\n * @author Mounir Bahije\\\\r\\\\n *\\\\r\\\\n *         Script executed to save card enrolled with Ingenico Hosted Checkout\\\\r\\\\n *\\\\r\\\\n */\\\\r\\\\npublic class SaveIngenicoCardScript extends Script {\\\\r\\\\n\\\\r\\\\n    private final static Logger log = LoggerFactory.getLogger(SaveIngenicoCardScript.class);\\\\r\\\\n\\\\r\\\\n    private PaymentMethodService paymentMethodService = (PaymentMethodService) getServiceInterface(\\\\\\\"PaymentMethodService\\\\\\\");\\\\r\\\\n    private CustomerAccountService customerAccountService = (CustomerAccountService) getServiceInterface(\\\\\\\"CustomerAccountService\\\\\\\");\\\\r\\\\n    private PaymentGatewayService paymentGatewayService = (PaymentGatewayService) getServiceInterface(\\\\\\\"PaymentGatewayService\\\\\\\");\\\\r\\\\n\\\\r\\\\n    @Override\\\\r\\\\n    public void execute(Map<String, Object> methodContext) throws BusinessException {\\\\r\\\\n\\\\r\\\\n        String verification = \\\\\\\"\\\\\\\";\\\\r\\\\n        InboundRequest inReq = (InboundRequest) methodContext.get(\\\\\\\"event\\\\\\\");\\\\r\\\\n\\\\r\\\\n        if (\\\\\\\"GET\\\\\\\".equalsIgnoreCase(inReq.getMethod())) {\\\\r\\\\n\\\\r\\\\n            String body = inReq.getBody();\\\\r\\\\n            Map<String, String> headers = inReq.getHeaders();\\\\r\\\\n            for (String headerKey : headers.keySet()) {\\\\r\\\\n                if (\\\\\\\"X-GCS-Webhooks-Endpoint-Verification\\\\\\\".equalsIgnoreCase(headerKey)) {\\\\r\\\\n                    String headerValue = headers.get(headerKey);\\\\r\\\\n                    verification = headerValue;\\\\r\\\\n                    inReq.setResponseBody(verification);\\\\r\\\\n                }\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n\\\\r\\\\n        if (\\\\\\\"POST\\\\\\\".equalsIgnoreCase(inReq.getMethod())) {\\\\r\\\\n\\\\r\\\\n            final String reqBody = inReq.getBody();\\\\r\\\\n\\\\r\\\\n            List<RequestHeader> requestHeaders = getWebhookRequestHeaders(inReq.getHeaders());\\\\r\\\\n            String webhooksKeyId = this.getHeaderValue(requestHeaders, \\\\\\\"X-GCS-KeyId\\\\\\\");\\\\r\\\\n\\\\r\\\\n            InMemorySecretKeyStore keyStore = InMemorySecretKeyStore.INSTANCE;\\\\r\\\\n            keyStore.storeSecretKey(webhooksKeyId, getWebhookSecretKey(webhooksKeyId));\\\\r\\\\n\\\\r\\\\n            WebhooksHelper helper = Webhooks.createHelper(keyStore);\\\\r\\\\n            WebhooksEvent webhooksEvent = helper.unmarshal(reqBody, requestHeaders);\\\\r\\\\n\\\\r\\\\n            PaymentResponse payment = webhooksEvent.getPayment();\\\\r\\\\n            if (payment == null) {\\\\r\\\\n                throw new BusinessException(String.format(\\\\\\\"PaymentResponse not found on webhooksEvent : [%s]\\\\\\\", webhooksEvent));\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n            PaymentOutput paymentOutput = payment.getPaymentOutput();\\\\r\\\\n            if (paymentOutput == null) {\\\\r\\\\n                throw new BusinessException(String.format(\\\\\\\"PaymentOutput not found on webhooksEvent.payment : [%s]\\\\\\\", payment));\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n            PaymentReferences paymentReferences = paymentOutput.getReferences();\\\\r\\\\n            if (paymentReferences == null) {\\\\r\\\\n                throw new BusinessException(String.format(\\\\\\\"paymentReferences not found on webhooksEvent.payment.paymentOutput : [%s]\\\\\\\", paymentOutput));\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n            String merchantReference = paymentReferences.getMerchantReference();\\\\r\\\\n\\\\r\\\\n            if (merchantReference.lastIndexOf(\\\\\\\"_-_\\\\\\\") >= 0) {\\\\r\\\\n\\\\r\\\\n                String longIdCA = merchantReference.substring(merchantReference.lastIndexOf(\\\\\\\"_-_\\\\\\\") + 3);\\\\r\\\\n                CustomerAccount ca = customerAccountService.findById(Long.valueOf(longIdCA));\\\\r\\\\n\\\\r\\\\n                PaymentGateway paymentGateway = paymentGatewayService.getPaymentGateway(ca, null, null);\\\\r\\\\n\\\\r\\\\n                if (paymentGateway == null) {\\\\r\\\\n                    throw new BusinessException(\\\\\\\"paymentGateway is null\\\\\\\");\\\\r\\\\n                }\\\\r\\\\n\\\\r\\\\n                if (!webhooksKeyId.equals(paymentGateway.getWebhooksKeyId())) {\\\\r\\\\n                    throw new BusinessException(\\\\\\\"paymentGateway is not the good one\\\\\\\");\\\\r\\\\n                }\\\\r\\\\n\\\\r\\\\n                String status = payment.getStatus();\\\\r\\\\n                if (\\\\\\\"PENDING_CAPTURE\\\\\\\".equalsIgnoreCase(status)) {\\\\r\\\\n                    PaymentStatusOutput paymentStatusOutput = payment.getStatusOutput();\\\\r\\\\n                    if (paymentStatusOutput == null) {\\\\r\\\\n                        throw new BusinessException(String.format(\\\\\\\"paymentStatusOutput not found on webhooksEvent.payment : [%s]\\\\\\\", payment));\\\\r\\\\n                    }\\\\r\\\\n                    Boolean isAuthorized = paymentStatusOutput.getIsAuthorized();\\\\r\\\\n\\\\r\\\\n                    if (isAuthorized) {\\\\r\\\\n\\\\r\\\\n                        CardPaymentMethodSpecificOutput cardPaymentMethodSpecificOutput = paymentOutput.getCardPaymentMethodSpecificOutput();\\\\r\\\\n                        if (cardPaymentMethodSpecificOutput == null) {\\\\r\\\\n                            throw new BusinessException(String.format(\\\\\\\"cardPaymentMethodSpecificOutput not found on webhooksEvent.payment.paymentOutput : [%s]\\\\\\\", paymentOutput));\\\\r\\\\n                        }\\\\r\\\\n                        Long paymentProductId = Long.valueOf(cardPaymentMethodSpecificOutput.getPaymentProductId());\\\\r\\\\n\\\\r\\\\n                        JSONParser jsonParser = new JSONParser();\\\\r\\\\n                        JSONObject obj = null;\\\\r\\\\n                        try {\\\\r\\\\n                            obj = (JSONObject) jsonParser.parse(reqBody);\\\\r\\\\n                        } catch (ParseException e) {\\\\r\\\\n                            e.printStackTrace();\\\\r\\\\n                        }\\\\r\\\\n\\\\r\\\\n                        String tokenId = (String) ((JSONObject) ((JSONObject) ((JSONObject) obj.get(\\\\\\\"payment\\\\\\\")).get(\\\\\\\"paymentOutput\\\\\\\")).get(\\\\\\\"cardPaymentMethodSpecificOutput\\\\\\\")).get(\\\\\\\"token\\\\\\\");\\\\r\\\\n                        if (StringUtils.isBlank(tokenId)) {\\\\r\\\\n                            throw new BusinessException(String.format(\\\\\\\"tokenId not found on webhooksEvent.payment.paymentOutput.cardPaymentMethodSpecificOutput : [%s]\\\\\\\", cardPaymentMethodSpecificOutput));\\\\r\\\\n                        }\\\\r\\\\n\\\\r\\\\n                        String merchantId = webhooksEvent.getMerchantId();\\\\r\\\\n\\\\r\\\\n                        try {\\\\r\\\\n\\\\r\\\\n                            CreditCardTypeEnum cardType = fromId(Long.valueOf(paymentProductId).intValue());\\\\r\\\\n\\\\r\\\\n                            Client client = (Client) paymentMethodService.getClient(Long.valueOf(longIdCA));\\\\r\\\\n\\\\r\\\\n                            TokenResponse response = client.merchant(merchantId).tokens().get(tokenId);\\\\r\\\\n\\\\r\\\\n                            String cardNumber = response.getCard().getData().getCardWithoutCvv().getCardNumber();\\\\r\\\\n                            String expiryDate = response.getCard().getData().getCardWithoutCvv().getExpiryDate();\\\\r\\\\n                            String ownerName = response.getCard().getData().getCardWithoutCvv().getCardholderName();\\\\r\\\\n                            CardPaymentMethod paymentMethod = new CardPaymentMethod();\\\\r\\\\n                            paymentMethod.setCardNumber(cardNumber);\\\\r\\\\n                            paymentMethod.setCardType(cardType);\\\\r\\\\n                            paymentMethod.setCustomerAccount(ca);\\\\r\\\\n                            paymentMethod.setPreferred(true);\\\\r\\\\n                            paymentMethod.setMonthExpiration(new Integer(expiryDate.substring(0, 2)));\\\\r\\\\n                            paymentMethod.setYearExpiration(new Integer(expiryDate.substring(2, 4)));\\\\r\\\\n                            paymentMethod.setOwner(ownerName);\\\\r\\\\n                            paymentMethod.setTokenId(tokenId);\\\\r\\\\n                            paymentMethod.setHiddenCardNumber(CardPaymentMethod.hideCardNumber(cardNumber));\\\\r\\\\n                            if (!paymentMethodService.cardTokenExist(paymentMethod)) {\\\\r\\\\n                                paymentMethodService.create(paymentMethod);\\\\r\\\\n                            }\\\\r\\\\n                        } catch (Exception e) {\\\\r\\\\n                            throw new BusinessException(\\\\\\\"Error on SaveIngenicoCardScript : \\\\\\\" + e.getMessage());\\\\r\\\\n                        }\\\\r\\\\n                    }\\\\r\\\\n                }\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private CreditCardTypeEnum fromId(Integer id) {\\\\r\\\\n        for (CreditCardTypeEnum es : CreditCardTypeEnum.values()) {\\\\r\\\\n            if (es.getId().equals(id)) {\\\\r\\\\n                return es;\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n        throw new IllegalArgumentException();\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private List<RequestHeader> getWebhookRequestHeaders(Map<String, String> headers) {\\\\r\\\\n        List<RequestHeader> webhookHeaders = new ArrayList<>();\\\\r\\\\n        if (MapUtils.isNotEmpty(headers)) {\\\\r\\\\n            headers.forEach((key, value) -> webhookHeaders.add(new RequestHeader(key, value)) );\\\\r\\\\n        }\\\\r\\\\n        return webhookHeaders;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private String getHeaderValue(List<RequestHeader> requestHeaders, String headerName) {\\\\r\\\\n        String value = null;\\\\r\\\\n        for (RequestHeader header : requestHeaders) {\\\\r\\\\n            if (headerName.equalsIgnoreCase(header.getName())) {\\\\r\\\\n                if (value == null) {\\\\r\\\\n                    value = header.getValue();\\\\r\\\\n                } else {\\\\r\\\\n                    throw new SignatureValidationException(\\\\\\\"enocuntered multiple occurrences of header '\\\\\\\" + headerName + \\\\\\\"'\\\\\\\");\\\\r\\\\n                }\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n        if (value == null) {\\\\r\\\\n            throw new SignatureValidationException(\\\\\\\"could not find header '\\\\\\\" + headerName + \\\\\\\"'\\\\\\\");\\\\r\\\\n        }\\\\r\\\\n        return value;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private String getWebhookSecretKey(String webhooksKeyId) throws BusinessException {\\\\r\\\\n        try {\\\\r\\\\n            String query = \\\\\\\"select pg.webhooksSecretKey from PaymentGateway pg where pg.webhooksKeyId=:webhooksKeyId\\\\\\\";\\\\r\\\\n            Map<String, Object> queryParams = new HashMap<>();\\\\r\\\\n            queryParams.put(\\\\\\\"webhooksKeyId\\\\\\\", webhooksKeyId);\\\\r\\\\n            Object result = paymentGatewayService.executeSelectQuery(query, queryParams);\\\\r\\\\n            return ((List<String>)result).get(0);\\\\r\\\\n        } catch (Exception e) {\\\\r\\\\n            throw new BusinessException(String.format(\\\\\\\"Error on getWebhookSecretKey for webhooksKeyId = [%s]\\\\\\\", webhooksKeyId));\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n}\",\r\n                \"type\": \"JAVA\"\r\n            }\r\n        },\r\n        {\r\n            \"notification\": {\r\n                \"updatedCode\": null,\r\n                \"code\": \"SaveIngenicoCardInbound\",\r\n                \"classNameFilter\": \"org.meveo.model.notification.InboundRequest\",\r\n                \"eventTypeFilter\": \"INBOUND_REQ\",\r\n                \"elFilter\": \"#{event.pathInfo.endsWith(\\\\\\\"/ingenico/saveCard\\\\\\\")}\",\r\n                \"scriptInstanceCode\": \"org.meveo.service.script.SaveIngenicoCardScript\",\r\n                \"scriptParams\": {\r\n                    \"event\": \"#{event}\"\r\n                },\r\n                \"counterTemplate\": null\r\n            }\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Module SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "43b6d16c-4676-41ae-9bae-d8662164261f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.module.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_MOD\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.module.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module?code={{testCode}}_MOD",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module"
											],
											"query": [
												{
													"key": "code",
													"value": "{{testCode}}_MOD"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Module SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c45bef8-73bf-4aef-9974-9855da15ede6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module/{{testCode}}_MOD",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module",
												"{{testCode}}_MOD"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Module ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95132576-87d5-41c2-a4a1-29ac142712a6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"MeveoModule with code=\"+pm.collectionVariables.get(\"testCode\")+\"_MOD does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module/{{testCode}}_MOD",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module",
												"{{testCode}}_MOD"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Job Instance",
							"item": [
								{
									"name": "CreateOrUpdate Job Instance SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd5fad1e-65b7-4b45-b1ed-c7348b321aa5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_JI\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"jobTemplate\": \"SepaDirectDebitJob\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\",\r\n                \"entityReferenceValue\": {\r\n                    \"classname\": \"org.meveo.model.payments.DDRequestBuilder\",\r\n                    \"code\": \"Sepa_STD\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Job Instance SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "581aa675-ef34-4edb-89d4-ab9d2e2bdcbe",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.jobInstanceDto.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_JI\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.jobInstanceDto.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance?jobInstanceCode={{testCode}}_JI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance"
											],
											"query": [
												{
													"key": "jobInstanceCode",
													"value": "{{testCode}}_JI"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Job Instance ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "34c109f3-91cd-4a7a-a306-83d2f68f317f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"JobInstance with code=\"+pm.collectionVariables.get(\"testCode\")+\"_JI already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_JI\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"jobTemplate\": \"SepaDirectDebitJob\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\",\r\n                \"entityReferenceValue\": {\r\n                    \"classname\": \"org.meveo.model.payments.DDRequestBuilder\",\r\n                    \"code\": \"Sepa_STD\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/create",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Job Instance ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "77b0b40d-3e2b-4d14-8644-544dbef14b32",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"JobInstance with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"jobTemplate\": \"SepaDirectDebitJob\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\",\r\n                \"entityReferenceValue\": {\r\n                    \"classname\": \"org.meveo.model.payments.DDRequestBuilder\",\r\n                    \"code\": \"Sepa_STD\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/update",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Job Instance SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86ec31b9-273e-4428-8099-b435b489c4e8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_JI\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"jobTemplate\": \"SepaDirectDebitJob\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\",\r\n                \"entityReferenceValue\": {\r\n                    \"classname\": \"org.meveo.model.payments.DDRequestBuilder\",\r\n                    \"code\": \"Sepa_STD\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/update",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Job Instance SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7c42ab1-4c6b-4728-b497-44be96fd5794",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_JI\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"jobTemplate\": \"SepaDirectDebitJob\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\",\r\n                \"entityReferenceValue\": {\r\n                    \"classname\": \"org.meveo.model.payments.DDRequestBuilder\",\r\n                    \"code\": \"Sepa_STD\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Job Instance SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "320e4cbb-a11c-4b2f-923b-281b00be383a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.jobInstanceDto.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_JI\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.jobInstanceDto.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance?jobInstanceCode={{testCode}}_JI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance"
											],
											"query": [
												{
													"key": "jobInstanceCode",
													"value": "{{testCode}}_JI"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Job Instance MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c6017c3-80ff-4d7d-b3f3-1a4ff165b786",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: SepaJob_ddRequestBuilder.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testDescription}}_JI\",\r\n    \"jobTemplate\": \"SepaDirectDebitJob\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Job Instance ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "27e17db0-dcd2-43fe-b995-046f0b3da0a7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"JobTemplate with code 'NOT_EXIST' doesn't exist.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"jobTemplate\": \"NOT_EXIST\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\",\r\n                \"entityReferenceValue\": {\r\n                    \"classname\": \"org.meveo.model.payments.DDRequestBuilder\",\r\n                    \"code\": \"Sepa_STD\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Job Instance SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "16bc0f33-db3e-4d8c-b65a-fee0d9fa9d55",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/{{testCode}}_JI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"{{testCode}}_JI"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Job Instance ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d129fdc9-bf79-47f0-8d6a-abbe1f5d54b4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"JobInstance with code=\"+pm.collectionVariables.get(\"testCode\")+\"_JI does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/{{testCode}}_JI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"{{testCode}}_JI"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Discount Plan",
							"item": [
								{
									"name": "CreateOrUpdate Discount Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "abb19454-aaf2-4d39-8750-54b85af4dc63",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_DP\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"durationUnit\": \"1\",\r\n    \"startDate\": \"2019-03-03\",\r\n    \"endDate\": \"2019-03-04\",\r\n    \"defaultDuration\": \"1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Discount Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c55de23d-7d99-4c01-9ad2-5453fd1c146d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.discountPlanDto.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_DP\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.discountPlanDto.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan?discountPlanCode={{testCode}}_DP",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan"
											],
											"query": [
												{
													"key": "discountPlanCode",
													"value": "{{testCode}}_DP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Discount Plan ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ccb6ea21-b103-4755-913c-eb7fa2872aea",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"DiscountPlan with code=\"+pm.collectionVariables.get(\"testCode\")+\"_DP already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_DP\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"durationUnit\": \"1\",\r\n    \"startDate\": \"2019-03-03\",\r\n    \"endDate\": \"2019-03-04\",\r\n    \"defaultDuration\": \"1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Discount Plan ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d4a78b9-8c04-4477-b313-eacf7dcd4dc4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"DiscountPlan with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"TEST\",\r\n    \"durationUnit\": \"1\",\r\n    \"startDate\": \"2019-03-03\",\r\n    \"endDate\": \"2019-03-04\",\r\n    \"defaultDuration\": \"1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Discount Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3aba1291-435e-490e-9fda-61d26baeecfe",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_DP\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"durationUnit\": \"1\",\r\n    \"startDate\": \"2019-03-03\",\r\n    \"endDate\": \"2019-03-04\",\r\n    \"defaultDuration\": \"1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Discount Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "021fb395-d2af-4403-a2e0-70b6da71ae53",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_DP\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"durationUnit\": \"1\",\r\n    \"startDate\": \"2019-03-03\",\r\n    \"endDate\": \"2019-03-04\",\r\n    \"defaultDuration\": \"1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Discount Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9c6076cd-a5aa-4db3-9020-2f0d53360356",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.discountPlanDto.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_DP\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.discountPlanDto.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan?discountPlanCode={{testCode}}_DP",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan"
											],
											"query": [
												{
													"key": "discountPlanCode",
													"value": "{{testCode}}_DP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Discount Plan INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "994603cf-0ced-479b-b2ec-cc47166e2eea",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.util.Date` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_DP\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"durationUnit\": \"1\",\r\n    \"startDate\": \"INVALID\",\r\n    \"endDate\": \"INVALID\",\r\n    \"defaultDuration\": \"1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Discount Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "69f83de8-2329-4f71-8c2f-eb25a62ebe30",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan?discountPlanCode={{testCode}}_DP",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan"
											],
											"query": [
												{
													"key": "discountPlanCode",
													"value": "{{testCode}}_DP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Discount Plan ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "66bc5a8b-5c55-4ff4-b430-32b515928192",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"DiscountPlan with code=\"+pm.collectionVariables.get(\"testCode\")+\"_DP does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan?discountPlanCode={{testCode}}_DP",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan"
											],
											"query": [
												{
													"key": "discountPlanCode",
													"value": "{{testCode}}_DP"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Offers",
					"item": [
						{
							"name": "Offer Template",
							"item": [
								{
									"name": "CreateOrUpdate  Offer Template  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1f021712-1a56-4c0e-a702-705528b6f224",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_OT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"validFrom\": \"2020-01-01\",\r\n    \"validTo\": \"2020-02-01\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"bomCode\": null,\r\n    \"offerTemplateCategoryCode\": null,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_USG_UNIT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read  Offer Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d335c3e-2e89-4c42-8536-71144f4583fb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\") + \"_OT\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.offerTemplate.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_OT\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.offerTemplate.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.offerTemplate.validFrom).to.contains(\"2020-01-01T\");",
													"    pm.expect(jsonData.offerTemplate.validTo).to.contains(\"2020-02-01T\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{testCode}}_OT&validFrom=2020-01-01&validTo=2020-02-01",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{testCode}}_OT"
												},
												{
													"key": "validFrom",
													"value": "2020-01-01"
												},
												{
													"key": "validTo",
													"value": "2020-02-01"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Offer Template  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d75292e-5507-4ae8-b4d1-aaf7e0bf1bd3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contains(\"OfferTemplate with code=\" + pm.collectionVariables.get(\"testCode\") + \"_OT / Wed Jan 01\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_OT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"validFrom\": \"2020-01-01\",\r\n    \"validTo\": \"2020-02-01\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"bomCode\": null,\r\n    \"offerTemplateCategoryCode\": null,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_USG_UNIT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Offer Template  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8b582fa7-98e9-4431-b23d-e62a3f7f7f26",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contains(\"OfferTemplate with code=NOT_EXIST\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"validFrom\": \"2020-01-01\",\r\n    \"validTo\": \"2020-02-01\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"bomCode\": null,\r\n    \"offerTemplateCategoryCode\": null,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_USG_UNIT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Offer Template  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4355fbbd-82c1-4f5a-9811-d6c7881747fb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_OT\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"validFrom\": \"2020-01-01\",\r\n    \"validTo\": \"2020-02-01\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"bomCode\": null,\r\n    \"offerTemplateCategoryCode\": null,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_USG_UNIT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Offer Template  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a280d8fa-f9bc-4539-9281-c45646904469",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_OT\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"validFrom\": \"2020-01-01\",\r\n    \"validTo\": \"2020-02-01\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"bomCode\": null,\r\n    \"offerTemplateCategoryCode\": null,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_USG_UNIT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Offer Template  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7d813ecb-863b-47ae-9d8c-164b1982f946",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.offerTemplate.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_OT\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.offerTemplate.description).to.eql(pm.collectionVariables.get(\"testDescription\") + \" updated\");",
													"    pm.expect(jsonData.offerTemplate.validFrom).to.contain(\"2020-01-01T\");",
													"    pm.expect(jsonData.offerTemplate.validTo).to.contain(\"2020-02-01T\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{testCode}}_OT&validFrom=2020-01-01&validTo=2020-02-01",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{testCode}}_OT"
												},
												{
													"key": "validFrom",
													"value": "2020-01-01"
												},
												{
													"key": "validTo",
													"value": "2020-02-01"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Offer Template INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d1df46c2-e08b-4846-b72b-615d6f1e613b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `org.meveo.model.catalog.LifeCycleStatusEnum` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_OT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"INVALID\",\r\n    \"bomCode\": null,\r\n    \"offerTemplateCategoryCode\": null,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_USG_UNIT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"5_SE_CLASSIC_REC_FLAT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Offer Template INVALID_PARAMETER validity date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "802bb2c9-ea7b-4b07-80c7-473d385fc04e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"An offer, valid on 01/01/2020 - 01/03/2020, already exists. Please change the validity dates of an existing offer first.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_OT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"validFrom\": \"2020-01-01\",\r\n    \"validTo\": \"2020-03-01\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"bomCode\": null,\r\n    \"offerTemplateCategoryCode\": null,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_USG_UNIT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Offer Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e268a34c-ff46-49c5-8511-2c74b3882ecf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{testCode}}_OT?validFrom=2020-01-01&validTo=2020-02-01",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{testCode}}_OT"
											],
											"query": [
												{
													"key": "validFrom",
													"value": "2020-01-01"
												},
												{
													"key": "validTo",
													"value": "2020-02-01"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Offer Template ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb4c7f80-2275-4864-8569-d331cae01299",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"OfferTemplate with code=\" + pm.collectionVariables.get(\"testCode\") + \"_OT /  /  does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{testCode}}_OT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{testCode}}_OT"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Tax Class",
							"item": [
								{
									"name": "CreateOrUpdate  Tax Class  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "864d4daa-5408-4bb6-b310-b11ce62ec9be",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TC\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read  Tax Class SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "82d2c364-6a2a-4d2e-b491-cbc9819425a1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.dto.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_TC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.dto.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass?code={{testCode}}_TC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass"
											],
											"query": [
												{
													"key": "code",
													"value": "{{testCode}}_TC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Tax Class  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f689d61-e2b4-4be2-9448-ce10733cf42d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"TaxClass with code=\" + pm.collectionVariables.get(\"testCode\") + \"_TC already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TC\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Tax Class  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cfd9b291-1bda-4580-aa82-7a37c7417f7a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"TaxClass with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testCode}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Tax Class  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c12d84ca-841a-4d93-b596-ae5537f5ca6f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TC\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Tax Class  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a8265b0-6341-48d3-b4b1-da6416ae5a65",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TC\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Tax Class  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "13cc3919-0e1a-4d31-9a60-7fa7767d2d4d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.dto.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_TC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.dto.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass?code={{testCode}}_TC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass"
											],
											"query": [
												{
													"key": "code",
													"value": "{{testCode}}_TC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Tax Class INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8b79d9c-58c0-42f4-8648-8fc0881f98fd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize instance of `java.util.ArrayList` out of VALUE_STRING token\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"INVALID\",\r\n    \"descriptionI18n\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d1459e81-1b14-4959-8517-a9fac05e5c50",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b05c72c6-3e08-455d-a96f-11c83bfb1c79",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Recurring Charge",
							"item": [
								{
									"name": "CreateOrUpdate  Recurring Charge SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36e5d1f5-7d40-40cd-8985-e32b2572e53b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_RCT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"invoiceSubCategory\": \"CLASSIC_USAGE\",\r\n    \"disabled\": false,\r\n    \"unitNbDecimal\": 4,\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\": \"{{testCode}}_TC\",\r\n    \"calendar\": \"MONTHLY\",\r\n    \"durationTermInMonth\": null,\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"triggeredEdrs\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read  Recurring Charge SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "46425f50-5df9-4648-b877-291335085e81",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.recurringChargeTemplate.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_RCT\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.recurringChargeTemplate.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate?recurringChargeTemplateCode={{testCode}}_RCT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate"
											],
											"query": [
												{
													"key": "recurringChargeTemplateCode",
													"value": "{{testCode}}_RCT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Recurring Charge  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "737b7d7d-7554-4157-bd9e-1ba63be5ceb2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"RecurringChargeTemplate with code=\" + pm.collectionVariables.get(\"testCode\") + \"_RCT already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_RCT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"invoiceSubCategory\": \"CLASSIC_USAGE\",\r\n    \"disabled\": false,\r\n    \"unitNbDecimal\": 4,\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\": \"{{testCode}}_TC\",\r\n    \"calendar\": \"MONTHLY\",\r\n    \"durationTermInMonth\": null,\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"triggeredEdrs\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Recurring Charge ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "109c415d-484f-4b3a-b453-4956105f1738",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"RecurringChargeTemplate with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testCode}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Recurring Charge  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a55a8ea-7d53-4717-969c-7042ee98d90f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_RCT\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"invoiceSubCategory\": \"CLASSIC_USAGE\",\r\n    \"disabled\": false,\r\n    \"unitNbDecimal\": 4,\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\": \"{{testCode}}_TC\",\r\n    \"calendar\": \"MONTHLY\",\r\n    \"durationTermInMonth\": null,\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"triggeredEdrs\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Recurring Charge SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d500fbd1-8f9b-4c8e-b1b9-3a87b20e6637",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_RCT\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"invoiceSubCategory\": \"CLASSIC_USAGE\",\r\n    \"disabled\": false,\r\n    \"unitNbDecimal\": 4,\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\": \"{{testCode}}_TC\",\r\n    \"calendar\": \"MONTHLY\",\r\n    \"durationTermInMonth\": null,\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"triggeredEdrs\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Recurring Charge SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15180754-8cfb-4f85-a614-c2707d343974",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.recurringChargeTemplate.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_RCT\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.recurringChargeTemplate.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate?recurringChargeTemplateCode={{testCode}}_RCT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate"
											],
											"query": [
												{
													"key": "recurringChargeTemplateCode",
													"value": "{{testCode}}_RCT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Recurring Charge MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1f91cfe4-39e0-432a-95e6-1f98a3679ad5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: invoiceSubCategory, calendar, taxClassCode.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"MISSING\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Recurring Charge INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa5a7bb2-26a3-4a94-b3f3-e2f9541a3a18",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Boolean` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_RCT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"invoiceSubCategory\": \"ISCAT_REC\",\r\n    \"disabled\": \"INVAID\",\r\n    \"unitNbDecimal\": 4,\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"calendar\": \"CAL_MONTHLY_1ST\",\r\n    \"durationTermInMonth\": null,\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"triggeredEdrs\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "904ecf5a-c876-4347-b6f6-90d94597bb15",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d2e604a6-43f3-4537-9cf2-c3a7810a66f5",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Price Plan",
							"item": [
								{
									"name": "CreateOrUpdate  Price Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3c55e35-434d-4af3-b238-1d452993a0e7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PP\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"eventCode\": \"{{testCode}}_RCT\",\r\n    \"amountWithoutTax\": 100\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read  Price Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee150bc3-61a4-4140-8e8e-bd681c03d52a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pricePlan.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_PP\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pricePlan.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan?pricePlanCode={{testCode}}_PP",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan"
											],
											"query": [
												{
													"key": "pricePlanCode",
													"value": "{{testCode}}_PP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "97dc671b-d31a-429d-9297-c770e00ea125",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"PricePlanMatrix with code=\" + pm.collectionVariables.get(\"testCode\") + \"_PP already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PP\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"eventCode\": \"{{testCode}}_RCT\",\r\n    \"amountWithoutTax\": 100\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Price Plan ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6394c6e3-8672-4b12-96e5-9dd8b9e47077",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"PricePlanMatrix with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"eventCode\": \"{{testCode}}_RCT\",\r\n    \"amountWithoutTax\": 100\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Price Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5141431a-ec6e-46f1-8282-3d463b4387e5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PP\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"eventCode\": \"{{testCode}}_RCT\",\r\n    \"amountWithoutTax\": 100\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Price Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e05e53f6-e6c8-40bd-aca3-a1ef1e4de6af",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PP\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"eventCode\": \"{{testCode}}_RCT\",\r\n    \"amountWithoutTax\": 100\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Price Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "db1a4f62-ce59-42d4-89a2-c202f8d8f488",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pricePlan.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_PP\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pricePlan.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan?pricePlanCode={{testCode}}_PP",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan"
											],
											"query": [
												{
													"key": "pricePlanCode",
													"value": "{{testCode}}_PP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Price Plan MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c3dc7930-baef-4db1-a721-0479441e528b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: eventCode, amountWithoutTax.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"MISSING\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Price Plan INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9cc5fcb6-7f1f-40a0-8b75-849d8fe5f5f7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.math.BigDecimal` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PP\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"eventCode\": \"{{testCode}}_RcT\",\r\n    \"amountWithoutTax\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Price Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "631f0497-4c6f-4f7a-976a-27ea3ffa4771",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/{{testCode}}_PP",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"{{testCode}}_PP"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Price Plan ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8cd7ab-9718-4a72-b3ed-c35e40d7348c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"PricePlanMatrix with code=\" + pm.collectionVariables.get(\"testCode\") + \"_PP does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/{{testCode}}_PP",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"{{testCode}}_PP"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "a9776b4e-8d1d-43bd-8fb8-9bd905aeb289",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "27ec48a1-7793-4eb4-89f0-fd1259c2b559",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Service Template",
							"item": [
								{
									"name": "CreateOrUpdate  Service Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2789c325-f6da-40df-9df6-32f00d7ab27f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"customFields\": null,\r\n    \"imageBase64\": null,\r\n    \"imagePath\": null,\r\n    \"invoicingCalendar\": null,\r\n    \"longDescription\": null,\r\n    \"mandatory\": true,\r\n    \"serviceChargeTemplateUsages\": null,\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{testCode}}_RCT\",\r\n                \"wallets\": null\r\n            }\r\n        ]\r\n    },\r\n    \"serviceChargeTemplateSubscriptions\": null,\r\n    \"serviceChargeTemplateTerminations\": null,\r\n    \"somCode\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read  Service Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c7671453-7916-4aff-8d15-e472666260c5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceTemplate.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_ST\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceTemplate.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate?serviceTemplateCode={{testCode}}_ST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate"
											],
											"query": [
												{
													"key": "serviceTemplateCode",
													"value": "{{testCode}}_ST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Service Template  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e1e1bd73-0119-4f17-acce-74e28f3126ed",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ServiceTemplateService with code=\" + pm.collectionVariables.get(\"testCode\") + \"_ST already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"customFields\": null,\r\n    \"imageBase64\": null,\r\n    \"imagePath\": null,\r\n    \"invoicingCalendar\": null,\r\n    \"longDescription\": null,\r\n    \"mandatory\": true,\r\n    \"serviceChargeTemplateUsages\": null,\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{testCode}}_RCT\",\r\n                \"wallets\": null\r\n            }\r\n        ]\r\n    },\r\n    \"serviceChargeTemplateSubscriptions\": null,\r\n    \"serviceChargeTemplateTerminations\": null,\r\n    \"somCode\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Service Template ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15b22b75-2025-4635-a747-b1b5596ac929",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ServiceTemplateService with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"customFields\": null,\r\n    \"imageBase64\": null,\r\n    \"imagePath\": null,\r\n    \"invoicingCalendar\": null,\r\n    \"longDescription\": null,\r\n    \"mandatory\": true,\r\n    \"serviceChargeTemplateUsages\": null,\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{testCode}}_RCT\",\r\n                \"wallets\": null\r\n            }\r\n        ]\r\n    },\r\n    \"serviceChargeTemplateSubscriptions\": null,\r\n    \"serviceChargeTemplateTerminations\": null,\r\n    \"somCode\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Service Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "224f78b1-ea31-479f-a422-eb66821b5625",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ST\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"customFields\": null,\r\n    \"imageBase64\": null,\r\n    \"imagePath\": null,\r\n    \"invoicingCalendar\": null,\r\n    \"longDescription\": null,\r\n    \"mandatory\": true,\r\n    \"serviceChargeTemplateUsages\": null,\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{testCode}}_RCT\",\r\n                \"wallets\": null\r\n            }\r\n        ]\r\n    },\r\n    \"serviceChargeTemplateSubscriptions\": null,\r\n    \"serviceChargeTemplateTerminations\": null,\r\n    \"somCode\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Service Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56fd20fa-fc52-4cf5-9ea3-0892b1276d2a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ST\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"customFields\": null,\r\n    \"imageBase64\": null,\r\n    \"imagePath\": null,\r\n    \"invoicingCalendar\": null,\r\n    \"longDescription\": null,\r\n    \"mandatory\": true,\r\n    \"serviceChargeTemplateUsages\": null,\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{testCode}}_RCT\",\r\n                \"wallets\": null\r\n            }\r\n        ]\r\n    },\r\n    \"serviceChargeTemplateSubscriptions\": null,\r\n    \"serviceChargeTemplateTerminations\": null,\r\n    \"somCode\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Service Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5818d3cc-48f2-45a5-8b32-e6ca905d6126",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceTemplate.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_ST\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceTemplate.description).to.eql(pm.collectionVariables.get(\"testDescription\") + \" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate?serviceTemplateCode={{testCode}}_ST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate"
											],
											"query": [
												{
													"key": "serviceTemplateCode",
													"value": "{{testCode}}_ST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Service Template MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "21200181-597b-48d5-b599-0f44bf6ce892",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Service Template INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9355df17-10cd-4e45-982a-a9662fba0327",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `boolean` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"customFields\": null,\r\n    \"imageBase64\": null,\r\n    \"imagePath\": null,\r\n    \"invoicingCalendar\": null,\r\n    \"longDescription\": null,\r\n    \"mandatory\": \"INVALID\",\r\n    \"serviceChargeTemplateUsages\": null,\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{testCode}}_RCT\",\r\n                \"wallets\": null\r\n            }\r\n        ]\r\n    },\r\n    \"serviceChargeTemplateSubscriptions\": null,\r\n    \"serviceChargeTemplateTerminations\": null,\r\n    \"somCode\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2c9be410-ddfb-4f7a-b130-43be67551492",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "1d232598-2e54-48e8-8b48-2285f42b947d",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Clear Data",
							"item": [
								{
									"name": "Delete Tax Class GENERIC_API_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a22f7331-3d8b-4799-8fdd-033570590566",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"ERROR: update or delete on table \\\"billing_tax_class\\\" violates foreign key constraint\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass/{{testCode}}_TC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass",
												"{{testCode}}_TC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Recurring Charge GENERIC_API_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1841a7b3-0b88-40b8-a1f5-6c81991dba00",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"ERROR: update or delete on table\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/{{testCode}}_RCT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"{{testCode}}_RCT"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Service Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dae69cfb-42a1-4d7a-a8a6-7ca8217830aa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/{{testCode}}_ST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"{{testCode}}_ST"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Service Template ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bb410d06-e6cf-47cf-9f21-5ff9961c0171",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ServiceTemplate with code=\" + pm.collectionVariables.get(\"testCode\") + \"_ST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/{{testCode}}_ST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"{{testCode}}_ST"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Recurring Charge SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a4cf90b7-a777-4924-aaca-1a2aad8412de",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/{{testCode}}_RCT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"{{testCode}}_RCT"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Recurring Charge ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "64c3eeac-6ae4-458f-8bbd-b33e517ce102",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"RecurringChargeTemplate with code=\" + pm.collectionVariables.get(\"testCode\") + \"_RCT does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/{{testCode}}_RCT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"{{testCode}}_RCT"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Tax Class SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7ce37eb5-78f6-4e02-8752-ba5d16624a1a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass/{{testCode}}_TC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass",
												"{{testCode}}_TC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Tax Class ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0eceb78f-0726-4955-a245-aa9f37c449d5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"TaxClass with code=\" + pm.collectionVariables.get(\"testCode\") + \"_TC does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass/{{testCode}}_TC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass",
												"{{testCode}}_TC"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Billing",
					"item": [
						{
							"name": "Invoice Category",
							"item": [
								{
									"name": "CreateOrUpdate Invoice Category  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8bed83b0-cf3a-431a-8e09-909d19f9e850",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IC\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Invoice Category  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b8060886-ce09-4f96-ad62-f4396ae1d04a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceCategory.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_IC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceCategory.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory?invoiceCategoryCode={{testCode}}_IC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory"
											],
											"query": [
												{
													"key": "invoiceCategoryCode",
													"value": "{{testCode}}_IC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Invoice Category  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48110580-2c34-41db-a323-d90f73500355",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceCategory with code=\"+pm.collectionVariables.get(\"testCode\")+\"_IC already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IC\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice Category  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "282f7b96-acb5-4e75-946e-964e636f3422",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceCategory with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice Category  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "90e128b5-72ac-44b0-97b5-ff3d1ced9213",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IC\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Category  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1946e110-705e-4176-a430-d107f461ceb9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IC\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Invoice Category  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d389812e-5538-4a87-96fb-120df240db63",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceCategory.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_IC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceCategory.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory?invoiceCategoryCode={{testCode}}_IC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory"
											],
											"query": [
												{
													"key": "invoiceCategoryCode",
													"value": "{{testCode}}_IC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Category  MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bcbd382b-7b8d-4ed0-add6-e64241b763a3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Category INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23181114-fb4c-45d3-82f3-c68a8c03d81e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot construct instance of `org.meveo.api.dto.CustomFieldsDto`\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"customFields\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Invoice SubCategory",
							"item": [
								{
									"name": "CreateOrUpdate Invoice SubCategory  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "08da33a7-de3e-496f-ac29-a46d336dcb0c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_ISC\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"invoiceCategory\": \"{{testCode}}_IC\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Invoice SubCategory  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d275d16-a50b-4d97-825a-f1adc442eb58",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceSubCategory.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_ISC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceSubCategory.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory?invoiceSubCategoryCode={{testCode}}_ISC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory"
											],
											"query": [
												{
													"key": "invoiceSubCategoryCode",
													"value": "{{testCode}}_ISC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Invoice SubCategory  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "90dd5b12-f9ed-42cf-a304-ca80c337b559",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceSubCategory with code=\"+pm.collectionVariables.get(\"testCode\")+\"_ISC already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_ISC\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"invoiceCategory\": \"{{testCode}}_IC\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice SubCategory  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5a863410-7149-4a88-ab1d-88300f69f2ce",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceSubCategory with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"invoiceCategory\": \"{{testCode}}_IC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice SubCategory  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7d976952-23f5-49a6-8c51-e57b6bb3a8aa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ISC\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"invoiceCategory\": \"{{testCode}}_IC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice SubCategory  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5db547a9-ff96-4398-bb4c-d846451e6d67",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ISC\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"invoiceCategory\": \"{{testCode}}_IC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Invoice Category  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "caa2d13a-676e-4796-8941-94e0eb7a260b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceSubCategory.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_ISC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceSubCategory.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory?invoiceSubCategoryCode={{testCode}}_ISC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory"
											],
											"query": [
												{
													"key": "invoiceSubCategoryCode",
													"value": "{{testCode}}_ISC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice SubCategory  MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c494452-cc40-41d3-8493-bdd841561deb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: invoiceCategory.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ISC\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice SubCategory INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d4b0baa9-a7e6-42c3-9e6c-956a57f20717",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot construct instance of `org.meveo.api.dto.CustomFieldsDto`\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ISC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"customFields\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice SubCategory ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47a0b040-baa0-4fed-85c6-118aba194776",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceCategory with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ISC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"invoiceCategory\": \"NOT_EXIST\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Invoice Sequence",
							"item": [
								{
									"name": "CreateOrUpdate Invoice Sequence SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "77497445-7be6-4d42-ab00-f04c16e1b8e9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IS\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"sequenceSize\": \"14\",\r\n    \"currentInvoiceNb\": \"0\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Invoice Sequence SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "febd7114-c039-436a-bbfe-ca4bf27d6050",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceSequenceDto.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_IS\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceSequenceDto.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence?invoiceSequenceCode={{testCode}}_IS",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence"
											],
											"query": [
												{
													"key": "invoiceSequenceCode",
													"value": "{{testCode}}_IS"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Invoice Sequence ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "129046b6-968b-42d0-92d7-780cccea89c7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceSequence with code=\"+pm.collectionVariables.get(\"testCode\")+\"_IS already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IS\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"sequenceSize\": \"14\",\r\n    \"currentInvoiceNb\": \"0\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice Sequence ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "81fab3bf-b4ae-4655-9519-358c82472fee",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceSequence with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"sequenceSize\": \"14\",\r\n    \"currentInvoiceNb\": \"0\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice Sequence SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2483125a-7550-4aa4-80d5-42d01df919ef",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IS\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"sequenceSize\": \"14\",\r\n    \"currentInvoiceNb\": \"0\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Sequence SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "016fb436-187e-4b66-a8c0-5d5c4fc1c70b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IS\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"sequenceSize\": \"14\",\r\n    \"currentInvoiceNb\": \"0\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Invoice Sequence SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "527c43df-2be1-436f-b862-18660d6a646d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceSequenceDto.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_IS\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceSequenceDto.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence?invoiceSequenceCode={{testCode}}_IS",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence"
											],
											"query": [
												{
													"key": "invoiceSequenceCode",
													"value": "{{testCode}}_IS"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Sequence MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "221dda80-a846-4002-95fb-2c599fb2279d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Sequence INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f9eec1ff-d43f-4fe5-b54d-f770c58d1706",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Integer` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IS\",\r\n    \"sequenceSize\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Clear Data",
							"item": [
								{
									"name": "Delete Invoice Category GENERIC_API_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9068b7f-13fd-40d7-8d8a-7d15a1cc9a8e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"GENERIC_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"ERROR: update or delete on table\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory/{{testCode}}_IC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory",
												"{{testCode}}_IC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Invoice SubCategory SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e69ca8ca-0077-4758-b25a-2a766390289c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory/{{testCode}}_ISC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory",
												"{{testCode}}_ISC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Invoice SubCategory ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca936c12-66ba-4d0d-bfa1-7ece722df66c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceSubCategory with code=\"+pm.collectionVariables.get(\"testCode\")+\"_ISC does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory/{{testCode}}_ISC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory",
												"{{testCode}}_ISC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Invoice Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b70078d-9940-481f-9543-c5e7dd4fcbb5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory/{{testCode}}_IC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory",
												"{{testCode}}_IC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Invoice Category ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7ba06b3-3cc1-47c1-b0de-0c3b075bc872",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceCategory with code=\"+pm.collectionVariables.get(\"testCode\")+\"_IC does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory/{{testCode}}_IC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory",
												"{{testCode}}_IC"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Wallet Operation",
							"item": [
								{
									"name": "Create Wallet Operation SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "16bec268-b92f-4c64-8cd7-08a416272653",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_WLT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"subscription\": \"ben.ohara\",\r\n    \"chargeInstance\": \"CH_CLASSIC_REC_FLAT\",\r\n    \"currency\": \"EUR\",\r\n    \"taxCode\": \"TAX_CLASSIC_HIGH\",\r\n    \"status\": \"TREATED\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/wallet/operation",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"wallet",
												"operation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Wallet Operation ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8cc6e354-d522-46c2-9faa-ae718b396b03",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"WalletOperation with code=\"+pm.collectionVariables.get(\"testCode\")+\"_WLT already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_WLT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"subscription\": \"ben.ohara\",\r\n    \"chargeInstance\": \"CH_CLASSIC_REC_FLAT\",\r\n    \"currency\": \"EUR\",\r\n    \"taxCode\": \"TAX_CLASSIC_HIGH\",\r\n    \"status\": \"TREATED\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/wallet/operation",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"wallet",
												"operation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Wallet Operation MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "604001ff-42cf-4a3c-a5d3-49cec7ff0d91",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: userAccount or subscription, chargeInstance or chargeInstanceId, currency, taxCode or taxPercent.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"MISSING\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/wallet/operation",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"wallet",
												"operation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Wallet Operation INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98cf8e02-fe2b-479a-95dd-9785e79520dd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.util.Date` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_WLT_INVALID\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"subscription\": \"ben.ohara\",\r\n    \"subscriptionDate\": \"INVALID\",\r\n    \"chargeInstance\": \"CH_CLASSIC_OSS_UNIT\",\r\n    \"currency\": \"EUR\",\r\n    \"taxCode\": \"TAX_CLASSIC_HIGH\",\r\n    \"status\": \"TREATED\",\r\n    \"quantity\": 1\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/wallet/operation",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"wallet",
												"operation"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Subscription",
					"item": [
						{
							"name": "Subscription",
							"item": [
								{
									"name": "CreateOrUpdate Subscription SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb1f32a1-241a-4264-b14a-d312fe4cea93",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"userAccount\": \"ben.ohara\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01\"\r\n}\t\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Subscription SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50c1dfae-b3cb-414f-9874-9058d770a0e3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_SUB\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{testCode}}_SUB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{testCode}}_SUB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Subscription ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "544f893c-405c-45d5-92e1-194f56a84d59",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Subscription with code=\"+pm.collectionVariables.get(\"testCode\")+\"_SUB already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"userAccount\": \"ben.ohara\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Subscription ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fbf8bf7e-575c-41e7-a526-1b53860742df",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Subscription with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"NOT_EXIST\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"userAccount\": \"ben.ohara\",\r\n\t\"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n\t\"subscriptionDate\": \"2019-01-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Subscription SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3c7cd52-4bf6-4d17-9f1c-dfd18b33ac2b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"userAccount\": \"ben.ohara\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Subscription SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9d605307-c2f8-4a76-afad-09e902f4d2f3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"userAccount\": \"ben.ohara\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Subscription SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8b8f8266-9bd0-4b34-b9b1-15f46c281f19",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_SUB\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{testCode}}_SUB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{testCode}}_SUB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Subscription ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "317681af-b322-4851-8a3d-cb9af29226be",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"UserAccount with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"userAccount\": \"NOT_EXIST\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Subscription MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b8bd677b-3161-46c7-b00f-95c280101351",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: subscriptionDate.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"userAccount\": \"ben.ohara\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Subscription INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e565f3ea-2c8c-456f-b150-4db39832e831",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.util.Date` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"userAccount\": \"ben.ohara\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Subscription SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "71c86968-cc5f-4a86-a7df-709025b38d37",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscriptionCode\": \"{{testCode}}_SUB\",\r\n    \"terminationReason\" : \"TERM_REASON_1\",\r\n    \"terminationDate\": \"2019-01-01\",\r\n    \"orderItemAction\" : \"DELETE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Subscription RESILIATED",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3be6007c-b7b0-4532-be4b-206c5361f1ef",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Subscription is already RESILIATED.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscriptionCode\": \"{{testCode}}_SUB\",\r\n    \"terminationReason\" : \"TERM_REASON_1\",\r\n    \"terminationDate\": \"2019-01-01\",\r\n    \"orderItemAction\" : \"DELETE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subscribe and Activate Subscription SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bd1b4d12-1c72-40de-a413-d9cf660e3c29",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"SUB_TEST_1\",\r\n    \"userAccount\": \"DEMO.CLASSIC\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01T22:00:00Z\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"subscriptionDate\": \"2019-01-01T22:00:00Z\",\r\n                \"quantity\": 1\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/subscribeAndActivateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"subscribeAndActivateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subscribe and Activate Subscription ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "745e92ac-343a-4566-b180-87816e5847de",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Subscription with code=SUB_TEST_1 already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"SUB_TEST_1\",\r\n    \"userAccount\": \"DEMO.CLASSIC\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01T22:00:00Z\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"subscriptionDate\": \"2019-01-01T22:00:00Z\",\r\n                \"quantity\": 1\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/subscribeAndActivateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"subscribeAndActivateServices"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Settings",
					"item": [
						{
							"name": "Title",
							"item": [
								{
									"name": "CreateOrUpdate Title SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d0ff2aa-1fe5-4088-9ec9-75e6248ff989",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TITLE\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{testDescription}}\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"false\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Title SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec970446-71c2-43be-bb60-4757ee1b4716",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.titleDto.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_TITLE\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.titleDto.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title?titleCode={{testCode}}_TITLE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title"
											],
											"query": [
												{
													"key": "titleCode",
													"value": "{{testCode}}_TITLE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Title ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cf221289-608b-4f72-ab60-e99ef161ac6f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Title with code=\"+pm.collectionVariables.get(\"testCode\")+\"_TITLE already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TITLE\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{testDescription}}\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"false\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Title ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b25e7db2-779c-4a69-9c0c-535bf53893f8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Title with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{testDescription}}\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"false\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Title SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee464544-35a6-4fa2-b0e9-880980d085dc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TITLE\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{testDescription}}\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"false\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Account Operation SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c5eeed6-5d6b-46dd-9072-203aa70f7712",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TITLE\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{testDescription}}\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"false\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Title SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e1bc9d8-6bf6-4012-a637-4fc75cc87ce6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.titleDto.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_TITLE\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.titleDto.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title?titleCode={{testCode}}_TITLE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title"
											],
											"query": [
												{
													"key": "titleCode",
													"value": "{{testCode}}_TITLE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Title MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9d15737-5a09-4998-a083-7915e002a8ac",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: titleCode.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{testDescription}}\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"false\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Title INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3bcc9d8b-75ab-4a03-bb2d-e991cb0769f3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Boolean` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"Test\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"INVALID\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Title SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a89e1706-4e1f-4c99-890b-b83cc8bede5f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title/{{testCode}}_TITLE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title",
												"{{testCode}}_TITLE"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Title ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab9c51fc-bde5-4fdb-8cbd-7d9a68b63e55",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Title with code=\"+pm.collectionVariables.get(\"testCode\")+\"_TITLE does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title/{{testCode}}_TITLE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title",
												"{{testCode}}_TITLE"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Calendar",
							"item": [
								{
									"name": "CreateOrUpdate Calendar SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "27a3326e-7a00-4f13-9f14-0273810f3520",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CAL\",\r\n    \"description\": \"Monthly (1st of the month)\",\r\n    \"calendarType\": \"YEARLY\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Calendar SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3138de1-9023-4dd6-9de0-8e9dbb8383e0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.calendar.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_CAL\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal Monthly (1st of the month)\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.calendar.description).to.eql(\"Monthly (1st of the month)\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/?calendarCode={{testCode}}_CAL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												""
											],
											"query": [
												{
													"key": "calendarCode",
													"value": "{{testCode}}_CAL"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Calendar ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "646c3c10-ef9d-4617-8f7b-a00d62d374b8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Calendar with code=\"+pm.collectionVariables.get(\"testCode\")+\"_CAL already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CAL\",\r\n    \"description\": \"Monthly (1st of the month)\",\r\n    \"calendarType\": \"YEARLY\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Calendar ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "37612522-95fa-4ebe-83aa-4944160e2e8c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Calendar with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"Monthly (1st of the month)\",\r\n    \"calendarType\": \"YEARLY\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Calendar SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fe464ca1-b651-4c4e-9054-3d975cf7702e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CAL\",\r\n    \"description\": \"Monthly (1st of the month) updated\",\r\n    \"calendarType\": \"YEARLY\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Calendar SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "630a1a4d-ca4f-4e35-b627-3c7048c8360a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CAL\",\r\n    \"description\": \"Monthly (1st of the month) updated\",\r\n    \"calendarType\": \"YEARLY\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Calendar SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e7eda5a-845c-4318-a6bd-d76baba7b2e6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.calendar.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_CAL\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal Monthly (1st of the month)\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.calendar.description).to.eql(\"Monthly (1st of the month) updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/?calendarCode={{testCode}}_CAL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												""
											],
											"query": [
												{
													"key": "calendarCode",
													"value": "{{testCode}}_CAL"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Calendar MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6aaf46cd-646f-4e45-b6a6-babea546294b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: calendarType.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CAL\",\r\n    \"description\": \"Monthly (1st of the month)\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Calendar GENERIC_API_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "104b7144-f9a4-454c-80b4-406a8f6086b9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"GENERIC_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"query did not return a unique result\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"Monthly (1st of the month)\",\r\n    \"calendarType\": \"YEARLY\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Calendar INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55c7c5d3-e302-42be-a66b-d7c4d589c93f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `org.meveo.api.dto.CalendarTypeEnum` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CAL\",\r\n    \"description\": \"Monthly (1st of the month)\",\r\n    \"calendarType\": \"INVALID\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Calendar SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "423f7887-aefb-4a5c-b4f7-242223714b09",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/{{testCode}}_CAL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"{{testCode}}_CAL"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Calendar ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60fd9aa1-e4be-45fe-9bfc-396090f5050d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Calendar with code=\"+pm.collectionVariables.get(\"testCode\")+\"_CAL does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/{{testCode}}_CAL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"{{testCode}}_CAL"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Channel",
							"item": [
								{
									"name": "CreateOrUpdate Channel SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "26172222-c263-4e6b-8f22-277191644660",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CH\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Channel SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "899172fd-2de1-4b60-b1bc-337ac8831ee3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.channel.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_CH\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.channel.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel?channelCode={{testCode}}_CH",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel"
											],
											"query": [
												{
													"key": "channelCode",
													"value": "{{testCode}}_CH"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Channel ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "be03d6d3-816c-46f8-af9c-6dbe178587a7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Channel with code=\"+pm.collectionVariables.get(\"testCode\")+\"_CH already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CH\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Channel ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e7348d93-a3b1-4aee-b3da-12b989faf235",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Channel with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Channel SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3006b47-6cfc-43bb-8a8f-649c55b2e752",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CH\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Channel SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c932b735-83a2-47d7-86c5-bf9083c4cd9a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CH\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Channel SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2fa61779-e9ac-4807-8e57-a3e87162b4cb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.channel.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_CH\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.channel.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel?channelCode={{testCode}}_CH",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel"
											],
											"query": [
												{
													"key": "channelCode",
													"value": "{{testCode}}_CH"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Channel MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b79391f5-2694-4db0-987f-b2f8b51bb43f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Channel INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7fd659d-98b2-4ee1-a5d9-6fdc495b40d6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Boolean` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CH\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"disabled\": \"INVALID\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Channel SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8df2022e-77bb-41ee-9c02-603e4d7a2759",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel?channelCode={{testCode}}_CH",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel"
											],
											"query": [
												{
													"key": "channelCode",
													"value": "{{testCode}}_CH"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Channel ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ded672da-338d-4cf2-97d2-0130d870b6a5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Channel with code=\"+pm.collectionVariables.get(\"testCode\")+\"_CH does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel?channelCode={{testCode}}_CH",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel"
											],
											"query": [
												{
													"key": "channelCode",
													"value": "{{testCode}}_CH"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CountryIso",
							"item": [
								{
									"name": "CreateOrUpdate CountryIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cf2bc976-f59a-489b-b68e-d0758cfdabcc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"TS\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read CountryIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e56b4cb-b36e-4197-96d9-a1dfacc035fd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal TS\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.country.countryCode).to.eql(\"TS\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.country.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso?countryCode=TS",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso"
											],
											"query": [
												{
													"key": "countryCode",
													"value": "TS"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CountryIso  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "524979ff-d9ef-463b-8866-318da380cf14",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Country with code=TS already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"TS\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CountryIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c609175-ca63-4658-a0e4-627b883acfec",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Country with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CountryIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "abbe4c88-bb0e-4ac0-a151-adbbf5ca3271",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"TS\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CountryIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bbb5104a-afeb-48e4-9dd9-44ca13f26a2f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"TS\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read CountryIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8468979-c84f-410a-9e65-267bbb87ca31",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal TS\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.country.countryCode).to.eql(\"TS\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.country.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso?countryCode=TS",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso"
											],
											"query": [
												{
													"key": "countryCode",
													"value": "TS"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CountryIso  MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e9de874-dace-484c-bebd-143424a556a9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: currencyCode.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"MISSING\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"FRA\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CountryIso INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "456a3353-acb2-4820-acc9-76139990f609",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize instance of `java.util.ArrayList` out of VALUE_STRING\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"INVALID\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\",\r\n    \"languageDescriptions\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CountryIso INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8f0cb4e8-81f9-4c98-8a0d-062b8532ccf9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Invalid values passed:     Country.countryCode: value 'TOO_LONG_NAME' - size must be between 0 and 10;\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"TOO_LONG_NAME\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CountryIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2df228fa-3062-4368-acd2-8153e9236c68",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Language with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"NOT_EXIST\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CountryIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9f6d568d-afc2-463a-b6b8-adb4165a5579",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso/TS",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso",
												"TS"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CountryIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e8835cb-daf8-4c0d-98c9-dc436edcee29",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Country with code=TS does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso/TS",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso",
												"TS"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CurrencyIso",
							"item": [
								{
									"name": "CreateOrUpdate CurrencyIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c47200c-7a7f-4408-a3d7-96c0b1e5d49e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read CurrencyIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7fae51ed-f89c-4add-9ded-c9786851d297",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal TST\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.currency.code).to.eql(\"TST\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.currency.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso?currencyCode=TST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso"
											],
											"query": [
												{
													"key": "currencyCode",
													"value": "TST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CurrencyIso ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4b6e740a-8f93-45bf-b6e4-a01f482da57f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Currency with code=TST already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CurrencyIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ecb07b9e-e0cf-44b7-aa60-ccfa518d1e6b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Currency with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CurrencyIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd37152c-0afb-4fd2-969a-7e83b0bd6eb0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CurrencyIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a046b882-1df1-457c-9177-4683f498f619",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read CurrencyIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "148b0a58-1e89-4476-b442-1933c462c8b6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal TST\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.currency.code).to.eql(\"TST\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.currency.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso?currencyCode=TST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso"
											],
											"query": [
												{
													"key": "currencyCode",
													"value": "TST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CurrencyIso INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bccc20a3-d644-484f-b7f1-7ae456889eeb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Invalid values passed:     Currency.currencyCode: value 'TOO_LONG_NAME' - size must be between 0 and 3;\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TOO_LONG_NAME\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CurrencyIso  INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "65050049-8fd3-40db-860c-8203c7f02f83",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"ERROR: null value in column\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CurrencyIso  MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eabc950d-5e64-40e4-a2cf-861820bace23",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CurrencyIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5878561-13b1-4154-aa5b-24691e4d1f58",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso/TST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso",
												"TST"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CurrencyIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b774cfb-eb08-436d-bb57-da55c3a1c35b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Currency with code=TST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso/TST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso",
												"TST"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "LanguageIso",
							"item": [
								{
									"name": "CreateOrUpdate LanguageIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6565a224-faea-4247-b5a3-6f0c350143ce",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"code\": \"TST\",\r\n  \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read LanguageIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f9dbcec6-0173-4838-8019-f56a0ae6c339",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal TST\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.language.code).to.eql(\"TST\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.language.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso?languageCode=TST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso"
											],
											"query": [
												{
													"key": "languageCode",
													"value": "TST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create LanguageIso  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42b1d2fa-635b-4c20-9181-5c2aaa2b59d7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Language with code=TST already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update LanguageIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a96ae6a8-e073-43fd-bdf9-998944b367c6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Language with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update LanguageIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7418aed8-f5d0-4719-b676-e6b42f314548",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate LanguageIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "11a1282a-f21b-462e-a8aa-5734bc8baf58",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read LanguageIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9627577e-5afa-47f6-8410-a4074c0f4573",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal TST\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.language.code).to.eql(\"TST\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.language.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso?languageCode=TST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso"
											],
											"query": [
												{
													"key": "languageCode",
													"value": "TST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate LanguageIso INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22868170-c977-4dd7-ada0-155381a878f6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Invalid values passed:     Language.languageCode: value 'TOO_LONG_NAME' - size must be between 0 and 3;\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TOO_LONG_NAME\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate LanguageIso INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd6d97bf-b0b5-4476-9662-10d1b2d9dddb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"ERROR: null value in column\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate LanguageIso MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a649f26d-d6fa-4965-a745-b3221234d3bc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete LanguageIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dc273730-fdda-4d7a-817b-8470fc1fe3f4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso/TST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso",
												"TST"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete LanguageIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c5a61166-7476-4427-8304-aee9557d533e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Language with code=TST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso/TST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso",
												"TST"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Provider",
							"item": [
								{
									"name": "Create Provider BUSINESS_API_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f616f64b-1a97-4de7-b167-f62f6d2f5c24",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"BUSINESS_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"There should already be a provider setup\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PROVIDER\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"enterprise\": \"true\",\r\n    \"rounding\": \"5\",\r\n    \"invoiceConfiguration\": {\r\n        \"displaySubscriptions\": \"true\",\r\n        \"displayServices\": \"true\",\r\n        \"displayOffers\": \"true\",\r\n        \"displayEdrs\": \"true\",\r\n        \"displayProvider\": \"true\",\r\n        \"displayCfAsXML\": \"true\",\r\n        \"displayPricePlans\": \"true\",\r\n        \"displayDetail\": \"true\",\r\n        \"displayChargesPeriods\": \"true\",\r\n        \"displayFreeTransacInInvoice\": \"false\",\r\n        \"displayBillingCycle\": \"true\",\r\n        \"displayOrders\": \"true\"\r\n    },\r\n    \"bankCoordinates\": {\r\n        \"iban\": \"30004 01234 12345678901 23\",\r\n        \"bic\": \"BNPAFRPPXXX\",\r\n        \"ics\": \"\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/provider",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Provider SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cfc6e829-778b-404b-8e5b-d8b4ffdcef37",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PROVIDER\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"enterprise\": \"true\",\r\n    \"rounding\": \"5\",\r\n    \"invoiceConfiguration\": {\r\n        \"displaySubscriptions\": \"true\",\r\n        \"displayServices\": \"true\",\r\n        \"displayOffers\": \"true\",\r\n        \"displayEdrs\": \"true\",\r\n        \"displayProvider\": \"true\",\r\n        \"displayCfAsXML\": \"true\",\r\n        \"displayPricePlans\": \"true\",\r\n        \"displayDetail\": \"true\",\r\n        \"displayChargesPeriods\": \"true\",\r\n        \"displayFreeTransacInInvoice\": \"false\",\r\n        \"displayBillingCycle\": \"true\",\r\n        \"displayOrders\": \"true\"\r\n    },\r\n    \"bankCoordinates\": {\r\n        \"iban\": \"30004 01234 12345678901 23\",\r\n        \"bic\": \"BNPAFRPPXXX\",\r\n        \"ics\": \"\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/provider",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Provider SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eaacfade-d8cc-4140-a2a6-0015389c5779",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.provider.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_PROVIDER\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.provider.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/provider",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Provider SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e36874e-0a8c-4c01-b395-50423f63e1ea",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PROVIDER\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"enterprise\": \"true\",\r\n    \"rounding\": \"5\",\r\n    \"invoiceConfiguration\": {\r\n        \"displaySubscriptions\": \"true\",\r\n        \"displayServices\": \"true\",\r\n        \"displayOffers\": \"true\",\r\n        \"displayEdrs\": \"true\",\r\n        \"displayProvider\": \"true\",\r\n        \"displayCfAsXML\": \"true\",\r\n        \"displayPricePlans\": \"true\",\r\n        \"displayDetail\": \"true\",\r\n        \"displayChargesPeriods\": \"true\",\r\n        \"displayFreeTransacInInvoice\": \"false\",\r\n        \"displayBillingCycle\": \"true\",\r\n        \"displayOrders\": \"true\"\r\n    },\r\n    \"bankCoordinates\": {\r\n        \"iban\": \"30004 01234 12345678901 23\",\r\n        \"bic\": \"BNPAFRPPXXX\",\r\n        \"ics\": \"\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/provider",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Provider SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3df8dfa0-5993-480b-9740-ffe9e3a170bf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.provider.code).to.eql(pm.collectionVariables.get(\"testCode\")+\"_PROVIDER\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.provider.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/provider",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Provider INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0750c0a3-789c-40a8-9999-6a6841d319f2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Boolean` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_PROVIDER\",\r\n  \"description\": \"{{testDescription}}\",\r\n    \"enterprise\": \"INVALID\",\r\n    \"rounding\": \"5\",\r\n    \"invoiceConfiguration\": {\r\n      \"displaySubscriptions\": \"true\",\r\n      \"displayServices\": \"true\",\r\n      \"displayOffers\": \"true\",\r\n      \"displayEdrs\": \"true\",\r\n      \"displayProvider\": \"true\",\r\n      \"displayCfAsXML\": \"true\",\r\n      \"displayPricePlans\": \"true\",\r\n      \"displayDetail\": \"true\",\r\n      \"displayChargesPeriods\": \"true\",\r\n      \"displayFreeTransacInInvoice\": \"false\",\r\n      \"displayBillingCycle\": \"true\",\r\n      \"displayOrders\": \"true\"\r\n    },\r\n    \"bankCoordinates\": {\r\n        \"iban\": \"30004 01234 12345678901 23\",\r\n        \"bic\": \"BNPAFRPPXXX\",\r\n        \"ics\": \"\"\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/provider",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Provider INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0dbfac7c-9821-4179-b788-b22509e80f0f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Integer` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_PROVIDER\",\r\n  \"description\": \"{{testDescription}}\",\r\n    \"enterprise\": \"true\",\r\n    \"rounding\": \"INVALID\",\r\n    \"invoiceConfiguration\": {\r\n      \"displaySubscriptions\": \"true\",\r\n      \"displayServices\": \"true\",\r\n      \"displayOffers\": \"true\",\r\n      \"displayEdrs\": \"true\",\r\n      \"displayProvider\": \"true\",\r\n      \"displayCfAsXML\": \"true\",\r\n      \"displayPricePlans\": \"true\",\r\n      \"displayDetail\": \"true\",\r\n      \"displayChargesPeriods\": \"true\",\r\n      \"displayFreeTransacInInvoice\": \"false\",\r\n      \"displayBillingCycle\": \"true\",\r\n      \"displayOrders\": \"true\"\r\n    },\r\n    \"bankCoordinates\": {\r\n        \"iban\": \"30004 01234 12345678901 23\",\r\n        \"bic\": \"BNPAFRPPXXX\",\r\n        \"ics\": \"\"\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/provider",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e3d79552-1770-48d3-b6b5-400be5c57a6e",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "f732fb33-f886-4c6b-acc2-ee060a1ce27c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Role",
							"item": [
								{
									"name": "CreateOrUpdate Role SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9838cfc2-f3d4-44f2-8487-e9f7ceba5e56",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{testCode}}_ROLE\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"permission\": [\r\n        {\r\n            \"permission\": \"cc-module-read\",\r\n            \"name\": \"cc-module-read\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Role SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ff097611-c0a6-4e02-a11b-20e90392d4ce",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal\"+pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.roleDto.name).to.eql(pm.collectionVariables.get(\"testCode\") + \"_ROLE\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.roleDto.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role?roleName={{testCode}}_ROLE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role"
											],
											"query": [
												{
													"key": "roleName",
													"value": "{{testCode}}_ROLE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Role ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "80fac159-8ffb-48b4-ba69-303262d722d0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Role with role name=\"+pm.collectionVariables.get(\"testCode\")+\"_ROLE already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{testCode}}_ROLE\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"permission\": [\r\n        {\r\n            \"permission\": \"cc-module-read\",\r\n            \"name\": \"cc-module-read\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Role ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c34d7f3c-2aeb-4547-8bc4-a6bed372af99",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Role with name=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"permission\": [\r\n        {\r\n            \"permission\": \"cc-module-read\",\r\n            \"name\": \"cc-module-read\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Role SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "54d070bb-2830-45f0-836e-9dd2641c2be9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{testCode}}_ROLE\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Role  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5dd0b8a0-a7df-4ae4-afc3-30f236f8c143",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{testCode}}_ROLE\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Role  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b898278-f257-4916-8caf-1660906d8a2e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal\" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.roleDto.name).to.eql(pm.collectionVariables.get(\"testCode\") + \"_ROLE\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.roleDto.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role?roleName={{testCode}}_ROLE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role"
											],
											"query": [
												{
													"key": "roleName",
													"value": "{{testCode}}_ROLE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Role INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b0bf095-6917-4acb-b0dd-6edf88ed2ce6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize instance of `java.util.ArrayList` out of VALUE_STRING\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{testCode}}_ROLE\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"permission\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Role MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9c88c4ec-b062-4acf-8210-fed69343c31a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: name.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n\t\"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Role ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d8897893-8a6a-4f67-8eec-14f3083792c6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Permission with name=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{testCode}}_ROLE\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"permission\": [\r\n        {\r\n            \"permission\": \"cc-module-read\",\r\n            \"name\": \"NOT_EXIST\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Role  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "892b33e7-59b9-435c-b1a1-fc5d7455a8dd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role/{{testCode}}_ROLE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role",
												"{{testCode}}_ROLE"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Role ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3cf6caf8-d1a9-416c-bb7c-5de1eb7bf5fd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Role with name=\"+pm.collectionVariables.get(\"testCode\")+\"_ROLE does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role/{{testCode}}_ROLE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role",
												"{{testCode}}_ROLE"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Tax",
							"item": [
								{
									"name": "CreateOrUpdate Tax SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d44f2ae-1db9-4e86-9c89-ba91c868bce1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TAX\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"percent\": \"20\",\r\n    \"accountingCode\": null,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"TVA 20%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 20%\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Tax SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15002e9e-ee2d-435e-b618-888171bda646",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal\" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.tax.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_TAX\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.tax.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax?taxCode={{testCode}}_TAX",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax"
											],
											"query": [
												{
													"key": "taxCode",
													"value": "{{testCode}}_TAX"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Tax ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca17aae2-685a-451a-b610-c8da79350f70",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Tax with code=\" + pm.collectionVariables.get(\"testCode\") + \"_TAX already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TAX\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"percent\": \"20\",\r\n    \"accountingCode\": null,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"TVA 20%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 20%\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Tax  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eaa4d0f2-9ad3-451f-9cb8-e6a01dcaf73a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Tax with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"percent\": \"20\",\r\n    \"accountingCode\": null,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"TVA 20%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 20%\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Tax SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f11e29e-7a96-498d-b6b6-83ee26407781",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TAX\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"percent\": \"30\",\r\n    \"accountingCode\": null,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"TVA 30%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 30%\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Tax SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c7d3db35-94e6-4428-9dcb-df64621679b2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TAX\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"percent\": \"30\",\r\n    \"accountingCode\": null,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"TVA 30%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 30%\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Tax   SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87c876c9-3d87-446e-bd37-60185ceb8d08",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal\" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.tax.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_TAX\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.tax.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax?taxCode={{testCode}}_TAX",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax"
											],
											"query": [
												{
													"key": "taxCode",
													"value": "{{testCode}}_TAX"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Tax INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bb7c898c-1c17-4b22-ad7a-dc3136a989a1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.math.BigDecimal` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"percent\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Tax INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15d395e1-e596-4d9e-aeba-8ad9b8bdfea3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Language INVALID is not supported by the provider.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"percent\": \"20\",\r\n    \"accountingCode\": null,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"INVALID\",\r\n            \"description\": \"TVA 20%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 20%\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Tax MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "856b8e8b-7406-4a44-a3be-5df8cd63c471",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: percent.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TAX\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Tax ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "79df9a97-2735-439f-8688-f2ce315a7b73",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"AccountingCode with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TAX\",\r\n    \"description\": \"TVA 20%\",\r\n    \"percent\": \"20\",\r\n    \"accountingCode\": \"NOT_EXIST\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"TVA 20%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 20%\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Tax SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0061bd89-2ed3-4a1b-afda-357d1f472a5c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax/{{testCode}}_TAX",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax",
												"{{testCode}}_TAX"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Tax  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e5887a0f-327a-4b4e-9a19-d1831eb955e0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Tax with code=\"+pm.collectionVariables.get(\"testCode\")+\"_TAX does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax/{{testCode}}_TAX",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax",
												"{{testCode}}_TAX"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Invoice Type",
							"item": [
								{
									"name": "CreateOrUpdate Invoice Type SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "49798b76-c5a2-4c51-9e7b-ec9958e97337",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Invoice Type SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b7d6b58-ed3f-4f61-843e-6b43e62e0beb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal\" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceTypeDto.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_IT\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceTypeDto.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType?invoiceTypeCode={{testCode}}_IT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType"
											],
											"query": [
												{
													"key": "invoiceTypeCode",
													"value": "{{testCode}}_IT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Invoice Type ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3863386a-6aa2-4000-8140-efa4750cf48d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceType with code=\" + pm.collectionVariables.get(\"testCode\") + \"_IT already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice Type ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "699f223c-60aa-4ce3-9d56-234a1fe60937",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceType with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice Type SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bbdc9ff8-aa8d-4055-99da-444dc4764750",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IT\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Type SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1fd90047-be68-4fb7-96e7-cf06b6d0838f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IT\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Invoice Type SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb70b86b-4e3e-46b2-8c8a-3800d3d21738",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal\" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceTypeDto.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_IT\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceTypeDto.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType?invoiceTypeCode={{testCode}}_IT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType"
											],
											"query": [
												{
													"key": "invoiceTypeCode",
													"value": "{{testCode}}_IT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Type INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f35f46ae-04fe-45b7-b36c-a748c1030cfc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `boolean` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Type MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "705b4916-a756-47e8-8f76-f1c62e0d1ffc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Type ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f8804d4-aa66-49d3-8ef9-f05b26648b59",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"EmailTemplate with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false,\r\n    \"mailingType\": \"manual\",\r\n    \"emailTemplateCode\": \"NOT_EXIST\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Type ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5a3c4f62-bca5-4f32-ba65-1ba4f8887c96",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceSequence with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"XX\",\r\n        \"invoiceSequenceCode\": \"NOT_EXIST\"\r\n    },\r\n    \"matchingAuto\": false,\r\n    \"mailingType\": \"XX\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Type ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e1bddfa-862e-41e6-82b9-56b73cef35e2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"OCCTemplate with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"NOT_EXIST\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false,\r\n    \"mailingType\": \"manual\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Type ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ece880c-c1d0-4da5-8924-536daacdd305",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"OCCTemplate with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"NOT_EXIST\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"XX\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false,\r\n    \"mailingType\": \"XX\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Invoice Type SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4878742c-4918-43d6-a710-bed4af5045a1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/{{testCode}}_IT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"{{testCode}}_IT"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Invoice Type ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2cdbfd95-8a2c-405d-8a00-e63f05c186d3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceType with code=\"+pm.collectionVariables.get(\"testCode\")+\"_IT does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/{{testCode}}_IT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"{{testCode}}_IT"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Payments",
					"item": [
						{
							"name": "Credit Category",
							"item": [
								{
									"name": "CreateOrUpdate Credit Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "05623e44-3623-464d-801e-bda184f3deae",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CrCat\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Credit Category  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e004fd64-3551-4e24-a74d-e190ce5c3a0a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.creditCategory.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_CrCat\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.creditCategory.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory?creditCategoryCode={{testCode}}_CrCat",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory"
											],
											"query": [
												{
													"key": "creditCategoryCode",
													"value": "{{testCode}}_CrCat"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Credit Category ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "030dca70-c9c6-46e6-aaf7-c28dbc0cdb8c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CreditCategory with code=\" + pm.collectionVariables.get(\"testCode\") + \"_CrCat already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CrCat\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Credit Category ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd4862da-2ba3-481b-84cc-34fb0b42a138",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CreditCategory with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Credit Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b54d112-03dc-4395-9b74-9e105f96b905",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CrCat\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Credit Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5a08c8a-d39a-4a70-a9e4-5044cb553b05",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CrCat\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Credit Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "df3d81db-21c5-4a39-a868-4796a8284bb2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.creditCategory.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_CrCat\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.creditCategory.description).to.eql(pm.collectionVariables.get(\"testDescription\") + \" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory?creditCategoryCode={{testCode}}_CrCat",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory"
											],
											"query": [
												{
													"key": "creditCategoryCode",
													"value": "{{testCode}}_CrCat"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Credit Category MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dfd5b6ab-8b0c-426c-a9c6-73e8e32e0f4b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Credit Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b25687b-c3f7-4034-a60f-57fe1d5e52de",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory/{{testCode}}_CrCat",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory",
												"{{testCode}}_CrCat"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Credit Category ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75f11056-c3a7-4752-9ef6-591e3f177912",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CreditCategory with code=\" + pm.collectionVariables.get(\"testCode\") + \"_CrCat does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory/{{testCode}}_CrCat",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory",
												"{{testCode}}_CrCat"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "980b271c-6a02-4114-810e-9e438fcd6fa1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "baacdb27-eece-45ba-97be-338e76198a64",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Payment Gateway",
							"item": [
								{
									"name": "CreateOrUpdate Payment Gateway SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "59b4b485-8ae5-45a3-ab3f-811ca7a7f73f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PG\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"sellerCode\": \"CLASSIC\",\r\n    \"scriptInstanceCode\": \"org.meveo.service.script.demo.CustomGatewayPaymentScript\",\r\n    \"type\": \"CUSTOM\",\r\n    \"paymentMethodType\": \"CHECK\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Payment Gateway  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "94353ebb-158e-4841-9110-5e8bfa751e21",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentGateway[0].code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_PG\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentGateway[0].description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway?code={{testCode}}_PG",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway"
											],
											"query": [
												{
													"key": "code",
													"value": "{{testCode}}_PG"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Payment Gateway ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "369bb3f0-2956-4055-a869-0e2b10a1bc93",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"PaymentGateway with code=\" + pm.collectionVariables.get(\"testCode\") + \"_PG already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PG\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"sellerCode\": \"CLASSIC\",\r\n    \"scriptInstanceCode\": \"org.meveo.service.script.demo.CustomGatewayPaymentScript\",\r\n    \"type\": \"CUSTOM\",\r\n    \"paymentMethodType\": \"CHECK\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Payment Gateway ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba78ae78-4f85-4ff7-a503-4e8d2f1ea3f4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"PaymentGateway with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"type\": \"CUSTOM\",\r\n    \"paymentMethodType\": \"CHECK\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Payment Gateway SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa6f24d1-4592-4b2d-952b-b4cde2413219",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PG\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"sellerCode\": \"CLASSIC\",\r\n    \"scriptInstanceCode\": \"org.meveo.service.script.demo.CustomGatewayPaymentScript\",\r\n    \"type\": \"CUSTOM\",\r\n    \"paymentMethodType\": \"CHECK\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Gateway SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c86e9f8-f261-4e54-8f13-e82a14351e05",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PG\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Payment Gateway SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75d42837-0a58-47ec-a9da-74206f636c06",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentGateway[0].code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_PG\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentGateway[0].description).to.eql(pm.collectionVariables.get(\"testDescription\") + \" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway?code={{testCode}}_PG",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway"
											],
											"query": [
												{
													"key": "code",
													"value": "{{testCode}}_PG"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Gateway MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "929705f2-9cd8-41d7-ad27-3e09279916c9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code, type, paymentMethodType, sellerCode.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Gateway INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3eb28081-2fd7-4ba8-8717-8572b47b7c8a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `org.meveo.model.payments.PaymentGatewayTypeEnum` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PG\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"type\": \"INVALID\",\r\n    \"paymentMethodType\": \"CHECK\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Payment Gateway SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "29aed9b9-c787-4c93-a9b6-71f5a32de8b6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway?code={{testCode}}_PG",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway"
											],
											"query": [
												{
													"key": "code",
													"value": "{{testCode}}_PG"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Payment Gateway ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "982707eb-953a-4f98-a54a-6e536a33b7ee",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"PaymentGateway with code=\" + pm.collectionVariables.get(\"testCode\") + \"_PG does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway?code={{testCode}}_PG",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway"
											],
											"query": [
												{
													"key": "code",
													"value": "{{testCode}}_PG"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5e60c822-06ce-4f32-8672-724f5f6d5d07",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "06ae1647-110e-4c4a-9a06-f0f2d2dfb04a",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Payment Schedule Template",
							"item": [
								{
									"name": "CreateOrUpdate Payment Schedule Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c0ce3de-8c9b-42ba-99d3-e8efbf58bd30",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"    pm.globals.set(\"id_PST\", jsonData.message);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Payment Schedule Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8b22fdf7-51be-4f91-926f-40919b732289",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentScheduleTemplateDto.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_PST\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentScheduleTemplateDto.description).to.eql(pm.collectionVariables.get(\"testDescription\"));",
													"});",
													"pm.test(request.name + \" - Id is equal \"+pm.globals.get(\"id_PST\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentScheduleTemplateDto.id+\"\").to.eql(pm.globals.get(\"id_PST\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate?paymentScheduleTemplateCode={{testCode}}_PST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate"
											],
											"query": [
												{
													"key": "paymentScheduleTemplateCode",
													"value": "{{testCode}}_PST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Payment Schedule Template ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb5e326a-bfa0-4096-b596-46ce9aeeaca3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"PaymentScheduleTemplate with code=\" + pm.collectionVariables.get(\"testCode\") + \"_PST already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Payment Schedule Template ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "974f23d8-17bc-4de4-8937-14ef064d9791",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"PaymentScheduleTemplate with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Payment Schedule Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31d10448-d1a3-42f5-8217-75274331178d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PST\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0adf5176-c063-4c61-95fd-d0a32c7bc82d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PST\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Payment Schedule Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e20f6697-da58-447f-82cb-1cd1ce0fb0a1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.collectionVariables.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentScheduleTemplateDto.code).to.eql(pm.collectionVariables.get(\"testCode\") + \"_PST\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.collectionVariables.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentScheduleTemplateDto.description).to.eql(pm.collectionVariables.get(\"testDescription\")+\" updated\");",
													"});",
													"pm.test(request.name + \" - Id is equal \"+pm.globals.get(\"id_PST\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentScheduleTemplateDto.id+\"\").to.eql(pm.globals.get(\"id_PST\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate?paymentScheduleTemplateCode={{testCode}}_PST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate"
											],
											"query": [
												{
													"key": "paymentScheduleTemplateCode",
													"value": "{{testCode}}_PST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "89aab266-d701-4621-a333-42b6ddf64494",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code, calendarCode, serviceTemplateCode, paymentDayInMonth, amount, paymentLabel, advancePaymentInvoiceTypeCode, advancePaymentInvoiceSubCategoryCode, doPayment.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template INVALID_PARAMETER_amount",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c4e65dbe-e79c-4887-9389-768079838400",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Integer` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"INVALID\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template INVALID_PARAMETER_doPayment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b7d303f8-755f-4489-9638-e3f044481d9e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Boolean` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"INVALID\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template INVALID_PARAMETER_generateAdvancePaymentInvoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d6c5401a-d420-465e-9438-bedb6e095ac6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.math.BigDecimal` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"INVALID\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template INVALID_PARAMETER_paymentDateInMonth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d8d50d26-47eb-46de-b6c9-1b7519c768f1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Integer` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"INVALID\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template ENTITY_DOES_NOT_EXIST_advPaymentInvSubCat",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d6223dd-77e9-497f-ba44-9c9fccca0046",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceSubCategory with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"NOT_EXIST\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template ENTITY_DOES_NOT_EXIST_advPaymentInvType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c0293d23-77d2-4345-8c48-b5bcee62083a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceType with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"NOT_EXIST\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template ENTITY_DOES_NOT_EXIST_calendarCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50c55029-8705-4330-b245-5561cb7100ca",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Calendar with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"NOT_EXIST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template ENTITY_DOES_NOT_EXIST_serviceTemplate",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "46ec8e53-f7a5-4c99-b12b-f215a778c3bc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ServiceTemplate with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"NOT_EXIST\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Payment Schedule Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dcaf0025-e9ab-4800-92c9-215c03ef7b35",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate?paymentScheduleTemplateCode={{testCode}}_PST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate"
											],
											"query": [
												{
													"key": "paymentScheduleTemplateCode",
													"value": "{{testCode}}_PST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Payment Schedule Template ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3adc5c5b-0cb8-4aa5-ba3d-0b307c11d5a9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"PaymentScheduleTemplate with code=\" + pm.collectionVariables.get(\"testCode\") + \"_PST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate?paymentScheduleTemplateCode={{testCode}}_PST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate"
											],
											"query": [
												{
													"key": "paymentScheduleTemplateCode",
													"value": "{{testCode}}_PST"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c9f778d8-96ec-434b-a9ca-018fb62067be",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "af05c56d-c244-4533-8ad1-6f0948470977",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Custom",
					"item": [
						{
							"name": "Entity Customization",
							"item": [],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Custom Table",
							"item": [],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "# Portal APIs\r\n\r\nHere are all portal APIs. Are tested the CRUD processes when available as well as exceptions that might occure, to assure that everything works as intended.\r\n\r\n### Typical execution\r\n\r\nThe typical test consists of:\r\n1. A successful createOrUpdate (POST) - remplace with create when createOrUpdate is unavailable\r\n2. A successful read (GET) - check if entity created in point 1 is retreived\r\n3. A failed Create (POST) - due to entity already created\r\n4. A failed update (PUT) - due to a non existant entity\r\n5. A succesfull update (PUT) - update entity created in point 1\r\n6. A succesfull createOrUpdate (POST) - update entity created in point 1 - skip this if createOrUpdate is unavailable\r\n7. A successful read (GET) - check if updated entity from point 5 and 6 have been correctly updated\r\n8. Any extra failed tests such as MISSING_PARAMETER or INVALID_PARAMETER\r\n\r\nPlease ensure that tests are correctly asserted in the Tests tab.\r\n\r\n## Table of portal entities\r\n\r\n| Entity                    | Create | Read | Update | Delete | Other           | Exception Handling |\r\n|---------------------------|--------|------|--------|--------|-----------------|--------------------|\r\n| Access                    |        |      |        |        |                 |                    |\r\n| Account Hierarchy         | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Account Operation         | TODO   | TODO | TODO   | TODO   |                 | TODO               |\r\n| Accouting Code            | OK     | OK   | OK     | OK     |                 |                    |\r\n| Addressbook               |        |      |        |        |                 |                    |\r\n| Audit                     |        |      |        |        |                 |                    |\r\n| Billing Account           | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Billing Run               | OK     | NA   | NA     | NA     | Validate/Cancel | OK                 |\r\n| Billing Cycle             | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Business Account          |        |      |        |        |                 |                    |\r\n| Business Offer Model      |        |      |        |        |                 |                    |\r\n| Business Product Model    |        |      |        |        |                 |                    |\r\n| Business Service Model    |        |      |        |        |                 |                    |\r\n| Calendar                  | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Catalog                   |        |      |        |        |                 |                    |\r\n| Channel                   | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Channel and Segments      |        |      |        |        |                 |                    |\r\n| Charge Template           |        |      |        |        |                 |                    |\r\n| Chart                     |        |      |        |        |                 |                    |\r\n| Communication             |        |      |        |        |                 |                    |\r\n| Configuration             |        |      |        |        |                 |                    |\r\n| Contact                   |        |      |        |        |                 |                    |\r\n| Counter Template          |        |      |        |        |                 |                    |\r\n| CountryIso                | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Country                   |        |      |        |        |                 |                    |\r\n| Credit Category           | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Currency                  |        |      |        |        |                 |                    |\r\n| CurrencyIso               | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Custom Entity Instance    | NOK    | NOK  | TODO   | NOK    |                 | NOK                |\r\n| Custom Field Template     |        |      |        |        |                 |                    |\r\n| Custom Table              | NOK    | NOK  | TODO   | NOK    |                 | NOK                |\r\n| Customer                  | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Customer Account          | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Customer Brand            | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Customer Category         | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| DD Request Lot OP         |        |      |        |        |                 |                    |\r\n| Discount Plan             | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Discount Plan Item        |        |      |        |        |                 |                    |\r\n| Document Sign             |        |      |        |        |                 |                    |\r\n| Dunning Document          |        |      |        |        |                 |                    |\r\n| Email Notification        |        |      |        |        |                 |                    |\r\n| Email Template            |        |      |        |        |                 |                    |\r\n| Entity Customization      | NOK    | NOK  | TODO   | NOK    |                 | NOK                |\r\n| File Format               |        |      |        |        |                 |                    |\r\n| File Format               |        |      |        |        |                 |                    |\r\n| Filter                    |        |      |        |        |                 |                    |\r\n| Generic Workflow          |        |      |        |        |                 |                    |\r\n| Iban                      |        |      |        |        |                 |                    |\r\n| Import Export             |        |      |        |        |                 |                    |\r\n| Invoice                   | OK     | OK   | NA     | NA     | Generate        |                    |\r\n| Invoice Category          | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Invoice Sequence          | OK     | OK   | OK     | NA     |                 | OK                 |\r\n| Invoice SubCategory       | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Invoice Type              | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Invoicing                 |        |      |        |        |                 |                    |\r\n| Job Instance              | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Job Trigger               |        |      |        |        |                 |                    |\r\n| LanguageIso               | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Language                  |        |      |        |        |                 |                    |\r\n| Measurable Quantity       |        |      |        |        |                 |                    |\r\n| Mediation                 |        |      |        |        |                 |                    |\r\n| Metric Configuration      |        |      |        |        |                 |                    |\r\n| Meveo Instance            |        |      |        |        |                 |                    |\r\n| Module                    | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Notification              |        |      |        |        |                 |                    |\r\n| OccTemplate               | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Offer Template            | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Offer Template Category   |        |      |        |        |                 |                    |\r\n| One Shot Charge Template  |        |      |        |        |                 |                    |\r\n| Order                     |        |      |        |        |                 |                    |\r\n| Payment Gateway           | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Payment Method            | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Payment Schedule          | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Payment                   |        |      |        |        |                 |                    |\r\n| PDF Document              |        |      |        |        |                 |                    |\r\n| PdfInvoice                |        |      |        |        |                 |                    |\r\n| Price Plan                | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Provider                  | OK     | OK   | OK     | NA     |                 | OK                 |\r\n| Provider Contact          | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Query                     |        |      |        |        |                 |                    |\r\n| Quote                     |        |      |        |        |                 |                    |\r\n| Rated Transation          |        |      |        |        |                 |                    |\r\n| Tax                       | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Recurring Charge Template | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Refund                    |        |      |        |        |                 |                    |\r\n| Report Extract            |        |      |        |        |                 |                    |\r\n| Revenue Recognition Rules |        |      |        |        |                 |                    |\r\n| Role                      | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Rum Sequence              |        |      |        |        |                 |                    |\r\n| Script Instance           | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Seller                    | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Service Template          | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| SMS Notification          |        |      |        |        |                 |                    |\r\n| Subscription              | OK     | OK   | OK     | OK     | Activate        | OK                 |\r\n| Tax Category              |        |      |        |        |                 |                    |\r\n| Tax Class                 | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Tax Mapping               |        |      |        |        |                 |                    |\r\n| Terminate Reason          | OK     | TODO | TODO   | TODO   |                 | TODO               |\r\n| Timer Entity              |        |      |        |        |                 |                    |\r\n| Title                     | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Triggered Edr             |        |      |        |        |                 |                    |\r\n| Unit of Measure           |        |      |        |        |                 |                    |\r\n| Unitary Custom Table      |        |      |        |        |                 |                    |\r\n| Usage                     |        |      |        |        |                 |                    |\r\n| Usage Charge Template     |        |      |        |        |                 |                    |\r\n| User                      |        |      |        |        |                 |                    |\r\n| User Account              | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| User Hierarchy            |        |      |        |        |                 |                    |\r\n| Wallet                    | OK     | OK   | TODO   | NA     |                 | OK                 |\r\n| WebHook Notification      |        |      |        |        |                 |                    |\r\n| Workflow                  |        |      |        |        |                 |                    |",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f3136b44-e5e6-4cba-898c-463848b6dbf0",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "3f458b0c-a359-42fa-835d-a409f94af890",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Url",
			"item": [
				{
					"name": "Index",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c8b194b2-84ca-46f1-ac55-870dff95f295",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/index.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"index.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/providers/providerSelfDetail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d1befb56-38e1-465d-baeb-107bab50288b",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/providers/providerSelfDetail.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"providers",
								"providerSelfDetail.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "crm/providerContacts/providerContacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0a306756-1fda-4e9a-815d-046988632934",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/crm/providerContacts/providerContacts.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"crm",
								"providerContacts",
								"providerContacts.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/meveoUsers/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0e4cbfcb-d102-4a6f-8144-15617ec9c526",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/meveoUsers/users.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"meveoUsers",
								"users.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/userRoles/userRoles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "49bdb132-e694-49e0-ad53-7b8417a11b86",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/userRoles/userRoles.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"userRoles",
								"userRoles.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/userGroupHierarchy/userGroupHierarchy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2f0e0f8c-dc05-458c-bd55-c49c44a03717",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/userGroupHierarchy/userGroupHierarchy.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"userGroupHierarchy",
								"userGroupHierarchy.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/sellers/sellers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1346a673-fdd5-4616-b12d-f8def9ef1758",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/sellers/sellers.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"sellers",
								"sellers.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/title/titles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9eb7b306-457e-4015-9a1d-293403afbbce",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/title/titles.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"title",
								"titles.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "crm/customerBrands/customerBrands",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "81561fc3-7c51-4c94-b85c-963793bdf653",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/crm/customerBrands/customerBrands.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"crm",
								"customerBrands",
								"customerBrands.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "crm/customerCategories/customerCategories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d7bad72a-2b53-456f-98bf-46299127ecab",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/crm/customerCategories/customerCategories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"crm",
								"customerCategories",
								"customerCategories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/creditCategories/creditCategories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43d3ee72-bf78-4a2c-9711-7ee2f6b9af1c",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/creditCategories/creditCategories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"creditCategories",
								"creditCategories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "payments/occTemplates/occTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e2ee7d3-7f83-419a-9a49-0a109751350e",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/payments/occTemplates/occTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"payments",
								"occTemplates",
								"occTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/tradingLanguages/tradingLanguages",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4846374b-e83b-49f3-8e06-604426004753",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/tradingLanguages/tradingLanguages.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"tradingLanguages",
								"tradingLanguages.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/tradingCurrencies/tradingCurrencies",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e09e657-9808-44f8-868d-32ebb1cd5094",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/tradingCurrencies/tradingCurrencies.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"tradingCurrencies",
								"tradingCurrencies.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/tradingCountries/tradingCountries",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "637f87b7-2c73-425a-af7f-c54ea6d3a40b",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/tradingCountries/tradingCountries.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"tradingCountries",
								"tradingCountries.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/multiLanguageField/multiLanguageFields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e66640a1-f9a8-426a-a0ae-0092b8aa2b25",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/multiLanguageField/multiLanguageFields.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"multiLanguageField",
								"multiLanguageFields.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/communication/emailTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fc1c0100-843b-4739-b337-c158f4f22026",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/communication/emailTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"communication",
								"emailTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/calendars/calendars",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80a00555-c4ab-4a8d-86a1-7d37abd8e1e8",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/calendars/calendars.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"calendars",
								"calendars.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/billingCycles/billingCycles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b0d862c-a489-4dab-b2e3-84f511be80ad",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/billingCycles/billingCycles.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"billingCycles",
								"billingCycles.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/taxes/taxes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "09f264c5-b9f3-4bd3-b375-cb0d4386432b",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/taxes/taxes.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"taxes",
								"taxes.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/invoiceCategories/invoiceCategories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7ce8a253-da3e-46e6-9bf9-c0fd265d65d0",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/invoiceCategories/invoiceCategories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"invoiceCategories",
								"invoiceCategories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/invoiceSubCategories/invoiceSubCategories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bd853266-0c80-4e88-b7e9-2fc802251ebc",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/invoiceSubCategories/invoiceSubCategories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"invoiceSubCategories",
								"invoiceSubCategories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/invoiceTypes/invoiceTypes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c513e3ce-b0ff-41b2-9d0c-37cbb4874463",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/invoiceTypes/invoiceTypes.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"invoiceTypes",
								"invoiceTypes.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/invoiceSequences/invoiceSequences",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bba9a734-7dc4-4982-bf53-4d35bed2a899",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/invoiceSequences/invoiceSequences.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"invoiceSequences",
								"invoiceSequences.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/terminationReason/terminationReasons",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9635af10-e2c8-4def-a375-bfe62705c599",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/terminationReason/terminationReasons.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"terminationReason",
								"terminationReasons.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/channels/channels",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e6a75c9-34d4-460f-8e7a-6037329404a6",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/channels/channels.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"channels",
								"channels.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/offerTemplates/offerTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a9ade89-453c-46ac-ac01-b1aa6d6cd6a2",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/offerTemplates/offerTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"offerTemplates",
								"offerTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/offerTemplateCategories/offerTemplateCategories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "98ffad73-386b-49b0-baa7-6cdca1e4944d",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/offerTemplateCategories/offerTemplateCategories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"offerTemplateCategories",
								"offerTemplateCategories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/serviceTemplates/serviceTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c764aec3-27cf-4172-ac79-bd14833b55fe",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/serviceTemplates/serviceTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"serviceTemplates",
								"serviceTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/chargeTemplates/chargeTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f9720b6-07d3-4b1e-ad58-1ed0e4362408",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/chargeTemplates/chargeTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"chargeTemplates",
								"chargeTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/recurringChargeTemplates/recurringChargeTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3cf2c7b7-7966-41d8-9c19-79117affdbb5",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/recurringChargeTemplates/recurringChargeTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"recurringChargeTemplates",
								"recurringChargeTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/usageChargeTemplates/usageChargeTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f614b4b-962b-48b8-a2a5-61ed1824e450",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/usageChargeTemplates/usageChargeTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"usageChargeTemplates",
								"usageChargeTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/oneShotChargeTemplates/oneShotChargeTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "592fe4a5-9bec-4a38-85d0-146ac5326c12",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/oneShotChargeTemplates/oneShotChargeTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"oneShotChargeTemplates",
								"oneShotChargeTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/counterTemplates/counterTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56532313-82b8-4086-9ecf-c1aa3a07cfac",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/counterTemplates/counterTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"counterTemplates",
								"counterTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/productTemplates/productTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e7e78fd0-24fa-4bf7-80f6-38b49adeb10b",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/productTemplates/productTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"productTemplates",
								"productTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/productChargeTemplates/productChargeTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "11d2ebcd-3495-4261-b03a-61ca470c63b7",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/productChargeTemplates/productChargeTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"productChargeTemplates",
								"productChargeTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/bundleTemplates/bundleTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb9d1241-4505-47a9-a767-4c624d9737c7",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/bundleTemplates/bundleTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"bundleTemplates",
								"bundleTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/triggeredEdrTemplates/triggeredEdrTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4dfeaec3-7cad-4b79-8aa6-5140b3f06527",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/triggeredEdrTemplates/triggeredEdrTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"triggeredEdrTemplates",
								"triggeredEdrTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/walletTemplates/walletTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a66de09a-85f4-4a42-aecd-2dced004217b",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/walletTemplates/walletTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"walletTemplates",
								"walletTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/businessOfferModels/businessOfferModels",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fcf5c70a-6abb-404e-9ee5-151bd2ba80e2",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/businessOfferModels/businessOfferModels.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"businessOfferModels",
								"businessOfferModels.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/businessServiceModels/businessServiceModels",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d33b0dad-baa7-46a3-ae53-6eb928d780da",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/businessServiceModels/businessServiceModels.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"businessServiceModels",
								"businessServiceModels.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/businessProductModels/businessProductModels",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5bbe8d05-414c-4180-a5f3-75f22dc04c3a",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/businessProductModels/businessProductModels.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"businessProductModels",
								"businessProductModels.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/pricePlanMatrixes/pricePlanMatrixes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5ba8f350-6f76-42c5-92fd-19c327a6c024",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/pricePlanMatrixes/pricePlanMatrixes.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"pricePlanMatrixes",
								"pricePlanMatrixes.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/discountPlans/discountPlans",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f48c3495-5e4a-431d-95f9-a47fe2c22feb",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/discountPlans/discountPlans.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"discountPlans",
								"discountPlans.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "crm/customers/customerSearch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "284c7f99-10ea-49cc-9f3d-5fa67e9c911b",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/crm/customers/customerSearch.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"crm",
								"customers",
								"customerSearch.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "crm/customers/customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2855b290-6230-4f2a-9d98-7f4e009e2274",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/crm/customers/customers.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"crm",
								"customers",
								"customers.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "payments/customerAccounts/customerAccounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6b440e8-373a-4a11-ab97-c4fde4733fb1",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/payments/customerAccounts/customerAccounts.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"payments",
								"customerAccounts",
								"customerAccounts.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/billingAccounts/billingAccounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0698737d-ee41-43c0-91ef-a7c73ffe75ac",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/billingAccounts/billingAccounts.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"billingAccounts",
								"billingAccounts.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/userAccounts/userAccounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4944a6c1-b77d-4ef7-ad67-db0aaaf995ce",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/userAccounts/userAccounts.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"userAccounts",
								"userAccounts.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "crm/crmAccounts/crmAccounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9392e509-28bd-4faa-afb1-23f0ff1a2c97",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/crm/crmAccounts/crmAccounts.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"crm",
								"crmAccounts",
								"crmAccounts.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/subscriptions/subscriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "019840a2-ab38-4fbf-9aa9-43381ed9711c",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/subscriptions/subscriptions.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"subscriptions",
								"subscriptions.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "medina/access/access",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2e84bbbc-9ea0-4a18-87a0-7da46fb7d2e8",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/medina/access/access.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"medina",
								"access",
								"access.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "crm/businessAccountModels/businessAccountModels",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "830dbce1-1a3b-4ce8-9b19-803a56051b00",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/crm/businessAccountModels/businessAccountModels.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"crm",
								"businessAccountModels",
								"businessAccountModels.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "quote/quotes/quotes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0f7a8cde-4d77-43f1-a5c2-26e6243d44fd",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/quote/quotes/quotes.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"quote",
								"quotes",
								"quotes.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "order/orders/orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a8070051-aaf3-489b-bab5-9cf3f77d8d7f",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/order/orders/orders.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"order",
								"orders",
								"orders.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "rating/edr/edrList",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a020076-a72e-43fc-b028-30817f7f2939",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/rating/edr/edrList.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"rating",
								"edr",
								"edrList.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "medina/importedFile/importedFiles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a07fdac-e66c-4090-8b4c-b38ff07a6447",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/medina/importedFile/importedFiles.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"medina",
								"importedFile",
								"importedFiles.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/walletOperations/walletOperations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1d7afa80-ca39-4460-9a0d-a5213b375c34",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/walletOperations/walletOperations.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"walletOperations",
								"walletOperations.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/ratedTransactions/ratedTransactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6324f46c-31b2-4df6-b7e2-1c332ad03e38",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/ratedTransactions/ratedTransactions.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"ratedTransactions",
								"ratedTransactions.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/invoicing/billingRuns",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a680c606-8132-4a68-b598-90afa95e909e",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/invoicing/billingRuns.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"invoicing",
								"billingRuns.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/invoicing/recurringInvoicing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aaf5cc3f-5207-4bb6-ae33-3dddb2c17550",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/invoicing/recurringInvoicing.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"invoicing",
								"recurringInvoicing.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/invoicing/exceptionelInvoicing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3f0ac07c-c110-4eaa-ba43-e70ffcc09076",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/invoicing/exceptionelInvoicing.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"invoicing",
								"exceptionelInvoicing.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/invoices/invoices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "effeabd1-7c48-4795-8774-fca234e1bb37",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/invoices/invoices.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"invoices",
								"invoices.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/invoices/createInvoiceDetail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a09037c-5f31-4a72-b4e1-d9e8d01e762b",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/invoices/createInvoiceDetail.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"invoices",
								"createInvoiceDetail.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "payments/dDRequestBuilders/dDRequestBuilders",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f14b7e53-63a1-47c9-a67e-7a33056b0816",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/payments/dDRequestBuilders/dDRequestBuilders.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"payments",
								"dDRequestBuilders",
								"dDRequestBuilders.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "payments/dDRequestBuilders/dDRequestBuilders",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "13d696fd-1c24-4c08-9ae0-e8af74205956",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/payments/dDRequestBuilders/dDRequestBuilders.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"payments",
								"dDRequestBuilders",
								"dDRequestBuilders.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "payments/ddrequestLotOp/ddrequestLotOps",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b335ea24-1c60-40bc-99b3-e887d01b7ae1",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/payments/ddrequestLotOp/ddrequestLotOps.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"payments",
								"ddrequestLotOp",
								"ddrequestLotOps.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "payments/ddrequestLot/ddrequestLots",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "583f53de-73de-48b4-be2e-904a3b71af89",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/payments/ddrequestLot/ddrequestLots.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"payments",
								"ddrequestLot",
								"ddrequestLots.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "payments/paymentGateways/paymentGateways",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "504f7ae6-8f3c-42b8-a856-94ba363f8896",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/payments/paymentGateways/paymentGateways.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"payments",
								"paymentGateways",
								"paymentGateways.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "payments/paymentScheduleTemplates/paymentScheduleTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "de8147c0-7919-4920-9f97-dbc9f673735e",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/payments/paymentScheduleTemplates/paymentScheduleTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"payments",
								"paymentScheduleTemplates",
								"paymentScheduleTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/workflow/genericWorkflows",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ad627485-e454-4abb-8503-daa0acf84583",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/workflow/genericWorkflows.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"workflow",
								"genericWorkflows.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/workflow/workflowInstanceHistories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e2eb540d-851e-4a60-a67f-20efba99fc24",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/workflow/workflowInstanceHistories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"workflow",
								"workflowInstanceHistories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/accountingCodes/accountingCodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "803752ad-c30d-4c96-be8e-05d7927c810c",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/accountingCodes/accountingCodes.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"accountingCodes",
								"accountingCodes.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/generalLedgers/generalLedgers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c38b728-d34f-4258-8c28-e0ee5ff208f4",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/generalLedgers/generalLedgers.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"generalLedgers",
								"generalLedgers.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "finance/revenueRecognitionRules/revenueRecognitionRules",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0ddbb30f-94d4-49ea-bb6e-bd842703e5ba",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/finance/revenueRecognitionRules/revenueRecognitionRules.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"finance",
								"revenueRecognitionRules",
								"revenueRecognitionRules.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "finance/revenueSchedules/revenueSchedules",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5a313322-d08d-4251-9bf6-7d00d391cab5",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/finance/revenueSchedules/revenueSchedules.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"finance",
								"revenueSchedules",
								"revenueSchedules.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "finance/reportExtracts/reportExtracts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "820479d1-f201-4935-b69e-089094231e4c",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/finance/reportExtracts/reportExtracts.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"finance",
								"reportExtracts",
								"reportExtracts.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "finance/reportExtractHistories/reportExtractHistories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f89bf308-bcc2-47b7-91da-215cc3e576ca",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/finance/reportExtractHistories/reportExtractHistories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"finance",
								"reportExtractHistories",
								"reportExtractHistories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "finance/accountingWriting/accountingWritings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3b6159c0-86ee-4dd0-888a-dfbb4ac821a6",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/finance/accountingWriting/accountingWritings.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"finance",
								"accountingWriting",
								"accountingWritings.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "reporting/dwh/measurableQuantities",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bb93edc2-c813-4e3a-9c23-d6de3a821736",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/reporting/dwh/measurableQuantities.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"reporting",
								"dwh",
								"measurableQuantities.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "reporting/dwh/measuredValueDetail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "944669db-efe3-4e28-a60b-99881d3230c8",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/reporting/dwh/measuredValueDetail.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"reporting",
								"dwh",
								"measuredValueDetail.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "reporting/dwh/charts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "def1c883-6366-4fe2-9b27-bddd54a26b00",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/reporting/dwh/charts.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"reporting",
								"dwh",
								"charts.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/job/jobInstances",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "14321906-aaf5-4adf-81b8-72f1708ebc3d",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/job/jobInstances.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"job",
								"jobInstances.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/job/timerEntities",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2b87d367-3eb3-4141-9c83-b1e3cc79e8ac",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/job/timerEntities.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"job",
								"timerEntities.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/meveoInstance/meveoInstances",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5fbf49da-a170-47db-a329-552a58f80e42",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/meveoInstance/meveoInstances.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"meveoInstance",
								"meveoInstances.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/module/modules",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a45adec-be38-4f4e-af95-bbf531dab382",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/module/modules.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"module",
								"modules.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/customEntities/customizedEntities",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "07d082d5-a675-443e-bdba-aaa2c3dd6272",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/customEntities/customizedEntities.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"customEntities",
								"customizedEntities.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/scriptInstanceCategories/scriptInstanceCategories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a1b6618-efa8-47a6-bd37-fa727f1f400b",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/scriptInstanceCategories/scriptInstanceCategories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"scriptInstanceCategories",
								"scriptInstanceCategories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/scriptInstances/scriptInstances",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5b6b4a3-bb87-4528-af57-7fc3514c04d6",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/scriptInstances/scriptInstances.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"scriptInstances",
								"scriptInstances.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/filters/filters/filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b89ce76c-aed3-40d4-8e72-bf9b91a98302",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/filters/filters/filters.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"filters",
								"filters",
								"filters.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "notification/notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2f8af90-135d-40f9-b551-66700c409d89",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/notification/notifications.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"notification",
								"notifications.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "notification/webHooks",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e6dafdd-3c4b-4c0e-9a7a-194b82beb02c",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/notification/webHooks.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"notification",
								"webHooks.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "notification/emailNotifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2bc1030-b5ab-4892-89bd-4e31ece1c46d",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/notification/emailNotifications.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"notification",
								"emailNotifications.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "notification/jobTriggers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "abbdda7a-9b6f-445d-97b4-abc66700a927",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/notification/jobTriggers.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"notification",
								"jobTriggers.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "notification/notificationHistories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6c5a1f6-9b0b-4f48-a058-443a68c92de1",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/notification/notificationHistories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"notification",
								"notificationHistories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "notification/inboundRequests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "62104777-80d7-4419-8ee9-08c76edd7564",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/notification/inboundRequests.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"notification",
								"inboundRequests.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/export/import",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5cb5b2a-53b9-472d-95dc-d857b9881096",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/export/import.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"export",
								"import.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/export/export",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "326370a6-fd50-4893-a66c-c10a7cb02898",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/export/export.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"export",
								"export.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/auditLogs/auditConfiguration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e5f1323-ca51-4197-a6d2-4e1be33be896",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/auditLogs/auditConfiguration.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"auditLogs",
								"auditConfiguration.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/auditLogs/auditLogs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9e82a697-f607-4216-b839-c778f13e0cac",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/auditLogs/auditLogs.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"auditLogs",
								"auditLogs.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "reporting/cache/caches",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f30d5b0-ff0d-42fe-88df-64fac2793428",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/reporting/cache/caches.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"reporting",
								"cache",
								"caches.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "index/fullTextSearch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "088ed431-a867-492a-8fce-07fbc3e85280",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/index/fullTextSearch.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"index",
								"fullTextSearch.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "index/index",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9247c3c3-abd2-4779-991b-c81c9d666e63",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/index/index.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"index",
								"index.jsf"
							]
						}
					},
					"response": []
				}
			],
			"description": "This will run a GET on the admin pages and check if a proper status 200 is returned. ",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "aaea38f0-5309-4e5d-9c82-ef9bc90aa40d",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b75af091-726b-46a2-a9be-034012c807b1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Scenarios",
			"item": [
				{
					"name": "Setup Base Data",
					"item": [
						{
							"name": "Cleanup data - clear customizations",
							"item": [
								{
									"name": "Clear Seller Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1128bdf-3779-4555-aed7-7a846fbcc8df",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.admin.Seller\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Customer Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee237335-150f-46ec-8a0c-8c6fcfd78fc6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.crm.Customer\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Customer Account Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0b4d30ba-45f0-44a6-8497-ab0b41988a16",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.payments.CustomerAccount\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Billing Account Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "51034b17-19e5-4c03-9652-ad0354dfa457",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.BillingAccount\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear User Account Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "717b5ea6-51c9-4371-9a5d-d646e6627e02",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.UserAccount\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Subscription Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "080d01ca-1429-49f7-8fa4-8651d84ac3e7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.Subscription\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Access Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "53198347-67c4-4eb1-a664-f4c53790f403",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.mediation.Access\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Provider Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "756fb5f0-17b0-40ee-9102-1f2c460bef28",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.crm.Provider\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Product Template Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5b8b16df-8358-4096-b3d5-176c14d60062",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.catalog.ProductTemplate\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Product Instance Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c5594b2-9361-42b4-8d8f-9e1697120afa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.ProductInstance\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Service Template Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e886166-096a-49a2-a007-614e1d623d2a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.catalog.ServiceTemplate\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Offer Template  Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "683d7163-e654-4f4a-96c4-4db5ac6c5f01",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.catalog.OfferTemplate\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Charge Template  Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ff1788d-4b59-452b-95d2-02df0fc52a46",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.catalog.ChargeTemplate\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Price Plan Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e0a2fb7d-2e24-4dd5-9407-3a703a7d45d1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.catalog.PricePlanMatrix\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Invoice Category Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f540bbc8-0467-403a-844e-87f8b2361758",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.InvoiceCategory\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Invoice SubCategory Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "06f1b858-68c5-4960-a159-8707d5b47f15",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.payments.AccountOperation\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Account Operation Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4fd43c15-5a88-4273-9f1d-543557fae494",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.InvoiceSubCategory\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Invoice Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8bbb6899-238f-45cf-a5de-0a2c2016e061",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.Invoice\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Tax Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e89398b4-7136-4acf-a295-895ccdec2e31",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.Tax\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Billing Cycle Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "69aae5ff-7f9b-4b8a-bebd-20c3b92c79f6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.BillingCycle\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Purge Job Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "17dcac28-c4ec-4c84-876b-79d357830e00",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.admin.job.PurgeJob\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Clean up data - restore provider and configuration",
							"item": [
								{
									"name": "Update provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "539ace4a-da50-45d1-90e9-eff948d12e61",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"demo\",\r\n    \"currency\": \"AFA\",\r\n    \"country\": \"AD\",\r\n    \"language\": \"DEU\",\r\n    \"multiCurrency\": \"true\",\r\n    \"multiCountry\": \"true\",\r\n    \"multiLanguage\": \"true\",\r\n    \"enterprise\": \"true\",\r\n    \"levelDuplication\": \"false\",\r\n    \"rounding\": \"8\",\r\n    \"invoiceRounding\": \"2\",\r\n    \"prepaidReservationExpirationDelayinMillisec\": \"60000\",\r\n    \"bankCoordinates\": {\r\n        \"bankCode\": \"SGMB\",\r\n        \"branchCode\": \"12345\",\r\n        \"accountNumber\": \"33333333333\",\r\n        \"key\": \"11\",\r\n        \"iban\": \"11\",\r\n        \"bic\": \"11\",\r\n        \"accountOwner\": \"owner\",\r\n        \"bankName\": \"SGMB\",\r\n        \"bankId\": \"11\",\r\n        \"issuerNumber\": \"1111\",\r\n        \"issuerName\": \"DEMO\"\r\n    },\r\n    \"recognizeRevenue\": \"false\",\r\n    \"invoiceConfiguration\": {\r\n        \"displaySubscriptions\": \"true\",\r\n        \"displayServices\": \"true\",\r\n        \"displayOffers\": \"true\",\r\n        \"displayEdrs\": \"false\",\r\n        \"displayProvider\": \"false\",\r\n        \"displayCfAsXML\": \"false\",\r\n        \"displayPricePlans\": \"false\",\r\n        \"displayDetail\": \"true\",\r\n        \"displayBillingCycle\": \"false\",\r\n        \"displayFreeTransacInInvoice\": \"true\",\r\n        \"displayOrders\": \"false\",\r\n        \"displayWalletOperations\": \"false\"\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/provider",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set securedEntities=false - AUTHORIZATION_SUPERADMIN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f61baf18-cedc-4834-a102-2eac75537096",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.superpassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.superusername}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"properties\": [\n        {\n            \"key\": \"secured.entities.enabled\",\n            \"value\": \"false\"\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/configurations/properties",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"configurations",
												"properties"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set service.allowMultiInstantiation=false - AUTHORIZATION_SUPERADMIN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "924e13c9-6e89-4e43-aa09-5782305c9888",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.superpassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.superusername}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"properties\": [\n        {\n            \"key\": \"service.allowMultiInstantiation\",\n            \"value\": \"false\"\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/configurations/properties",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"configurations",
												"properties"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Clean up data - user and ES",
							"item": [
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1268ba1c-f34a-4f92-8ae4-15effcefbbcf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"{{opencell.username}}\",\r\n    \"password\": \"{{opencell.password}}\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\"administrateur\"],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clean and reindex Full text - AUTHORIZATION_SUPERADMIN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa4ac10b-4675-4fc3-b8c1-44b7df6ccdcf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.superpassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.superusername}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuc3VwZXJhZG1pbjpvcGVuY2VsbC5zdXBlcmFkbWlu"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filteredList/reindex",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filteredList",
												"reindex"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Setup Configuration: InvType, BC and Seller",
							"item": [
								{
									"name": "Create InvoiceType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "57cadff6-fa0b-4512-9f9b-201f7e0021d2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_TEST-Type\",\r\n\t\"description\": \"Invoice Test Type\",\r\n\t\"occTemplateCode\": \"INV_STD\",\r\n\t\"sequenceDto\": {\r\n\t\t\"prefixEL\": \"Fact_\",\r\n\t\t\"sequenceSize\": \"9\"\r\n\t},\r\n\t\"matchingAuto\": \"false\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create BillingCycle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2685609-a7d5-425b-bffe-9fcd9d5929a6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"CYC_INV_MT_1\",\r\n\t\"description\": \"Monthly Invoice Cycle 1\",\r\n\t\"transactionDateDelay\": \"0\",\r\n\t\"invoiceDateProductionDelay\": \"0\",\r\n\t\"dueDateDelay\": \"2\",\r\n\t\"invoiceDateDelay\": \"4\",\r\n\t\"calendar\": \"MONTHLY\",\r\n\t\"invoiceTypeCode\": \"{{baseEntityPrefix}}_TEST-Type\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create BillingCycle 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88507b06-1092-4e0b-a7f7-2fe3a55cfd84",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"CYC_INV_MT_3\",\r\n\t\"description\": \"Monthly Invoice Cycle 3\",\r\n\t\"transactionDateDelay\": \"0\",\r\n\t\"invoiceDateProductionDelay\": \"0\",\r\n\t\"dueDateDelay\": \"2\",\r\n\t\"invoiceDateDelay\": \"4\",\r\n\t\"calendar\": \"MONTHLY\",\r\n\t\"dueDateDelayEL\": \"#{ba.id + invoice.billingAccount.id}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Seller",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e59189b-3f3e-449e-a37a-5f7ffeb8ab27",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "    {\r\n    \t\"code\": \"SELLER_FR\",\r\n    \t\"description\": \"France Seller\",\r\n    \t\"currencyCode\": \"EUR\",\r\n    \t\"languageCode\": \"FRA\",\r\n    \t\"parentSeller\": \"MAIN_SELLER\",\r\n    \t\"invoiceTypeSequences\": {\r\n    \t\t\"{{baseEntityPrefix}}_TEST-Type\": {\r\n    \t\t\t\"prefixEL\": \"SellFact_\",\r\n    \t\t\t\"sequenceSize\": 9,\r\n    \t\t\t\"currentInvoiceNb\": 9\r\n    \t\t}\r\n    \t}\r\n    }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update InvoiceType COM Sequence",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef1411bd-137d-4579-998c-4e49d799a325",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"COM\",\n    \"occTemplateCode\": \"INV_STD\",\n    \"sequenceDto\": {\n        \"prefixEL\": \"COM_\",\n        \"sequenceSize\": \"9\"\n    },\n    \"matchingAuto\": \"false\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Setup Catalog: Charges, Services, Offer, PP, Counters, Wallets",
							"item": [
								{
									"name": "Create Tax Class 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec6a67a2-532a-4c26-9c3c-f3260124b275",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_taxClass\",\r\n    \"description\": \"Tax class for {{baseEntityPrefix}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Tax Class 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "677b2a08-c795-42b9-b719-dba44e494999",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_taxClass2\",\r\n    \"description\": \"Tax class for {{baseEntityPrefix}} 2\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Tax Mapping",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3492ee2f-c350-4f02-9117-1565b78ed88b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"accountTaxCategoryCode\": \"Tax category\",\r\n    \"chargeTaxClassCode\": \"{{baseEntityPrefix}}_taxClass\",\r\n    \"taxCode\": \"TAX_18\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxMapping/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxMapping",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Tax Category 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a468fd9c-ce6b-4b47-a808-e1ebc8acf336",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\":\"{{baseEntityPrefix}}_taxCategory2\",\r\n\t\"description\":\"Tax category 2\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create PrepaidWallet",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c6ca9f85-550f-4b3c-b053-4fdeed6f6d37",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_PPW1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_PrepaidPWallet_Description\",\r\n\t\"walletType\": \"PREPAID\",\r\n\t\"consumptionAlertSet\": \"false\",\r\n\t\"fastRatingLevel\": \"1\",\r\n\t\"lowBalanceLevel\": \"2\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/wallet/template/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"wallet",
												"template",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Counter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7274a2fa-2f1f-461c-978b-53a47d5d52e0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_CT1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_CounterTemplate_Description\",\r\n\t\"calendar\": \"MONTHLY\",\r\n\t\"unity\": \"Quantity\",\r\n\t\"type\": \"USAGE\",\r\n\t\"ceiling\": \"1\",\r\n\t\"disabled\": \"false\",\r\n\t\"counterLevel\": \"BA\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/counterTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"counterTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create TriggeredEDR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ab43171-b36c-44c0-a35e-a1ac5b4ebe93",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_EDR1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_Triggered_EDR_DESC\",\r\n\t\"quantityEl\": \"#{op.amountWithoutTax}\",\r\n\t\"param1El\": \"#{edr.parameter1}\",\r\n\t\"param2El\": \"#{edr.parameter2}\",\r\n\t\"param3El\": \"#{edr.parameter3}\",\r\n\t\"param4El\": \"#{edr.parameter4}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/triggeredEdr/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"triggeredEdr",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Recurring",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7086d838-6415-4e86-90f3-a6fbcedb588f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_REC1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_REC1\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"true\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"calendar\": \"MONTHLY\",\r\n\t\"subscriptionProrata\": \"true\",\r\n\t\"terminationProrata\": \"true\",\r\n\t\"applyInAdvance\": \"true\",\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"1\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"durationTermInMonth\": \"4\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n\t\"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create OneShot - Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b6b63dd-721f-4b4a-9ae6-733f52d6d632",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_OS1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_OS1\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"true\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"1\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"oneShotChargeTemplateType\": \"SUBSCRIPTION\",\r\n\t\"immediateInvoicing\": \"false\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"oneShotChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create OneShot - Termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22a7fd6b-6075-4b09-b13e-757be75cb7b8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_OST1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_OST1\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"false\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Termination Test\"\r\n\t\t}\r\n\t],\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"1\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"oneShotChargeTemplateType\": \"TERMINATION\",\r\n\t\"immediateInvoicing\": \"false\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"oneShotChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create OneShot - Other",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a6224d6-317d-4238-a9c3-322985c94834",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OS_OTHER\",\r\n    \"description\": \"{{baseEntityPrefix}}_OS_OTHER\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": \"false\",\r\n    \"amountEditable\": \"true\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}s-Forfait Test\"\r\n        }\r\n    ],\r\n    \"inputUnitDescription\": \"1\",\r\n    \"ratingUnitDescription\": \"1\",\r\n    \"unitMultiplicator\": \"1\",\r\n    \"unitNbDecimal\": \"2\",\r\n    \"oneShotChargeTemplateType\": \"OTHER\",\r\n    \"immediateInvoicing\": \"false\",\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"oneShotChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Usage 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c0daae9-4fd4-4848-9191-40a2716c63e6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"false\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"Unit\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"filterParam1\": \"USAGE\",\r\n\t\"priority\": \"1\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"filterExpression\": \"#{ci.chargeTemplate.code.equals('{{baseEntityPrefix}}_USAGE1')}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"usageChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Service 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e5273675-1615-40e8-83b1-44f30b28bcbf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n\t\"invoicingCalendar\": \"MONTHLY\",\r\n\t\"serviceChargeTemplateRecurrings\": {\r\n\t\t\"serviceChargeTemplateRecurring\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_REC1\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"serviceChargeTemplateSubscriptions\": {\r\n\t\t\"serviceChargeTemplateSubscription\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_OS1\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"serviceChargeTemplateTerminations\": {\r\n\t\t\"serviceChargeTemplateTermination\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_OST1\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"serviceChargeTemplateUsages\": {\r\n\t\t\"serviceChargeTemplateUsage\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_USAGE1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Service 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e5825dcc-7ba4-4bfe-addf-664f751230f9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\n    \"description\": \"{{baseEntityPrefix}}_SERVICE2\",\n    \"invoicingCalendar\": \"MONTHLY\",\n    \"serviceChargeTemplateRecurrings\": {\n        \"serviceChargeTemplateRecurring\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_REC1\"\n            }\n        ]\n    },\n    \"serviceChargeTemplateUsages\": {\n        \"serviceChargeTemplateUsage\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_USAGE1\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Product Charge 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dc71cbcc-348d-4447-a14f-cc60cc592929",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_PC1\",\r\n    \"description\": \"{{baseEntityPrefix}}_PC1\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": \"false\",\r\n    \"amountEditable\": \"false\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}-Produit Test\"\r\n        }\r\n    ],\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n    \"triggeredEdrs\": {\r\n        \"triggeredEdr\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalogManagement/productChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalogManagement",
												"productChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Product Charge 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58e22b20-37d7-4f17-8944-c4d07ac0b725",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_PC2\",\r\n    \"description\": \"{{baseEntityPrefix}}_PC2\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": \"false\",\r\n    \"amountEditable\": \"false\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}-Produit 2 Test\"\r\n        }\r\n    ],\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalogManagement/productChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalogManagement",
												"productChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Product 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "43fd7bca-d8fa-466b-b143-4af5cd335fe9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_PRODUCT1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_PRODUCT1 DESC\",\r\n\t\"name\": \"{{baseEntityPrefix}}_PRODUCT1 NAME\",\r\n\t\"productChargeTemplate\": [\r\n\t\t{\r\n\t\t\t\"code\": \"{{baseEntityPrefix}}_PC1\",\r\n\t\t\t\"disabled\": \"false\"\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalogManagement/productTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalogManagement",
												"productTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Product 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a61ed341-a08f-4c84-b16c-a51a63591c23",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_PRODUCT2\",\r\n\t\"description\": \"{{baseEntityPrefix}}_PRODUCT2 DESC\",\r\n\t\"name\": \"{{baseEntityPrefix}}_PRODUCT1 NAME\",\r\n\t\"productChargeTemplate\": [\r\n        {\r\n\t\t\t\"code\": \"{{baseEntityPrefix}}_PC2\",\r\n\t\t\t\"disabled\": \"false\"\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalogManagement/productTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalogManagement",
												"productTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Offer 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42ad5af5-24f8-4f5c-aad7-a3530f34e0cc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"description\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"name\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"disabled\": \"false\",\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\"\r\n            }\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\"\r\n            }\r\n        }\r\n    ],\r\n    \"offerProductTemplate\": [\r\n        {\r\n            \"productTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_PRODUCT1\"\r\n            }\r\n        }\r\n    ],\r\n    \"lifeCycleStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ScriptInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "be0c6f92-3c43-4237-81d5-81b450a13c5c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"org.meveo.service.script.rating.RatingScript\",\n    \"description\": \"rating script\",\n    \"type\": \"JAVA\",\n    \"script\": \"package org.meveo.service.script.rating;\\r\\n\\r\\nimport java.math.BigDecimal;\\r\\nimport java.util.Map;\\r\\nimport org.meveo.admin.exception.BusinessException;\\r\\nimport org.meveo.model.admin.User;\\r\\nimport org.meveo.model.billing.WalletOperation;\\r\\nimport org.meveo.service.script.Script;\\r\\nimport org.slf4j.Logger;\\r\\nimport org.slf4j.LoggerFactory;\\r\\n\\r\\npublic class RatingScript extends Script {\\r\\n\\r\\n    private static final Logger log = LoggerFactory.getLogger(RatingScript.class);\\r\\n\\r\\n    public void execute(Map<String, Object> context) throws BusinessException {\\r\\n        log.debug(\\\"Rating script creation script...\\\");\\r\\n        // DO not change any amount, as it is untestable\\r\\n        //WalletOperation op = (WalletOperation) context.get(Script.CONTEXT_ENTITY);\\r\\n        //op.setAmountWithoutTax(op.getAmountTax().add(BigDecimal.ONE));\\r\\n    }\\r\\n}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan  Recurring",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cddd249e-574c-4dc0-a1c0-e719a4792072",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_REC1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_REC1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_REC1\",\r\n\t\"amountWithoutTax\": \"10\",\r\n\t\"amountWithTax\": \"12\",\r\n\t\"scriptInstance\": \"org.meveo.service.script.rating.RatingScript\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan OneShot - Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e0fec43-31ce-4937-8f7f-42a2c9c2c7e3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_OS1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_OS1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_OS1\",\r\n\t\"amountWithoutTax\": \"11\",\r\n\t\"amountWithTax\": \"15\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan OneShot - Termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aacb97d9-dbba-476c-ba5e-064741ce9eff",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_OST1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_OST1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_OST1\",\r\n\t\"amountWithoutTax\": \"21\",\r\n\t\"amountWithTax\": \"25\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan OneShot - Other",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7ce2af0c-424c-4a05-b13b-d24f868b3d3f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_OS_OTHER\",\r\n\t\"description\": \"{{baseEntityPrefix}}_OS_OTHER\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_OS_OTHER\",\r\n\t\"amountWithoutTax\": \"11\",\r\n\t\"amountWithTax\": \"15\",\r\n\t\"priority\": \"1\",\r\n\t\"woDescriptionEL\": \"#{\\\"Special \\\".concat(op.description)}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan Usage 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6df3c142-dcf1-45ba-a3ce-07cba6a43324",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"amountWithoutTax\": \"9\",\r\n\t\"amountWithTax\": \"14\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan Product 1 in Offer 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60205eaa-f194-409c-8fc3-ec157724a27e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_PC1_PP2\",\r\n\t\"description\": \"price plan product 1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_PC1\",\r\n\t\"amountWithoutTax\": \"0.5\",\r\n\t\"amountWithTax\": \"0.6\",\r\n\t\"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan Product 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95cca3c2-0743-4316-a753-8cd433bba3fb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_PC1_PP\",\r\n\t\"description\": \"price plan product 1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_PC1\",\r\n\t\"amountWithoutTax\": \"1\",\r\n\t\"amountWithTax\": \"1.2\",\r\n\t\"priority\": \"2\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan Product 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c4b4a4e3-ca7a-4622-8141-56608af36aab",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_PC2_PP\",\r\n\t\"description\": \"price plan product 1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_PC2\",\r\n\t\"amountWithoutTax\": \"5\",\r\n\t\"amountWithTax\": \"6\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Reccuring 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dad0537d-36fc-46b3-a54d-dba9aa3a6d7e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_REC2\",\r\n\t\"description\": \"{{baseEntityPrefix}}_REC2\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"false\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"calendar\": \"MONTHLY\",\r\n\t\"subscriptionProrata\": \"true\",\r\n\t\"terminationProrata\": \"true\",\r\n\t\"applyInAdvance\": \"true\",\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"1\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"durationTermInMonth\": \"4\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Recurring 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "487cdafd-a079-4e63-a9aa-194a47e8735c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_REC3\",\r\n\t\"description\": \"{{baseEntityPrefix}}_REC3\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"false\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"calendar\": \"MONTHLY\",\r\n\t\"subscriptionProrata\": \"true\",\r\n\t\"terminationProrata\": \"true\",\r\n\t\"applyInAdvance\": \"true\",\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"1\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"durationTermInMonth\": \"4\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create OneShot 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8a1fbeb2-e10e-4d48-aecd-64edf8aa34db",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OS2\",\r\n    \"description\": \"{{baseEntityPrefix}}_OS2\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": \"false\",\r\n    \"amountEditable\": \"false\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n        }\r\n    ],\r\n    \"inputUnitDescription\": \"1\",\r\n    \"ratingUnitDescription\": \"1\",\r\n    \"unitMultiplicator\": \"1\",\r\n    \"unitNbDecimal\": \"2\",\r\n    \"oneShotChargeTemplateType\": \"SUBSCRIPTION\",\r\n    \"immediateInvoicing\": \"false\",\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n    \"triggeredEdrs\": {\r\n        \"triggeredEdr\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"oneShotChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create OneShot 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d4b7936d-f9bf-4e28-85cb-ac4f2aaaee88",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OS3\",\r\n    \"description\": \"{{baseEntityPrefix}}_OS3\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": \"false\",\r\n    \"amountEditable\": \"false\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n        }\r\n    ],\r\n    \"inputUnitDescription\": \"1\",\r\n    \"ratingUnitDescription\": \"1\",\r\n    \"unitMultiplicator\": \"1\",\r\n    \"unitNbDecimal\": \"2\",\r\n    \"oneShotChargeTemplateType\": \"SUBSCRIPTION\",\r\n    \"immediateInvoicing\": \"false\",\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n    \"triggeredEdrs\": {\r\n        \"triggeredEdr\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"oneShotChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Usage 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e08dfb7a-a414-41cf-8fb9-1d4fc371c5d6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE2\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE2\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"false\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"Unit\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"filterParam1\": \"USAGE\",\r\n\t\"priority\": \"1\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n} ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"usageChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Usage 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "356effa9-105c-4be8-8147-c481e8b00aec",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE3\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE3\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"false\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"Unit\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"filterParam1\": \"USAGE3\",\r\n\t\"priority\": \"2\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"filterExpression\": \"#{ci.chargeTemplate.code.equals('NO_MATCH')}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"usageChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Service 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "11071c11-122d-42a7-8d15-5aca34b17426",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_SERVICE3\",\r\n\t\"description\": \"{{baseEntityPrefix}}_SERVICE3\",\r\n\t\"invoicingCalendar\": \"MONTHLY\",\r\n\t\"serviceChargeTemplateRecurrings\": {\r\n\t\t\"serviceChargeTemplateRecurring\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_REC3\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"serviceChargeTemplateSubscriptions\": {\r\n\t\t\"serviceChargeTemplateSubscription\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_OS3\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"serviceChargeTemplateUsages\": {\r\n\t\t\"serviceChargeTemplateUsage\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\t\t\t\"counterTemplate\": \"{{baseEntityPrefix}}_CT1\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_USAGE3\",\r\n\t\t\t\t\"counterTemplate\": \"{{baseEntityPrefix}}_CT1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Service 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cfad0450-3d2e-4a59-82e8-ac41726c0656",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_SERVICE4\",\r\n\t\"description\": \"{{baseEntityPrefix}}_SERVICE4\",\r\n\t\"invoicingCalendar\": \"MONTHLY\",\r\n\t\"serviceChargeTemplateUsages\": {\r\n\t\t\"serviceChargeTemplateUsage\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\t\t\t\"counterTemplate\": \"{{baseEntityPrefix}}_CT1\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_USAGE3\",\r\n\t\t\t\t\"counterTemplate\": \"{{baseEntityPrefix}}_CT1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Offer 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "333946bc-43d4-44dc-9156-65fae5492222",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OFFER2\",\r\n    \"description\": \"{{baseEntityPrefix}}_OFFER2\",\r\n    \"name\": \"{{baseEntityPrefix}}_OFFER2\",\r\n    \"disabled\": \"false\",\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\"\r\n            }\r\n        \r\n        }\r\n    ],\r\n    \"lifeCycleStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Offer 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d31b6ea-7aef-4b71-88b0-00029d4bd886",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OFFER3\",\r\n    \"description\": \"{{baseEntityPrefix}}_OFFER3\",\r\n    \"name\": \"{{baseEntityPrefix}}_OFFER3\",\r\n    \"disabled\": \"false\",\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\"\r\n            }\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE4\"\r\n            }\r\n        }\r\n    ],\r\n    \"lifeCycleStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan Usage 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98a32bf9-0baa-432b-81fc-70ec786445cd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE2\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_USAGE2\",\r\n\t\"amountWithoutTax\": \"1\",\r\n\t\"amountWithTax\": \"1.2\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan  Usage 1 in Offer 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bb8daa31-7576-4f38-8f26-aa117add33c1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE1_OF2\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"offerTemplate\": \"{{baseEntityPrefix}}_OFFER2\",\r\n\t\"amountWithoutTax\": \"0\",\r\n\t\"amountWithTax\": \"0\",\r\n\t\"priority\": \"0\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan OneShot OS3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8e4ef4-f5f8-4f3d-9909-8e39bd8ff78d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_OS3\",\r\n\t\"description\": \"{{baseEntityPrefix}}_OS3\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_OS3\",\r\n\t\"amountWithoutTax\": \"11\",\r\n\t\"amountWithTax\": \"15\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan Recurring 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "191476e6-4ce0-4cb4-9f41-e6c1e4e63987",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_REC3\",\r\n\t\"description\": \"{{baseEntityPrefix}}_REC3\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_REC3\",\r\n\t\"amountWithoutTax\": \"10\",\r\n\t\"amountWithTax\": \"12\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan usage 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "14f38667-3e60-4853-b4d3-5ca2a120956d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE3_OF2\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE3_OF2\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_USAGE3\",\r\n\t\"offerTemplate\": \"{{baseEntityPrefix}}_OFFER2\",\r\n\t\"amountWithoutTax\": \"1\",\r\n\t\"amountWithTax\": \"1.2\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Bundle 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "146944a3-6942-40d7-8246-137c788a627b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_BUNDLE1\",\r\n    \"description\": \"Bundle 1\",\r\n    \"productChargeTemplates\": {\r\n        \"productChargeTemplate\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_PC2\"\r\n            }\r\n        ]\r\n    },\r\n    \"bundleProducts\": {\r\n        \"bundleProduct\": {\r\n            \"productTemplate\": [\r\n                {\r\n                    \"code\": \"{{baseEntityPrefix}}_PRODUCT1\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/bundleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"bundleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create channel - WEB",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5119d5a6-7418-476c-9037-0af867bc2200",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_CHANNEL_WEB\",\r\n\t\"description\": \"{{baseEntityPrefix}}_CHANNEL_WEB\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create channel - SOCIAL_MEDIA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b72bd442-7857-45e9-ae98-405297b6d2d3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_CHANNEL_WEB\",\r\n\t\"description\": \"{{baseEntityPrefix}}_CHANNEL_WEB\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Offer Category - SOFTWARE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "faeb6665-43d2-44ad-a591-a588c33423f9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_DISK_SPACE\",\r\n\t\"description\": \"{{baseEntityPrefix}}_DISK_SPACE\",\r\n\t\"name\": \"{{baseEntityPrefix}}_DISK_SPACE\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplateCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplateCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Offer Category - DISK_SPACE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "33381121-cfe6-4227-818f-37b0adbfbc40",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_DISK_SPACE\",\r\n\t\"description\": \"{{baseEntityPrefix}}_DISK_SPACE\",\r\n\t\"name\": \"{{baseEntityPrefix}}_DISK_SPACE\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplateCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplateCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Setup Customer accounts, subscription, access",
							"item": [
								{
									"name": "Create Customer 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5913cb94-a754-45e0-abf0-5327d4702f1a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_CUST\",\r\n    \"description\": \"{{baseEntityPrefix}}_CUST\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"seller\": \"SELLER_FR\",\r\n    \"contactInformation\": {\r\n        \"email\": \"{{baseEntityPrefix}}@manaty.net\",\r\n        \"phone\": \"+33100000000\",\r\n        \"mobile\": \"+33666666666\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Customer 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d041b63-3fae-49ad-bb21-9af2990d3008",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_CUST_2\",\r\n    \"description\": \"{{baseEntityPrefix}}_CUST_2\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"seller\": \"SELLER_FR\",\r\n    \"contactInformation\": {\r\n        \"email\": \"{{baseEntityPrefix}}@manaty.net\",\r\n        \"phone\": \"+33100000000\",\r\n        \"mobile\": \"+33666666666\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Customer 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47e1e444-370f-4bc0-a882-83df3030f413",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_CUST_3\",\r\n    \"description\": \"{{baseEntityPrefix}}_CUST_3\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"seller\": \"SELLER_FR\",\r\n    \"contactInformation\": {\r\n        \"email\": \"{{baseEntityPrefix}}@manaty.net\",\r\n        \"phone\": \"+33100000000\",\r\n        \"mobile\": \"+33666666666\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Customer Account 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "11b8f5f6-bad5-40b5-85fc-fb91a9841f80",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_CA\",\r\n    \"description\": \"{{baseEntityPrefix}}_CA\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{baseEntityPrefix}}@manaty.net\",\r\n        \"phone\": \"1234\",\r\n        \"mobile\": \"092152154716\"\r\n    },\r\n    \"customer\": \"{{baseEntityPrefix}}_CUST\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"creditCategory\": \"Pro\",\r\n    \"methodOfPayment\": [\r\n        {\r\n            \"paymentMethodType\": \"CHECK\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Customer Account 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb46b225-85a5-48f1-8c9e-1a240cea3da1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_CA_2\",\r\n    \"description\": \"{{baseEntityPrefix}}_CA_2\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{baseEntityPrefix}}@manaty.net\",\r\n        \"phone\": \"1234\",\r\n        \"mobile\": \"092152154716\"\r\n    },\r\n    \"customer\": \"{{baseEntityPrefix}}_CUST_2\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"creditCategory\": \"Pro\",\r\n    \"methodOfPayment\": [\r\n        {\r\n            \"paymentMethodType\": \"CHECK\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Customer Account 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22ac3ec4-857b-40f6-a683-158831e82f45",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_CA_3\",\r\n    \"description\": \"{{baseEntityPrefix}}_CA_3\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{baseEntityPrefix}}@manaty.net\",\r\n        \"phone\": \"1234\",\r\n        \"mobile\": \"092152154716\"\r\n    },\r\n    \"customer\": \"{{baseEntityPrefix}}_CUST_3\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"creditCategory\": \"Pro\",\r\n    \"methodOfPayment\": [\r\n        {\r\n            \"paymentMethodType\": \"CHECK\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Account 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1949718d-5f1f-4bdb-8d45-b69cb46f4887",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_BA\",\r\n    \"description\": \"{{baseEntityPrefix}}_BA\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerAccount\": \"{{baseEntityPrefix}}_CA\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"nextInvoiceDate\": \"2015-04-01\",\r\n    \"subscriptionDate\": \"2015-01-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"email\": \"{{baseEntityPrefix}}@manaty.net\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Account 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5ad117f-b07a-460e-94dd-fb1ceee168e4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_BA_2\",\r\n    \"description\": \"{{baseEntityPrefix}}_BA_2\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerAccount\": \"{{baseEntityPrefix}}_CA_2\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"nextInvoiceDate\": \"2015-04-01\",\r\n    \"subscriptionDate\": \"2015-01-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"email\": \"{{baseEntityPrefix}}@manaty.net\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Account 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6c94742-f9e6-469f-b32f-5455b34941a2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_BA_3\",\r\n    \"description\": \"{{baseEntityPrefix}}_BA_3\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerAccount\": \"{{baseEntityPrefix}}_CA_3\",\r\n    \"billingCycle\": \"CYC_INV_MT_3\",\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"nextInvoiceDate\": \"2015-04-01\",\r\n    \"subscriptionDate\": \"2015-01-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"email\": \"{{baseEntityPrefix}}@manaty.net\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User Account 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e028f3aa-9759-4b60-834e-c77f0142ab6a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_UA\",\r\n    \"description\": \"{{baseEntityPrefix}}_UA\",\r\n    \"billingAccount\": \"{{baseEntityPrefix}}_BA\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"subscriptionDate\": \"2016-03-10\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User Account 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab8d4143-0a23-4e46-8087-16a059508c70",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_UA_2\",\r\n    \"description\": \"{{baseEntityPrefix}}_UA_2\",\r\n    \"billingAccount\": \"{{baseEntityPrefix}}_BA_2\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"subscriptionDate\": \"2016-03-10\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User Account 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8549180e-96a7-4f68-8e69-5c634c4e2426",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"description\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"billingAccount\": \"{{baseEntityPrefix}}_BA_3\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"subscriptionDate\": \"2016-03-10\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "600dba3a-020a-463b-87ea-66ada619e5dc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_SUB\",\r\n    \"description\": \"{{baseEntityPrefix}}_SUB\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2015-02-01\",\r\n    \"endAgreementDate\": \"2015-05-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Access",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f16aeff-00fe-47a7-8c62-ba025f033059",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_ACCP\",\r\n    \"subscription\": \"{{baseEntityPrefix}}_SUB\",\r\n    \"startDate\": \"2016-06-01\",\r\n    \"endDate\": \"2016-06-30\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/access/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"access",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Setup Administration: Measurable Qtt,Charts, Notifications, etc..",
							"item": [
								{
									"name": "create MeasurableQuantities",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1f0ab8ad-3964-43ec-9755-5a72178e9d72",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_MQ1\",\r\n    \"description\": \"{{baseEntityPrefix}}_MQ1-DESC\",\r\n    \"dimension1\": \"1\",\r\n    \"dimension2\": \"2\",\r\n    \"dimension3\": \"3\",\r\n    \"dimension4\": \"4\",\r\n    \"editable\": \"false\",\r\n    \"additive\": \"true\",\r\n    \"sqlQuery\": \"select count(*) from billing_subscription where status='CREATED' and date(created)='#{date}'\",\r\n    \"measurementPeriod\": \"MONTHLY\",\r\n    \"lastMeasureDate\": \"2016-03-16\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/measurableQuantity",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"measurableQuantity"
											]
										}
									},
									"response": []
								},
								{
									"name": "create BarChart",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "13f69635-a434-415b-b6a3-b1fe32405963",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_BC1\",\r\n    \"description\": \"{{baseEntityPrefix}}_BarCharts\",\r\n    \"measurableQuantity\": {\r\n        \"code\": \"{{baseEntityPrefix}}_MQ1\"\r\n    },\r\n    \"width\": \"100\",\r\n    \"height\": \"100\",\r\n    \"style\": \"test1\",\r\n    \"styleClass\": \"test1\",\r\n    \"extender\": \"test1\",\r\n    \"visible\": \"true\",\r\n    \"legendPosition\": \"n\",\r\n    \"barPadding\": \"100\",\r\n    \"barMargin\": \"100\",\r\n    \"orientation\": \"vertical\",\r\n    \"stacked\": \"true\",\r\n    \"min\": \"100\",\r\n    \"max\": \"100\",\r\n    \"breakOnNull\": \"false\",\r\n    \"xaxisLabel\": \"test\",\r\n    \"yaxisLabel\": \"test\",\r\n    \"xaxisAngle\": \"10\",\r\n    \"yaxisAngle\": \"10\",\r\n    \"legendCols\": \"20\",\r\n    \"legendRows\": \"20\",\r\n    \"zoom\": \"true\",\r\n    \"animate\": \"true\",\r\n    \"showDataTip\": \"true\",\r\n    \"datatipFormat\": \"false\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/chart/bar",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"chart",
												"bar"
											]
										}
									},
									"response": []
								},
								{
									"name": "create PieChart",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95c58cc4-7b9b-4e86-9e23-e2c0cc2f2ff1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_PC1\",\r\n    \"description\": \"{{baseEntityPrefix}}_PieCharts\",\r\n    \"measurableQuantity\": {\r\n        \"code\": \"{{baseEntityPrefix}}_MQ1\"\r\n    },\r\n    \"width\": \"123\",\r\n    \"height\": \"123\",\r\n    \"style\": \"style1\",\r\n    \"styleClass\": \"style_class1\",\r\n    \"extender\": \"extender1\",\r\n    \"visible\": \"true\",\r\n    \"filled\": \"false\",\r\n    \"legendPosition\": \"n\",\r\n    \"diameter\": \"120\",\r\n    \"sliceMargin\": \"10\",\r\n    \"shadow\": \"true\",\r\n    \"showDataLabels\": \"false\",\r\n    \"legendCols\": \"23\",\r\n    \"legendRows\": \"23\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/chart/pie",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"chart",
												"pie"
											]
										}
									},
									"response": []
								},
								{
									"name": "create LineChart",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b23b2fa4-7c4c-453b-8808-1aa73283d8de",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_LC1\",\r\n    \"description\": \"{{baseEntityPrefix}}_LineCharts\",\r\n    \"measurableQuantity\": {\r\n        \"code\": \"{{baseEntityPrefix}}_MQ1\"\r\n    },\r\n    \"width\": \"200\",\r\n    \"height\": \"200\",\r\n    \"style\": \"style1\",\r\n    \"styleClass\": \"styleClass2\",\r\n    \"extender\": \"extender3\",\r\n    \"visible\": \"true\",\r\n    \"filled\": \"false\",\r\n    \"legendPosition\": \"w\",\r\n    \"shadow\": \"true\",\r\n    \"minX\": \"45\",\r\n    \"maxX\": \"45\",\r\n    \"minY\": \"45\",\r\n    \"maxY\": \"45\",\r\n    \"breakOnNull\": \"true\",\r\n    \"xaxisLabel\": \"label 1\",\r\n    \"yaxisLabel\": \"label 2\",\r\n    \"xaxisAngle\": \"12\",\r\n    \"yaxisAngle\": \"12\",\r\n    \"stacked\": \"true\",\r\n    \"zoom\": \"true\",\r\n    \"animate\": \"false\",\r\n    \"showDataTip\": \"false\",\r\n    \"datatipFormat\": \"false\",\r\n    \"legendCols\": \"56\",\r\n    \"legendRows\": \"56\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/chart/line",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"chart",
												"line"
											]
										}
									},
									"response": []
								},
								{
									"name": "create ScriptInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fe0e030b-d85f-4a5a-a44c-3ed73bdc1730",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"org.meveo.service.script.{{baseEntityPrefix}}_Script\",\n    \"description\": \"{{baseEntityPrefix}}_Script_Instance\",\n    \"type\": \"JAVA\",\n    \"script\": \"package org.meveo.service.script;           \\r\\n            import java.util.Map;\\r\\n            import java.math.BigDecimal;\\r\\n            import org.meveo.admin.exception.BusinessException;\\r\\n            import org.meveo.model.admin.User;\\r\\n            import org.meveo.model.crm.Provider;\\r\\n            import org.slf4j.Logger;\\r\\n            import org.slf4j.LoggerFactory;         \\r\\n            public class {{baseEntityPrefix}}_Script extends Script {             \\r\\n                private static final Logger log = LoggerFactory.getLogger({{baseEntityPrefix}}_Script.class);\\r\\n                public void execute(Map<String,Object> context) throws BusinessException{\\r\\n                    log.debug(\\\\\\\"{{baseEntityPrefix}}_Script creation script...\\\\\\\");\\r\\n                    log.debug(\\\\\\\"{{baseEntityPrefix}}_Script creation script.\\\\\\\");\\r\\n                }\\r\\n            }\",\n    \"executionRoles\": [\n        {\n            \"name\": \"administrateur\"\n        }\n    ],\n    \"sourcingRoles\": [\n        {\n            \"name\": \"administrateur\"\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Notifications",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "12e9283d-df95-426c-8d89-ed881d41f25c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_Notification1\",\r\n    \"classNameFilter\": \"org.meveo.model.crm.Customer\",\r\n    \"eventTypeFilter\": \"CREATED\",\r\n    \"elFilter\": \"#{event.code.startsWith('test')}\",\r\n    \"scriptInstanceCode\": \"org.meveo.service.script.{{baseEntityPrefix}}_Script\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Webhook",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "82aa6d5b-e5cd-4be3-80b3-0ff6d36cfd65",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_WebHook1\",\r\n    \"classNameFilter\": \"org.meveo.model.crm.Customer\",\r\n    \"eventTypeFilter\": \"CREATED\",\r\n    \"elFilter\": \"#{event.code.startsWith('test')}\",\r\n    \"scriptInstanceCode\": \"org.meveo.service.script.{{baseEntityPrefix}}_Script\",\r\n    \"host\": \"localhost\",\r\n    \"port\": \"8080\",\r\n    \"page\": \"meveo/api/rest/\",\r\n    \"httpMethod\": \"HTTP_GET\",\r\n    \"username\": \"test.username\",\r\n    \"password\": \"test.password\",\r\n    \"counterTemplate\": \"{{baseEntityPrefix}}_CT1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/webhook/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"webhook",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create EmailNotifications",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b4f667e-9a8e-4997-9db9-a3658801e2fc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_EmailNotif1\",\r\n    \"classNameFilter\": \"org.meveo.model.crm.Customer\",\r\n    \"eventTypeFilter\": \"CREATED\",\r\n    \"elFilter\": \"#{event.code.startsWith('test')}\",\r\n    \"scriptInstanceCode\": \"org.meveo.service.script.{{baseEntityPrefix}}_Script\",\r\n    \"emailFrom\": \"OpenCell\",\r\n    \"emailToEl\": \"edward.legaspi@opencellsoft.com\",\r\n    \"subject\": \"Test Meveo Application\",\r\n    \"body\": \"Test Body\",\r\n    \"htmlBody\": \"HTML Body\",\r\n    \"counterTemplate\": \"{{baseEntityPrefix}}_CT1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/email/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"email",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Timer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d73d59a-1fda-42f2-9663-4beb92651afe",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_Timer1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Timer_DESCP\",\r\n    \"hour\": \"1\",\r\n    \"minute\": \"10\",\r\n    \"second\": \"45\",\r\n    \"year\": \"*\",\r\n    \"month\": \"*\",\r\n    \"dayOfMonth\": \"*\",\r\n    \"dayOfWeek\": \"*\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/timerEntity/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"timerEntity",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create JobInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8abe41ec-c7ff-4f17-b560-2ebc465c14bf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"jobTemplate\": \"ExportSubscriptionsJob\",\r\n    \"code\": \"{{baseEntityPrefix}}_ImpExp-Job1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Import-Export\",\r\n    \"timerCode\": \"{{baseEntityPrefix}}_Timer1\",\r\n    \"jobCategory\": \"IMPORT/EXPORT\",\r\n    \"followingJob\": \"ACCO_JOB\",\r\n    \"parameter\": \"param1\",\r\n    \"active\": \"false\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6feb85fe-67f0-4795-811f-e1e4cf625c84",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_Filter1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Filter1_DESCP\",\r\n    \"shared\": \"false\",\r\n    \"inputXml\": \"<filter>\\n  <disabled>false</disabled>\\n  <appendGeneratedCode>false</appendGeneratedCode>\\n  <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n    <filterConditionType>COMPOSITE_AND</filterConditionType>\\n    <filterConditions>\\n      <primitiveFilterCondition>\\n        <filterConditionType>PRIMITIVE</filterConditionType>\\n        <fieldName>startRatingDate</fieldName>\\n        <operator>>=</operator>\\n        <operand>date:01/09/2015</operand>\\n      </primitiveFilterCondition>\\n    </filterConditions>\\n  </filterCondition>\\n  <primarySelector>\\n    <targetEntity>org.meveo.model.catalog.PricePlanMatrix</targetEntity>\\n    <alias>p</alias>\\n    <displayFields>\\n      <field>code</field>\\n      <field>eventCode</field>\\n    </displayFields>\\n    <exportFields/>\\n    <ignoreIfNotFoundForeignKeys/>\\n  </primarySelector>\\n  <secondarySelectors/>\\n</filter>\"\r\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filter/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filter",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Timer Hourly",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd38b96e-7fd3-49de-8f3c-83a31c76f18c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"Hourly\",\r\n    \"description\": \"Hourly\",\r\n    \"hour\": \"*\",\r\n    \"minute\": \"0\",\r\n    \"second\": \"0\",\r\n    \"year\": \"*\",\r\n    \"month\": \"*\",\r\n    \"dayOfMonth\": \"*\",\r\n    \"dayOfWeek\": \"*\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/timerEntity/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"timerEntity",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create GDPR JobInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "acf33023-fbb6-4dd4-8653-20bbe6e34808",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"jobTemplate\": \"GDPRJob\",\n    \"code\": \"GDPR_Job\",\n    \"description\": \"GDPR_Job\",\n    \"jobCategory\": \"DWH\",\n    \"active\": \"false\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Timer Daily - Midnight",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ea55d84e-42da-4e20-a17a-c8cc844e0f75",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"Daily-midnight\",\r\n    \"description\": \"Daily-midnight\",\r\n    \"hour\": \"23\",\r\n    \"minute\": \"59\",\r\n    \"second\": \"59\",\r\n    \"year\": \"*\",\r\n    \"month\": \"*\",\r\n    \"dayOfMonth\": \"*\",\r\n    \"dayOfWeek\": \"*\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/timerEntity/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"timerEntity",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create PaymentSchedule Job",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8593700f-eda8-4f57-980d-0e8895b37d36",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"jobTemplate\": \"PaymentScheduleProcessingJob\",\r\n    \"code\": \"PaymentSchedule_Job\",\r\n    \"description\": \"PaymentSchedule_Job\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"active\": \"false\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Setup TerminationReason",
							"item": [
								{
									"name": "update TERM_REASON_1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ed41cff-1849-479b-b9ba-9b39e894763a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TERM_REASON_1\",\r\n    \"description\": \"Agreement Reimbursement Charge\",\r\n    \"applyAgreement\": \"true\",\r\n    \"applyReimbursment\": \"true\",\r\n    \"applyTerminationCharges\": \"true\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/terminationReason",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"terminationReason"
											]
										}
									},
									"response": []
								},
								{
									"name": "update TERM_REASON_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5586ddb-0705-45a9-9e9c-f9962efda58f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TERM_REASON_2\",\r\n    \"description\": \"Reimbursement\",\r\n    \"applyAgreement\": \"false\",\r\n    \"applyReimbursment\": \"true\",\r\n    \"applyTerminationCharges\": \"false\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/terminationReason",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"terminationReason"
											]
										}
									},
									"response": []
								},
								{
									"name": "update TERM_REASON_3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "03fd5930-b193-4c07-b877-4a785e40791d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TERM_REASON_3\",\r\n    \"description\": \"Charge\",\r\n    \"applyAgreement\": \"false\",\r\n    \"applyReimbursment\": \"false\",\r\n    \"applyTerminationCharges\": \"true\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/terminationReason",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"terminationReason"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Service workflow",
					"item": [
						{
							"name": "Service workflow - service multi activation",
							"item": [
								{
									"name": "Set service.allowMultiInstantiation=true - AUTHORIZATION_SUPERADMIN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47ebf19c-ba3d-469d-8c15-adfa818b61d7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.superpassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.superusername}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\r\n{\r\n    \"properties\": [\r\n        {\r\n            \"key\": \"service.allowMultiInstantiation\",\r\n            \"value\": \"true\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/configurations/properties",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"configurations",
												"properties"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "328f6e12-96da-41cb-ab58-88965c1a8b0f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n\t\"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n\t\"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n\t\"subscriptionDate\": \"2016-12-01\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instantiate Service 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "63d26bb3-997b-41cc-8706-09ac97d556d5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"3\",\r\n                \"subscriptionDate\": \"2016-12-11\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instantiate Service again - fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "708a0704-498e-40aa-8a15-3207d785a567",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"ServiceInstance with code=\"+pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE1 is already instanciated.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"3\",\r\n                \"subscriptionDate\": \"2016-12-05\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28e61b0d-5c0a-46c8-9a56-29ac15c6b83d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_SUB_SERVICE_MULTI\");",
													"    pm.expect(jsonData.subscription.userAccount).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_UA\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"INACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(3);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.contains(\"2016-12-11T\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1]).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services 1 and 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e77215bf-8942-4c67-a7aa-65c68ef8b61b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n\t\"servicesToActivate\": {\r\n\t\t\"service\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n\t\t\t\t\"quantity\": \"1\",\r\n\t\t\t\t\"subscriptionDate\": \"2016-12-02\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_SERVICE2\",\r\n\t\t\t\t\"quantity\": \"2\",\r\n\t\t\t\t\"subscriptionDate\": \"2017-01-01\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription A1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7857d7f8-61bf-4a72-ac85-6462b513cdd3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_SUB_SERVICE_MULTI\");",
													"    pm.expect(jsonData.subscription.userAccount).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_UA\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.contain(\"2016-12-02T\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.contain(\"2017-01-01T\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find service instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d096d08-daa9-4ac4-87e1-4bc616c6c39f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceInstance.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.serviceInstance.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.serviceInstance.quantity).to.eql(1);",
													"    pm.expect(jsonData.serviceInstance.subscriptionDate).to.contains(\"2016-12-02T\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/serviceInstance?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI&serviceInstanceCode={{baseEntityPrefix}}_SERVICE1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"serviceInstance"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												},
												{
													"key": "serviceInstanceCode",
													"value": "{{baseEntityPrefix}}_SERVICE1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Service1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dbdd9143-3ccf-4e36-b1b0-6005551d74fa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"services\": [\r\n        \"{{baseEntityPrefix}}_SERVICE1\"\r\n    ],\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"2016-12-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instantiate Service 1 again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ad0f86b-7bbe-48c3-a093-9caab6053208",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"3\",\r\n                \"subscriptionDate\": \"2016-12-05\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate service 1 again - change quantity and subscription date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6cfe25fc-0e60-43c2-9b38-6cc985aabf70",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"5\",\r\n                \"subscriptionDate\": \"2016-12-08\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription A2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0297c6d5-8126-4bc6-9075-1921346fce87",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_SUB_SERVICE_MULTI\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.contains(\"2016-12-02T\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].terminationDate).to.contains(\"2016-12-02T\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].terminationReason).to.eql(\"TERM_REASON_1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.contains(\"2017-01-01T\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].quantity).to.eql(5);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].subscriptionDate).to.contains(\"2016-12-08T\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Service1 A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "008a0d47-410f-47e4-885e-c52be77445d4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"services\": [\r\n        \"{{baseEntityPrefix}}_SERVICE1\"\r\n    ],\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"2016-12-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instantiate Service 1 again 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5547dff3-6389-4d30-91d0-6d83115510a1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"11\",\r\n                \"subscriptionDate\": \"2016-12-11\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate service 1 again - no changes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ea782357-e38c-41a8-a55f-6988901a6516",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"subscriptionDate\": \"2016-12-11\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription A3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8cd1e066-2d91-45b6-b2a3-dd73a602fb58",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_MULTI\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.globals.set(\"siid1\", jsonData.subscription.services.serviceInstance[0].id);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.contains(\"2016-12-02T\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].terminationDate).to.contains(\"2016-12-02T\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].terminationReason).to.eql(\"TERM_REASON_1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.globals.set(\"siid2\", jsonData.subscription.services.serviceInstance[1].id);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.contains(\"2017-01-01T\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.globals.set(\"siid3\", jsonData.subscription.services.serviceInstance[2].id);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].quantity).to.eql(5);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].subscriptionDate).to.contains(\"2016-12-08T\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].terminationDate).to.contains(\"2016-12-08T\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].terminationReason).to.eql(\"TERM_REASON_1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[3].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.globals.set(\"siid4\", jsonData.subscription.services.serviceInstance[3].id);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[3].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[3].quantity).to.eql(11);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[3].subscriptionDate).to.contains(\"2016-12-11T\");",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find service instance - fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ecdaa7e-bd50-41e3-a523-b8cc56e720e8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"More than one service instance with status [] was found. Please use ID to refer to service instance.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/serviceInstance?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI&serviceInstanceCode={{baseEntityPrefix}}_SERVICE1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"serviceInstance"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												},
												{
													"key": "serviceInstanceCode",
													"value": "{{baseEntityPrefix}}_SERVICE1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find service instance by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6ebf5eb-a75d-4f0f-844b-97dd58b32ebe",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceInstance.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.serviceInstance.status).to.eql(\"TERMINATED\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/serviceInstance?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI&serviceInstanceId={{siid1}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"serviceInstance"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												},
												{
													"key": "serviceInstanceId",
													"value": "{{siid1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Service by id1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a3107fb-7a06-45d3-9886-bcd48255c0a7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"serviceIds\": [{{siid4}}],\r\n\t\"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n\t\"terminationReason\": \"TERM_REASON_1\",\r\n\t\"terminationDate\": \"2016-12-31\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription T1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f9a4832c-7ca0-4dc9-9b6a-0b7298963254",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_MULTI\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[3].id).to.eql(pm.globals.get(\"siid4\"));",
													"    pm.expect(jsonData.subscription.services.serviceInstance[3].status).to.eql(\"TERMINATED\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Service2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ea70dd6-b017-43a0-8037-769f374fd81c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"services\": [\r\n        \"{{baseEntityPrefix}}_SERVICE2\"\r\n    ],\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"terminationReason\": \"TERM_REASON_2\",\r\n    \"terminationDate\": \"2016-12-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription T2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24a381b7-3ade-45dd-8351-e3ed2a173a46",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_MULTI\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"TERMINATED\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "SET_VARIABLES",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "33287417-c5a2-4a7b-870d-891e95a8dff9",
												"exec": [
													"pm.globals.set(\"index\", 240);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bbd683db-0e94-4f99-a4a2-bd64881f9ead",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "OPTIONS",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "https://postman-echo.com/",
											"protocol": "https",
											"host": [
												"postman-echo",
												"com"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c7f7fd0d-0be3-4525-bef2-709c1fbeda09",
										"type": "text/javascript",
										"exec": [
											"pm.globals.set(\"index\", 240);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "01b6e612-3c6b-4b29-a5c5-196098fe486c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Service workflow - service single activation",
							"item": [
								{
									"name": "Set service.allowMultiInstantiation=false - AUTHORIZATION_SUPERADMIN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "347de520-31d4-4b81-aac4-3ebc773d47e9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.superpassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.superusername}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"properties\": [\r\n        {\r\n            \"key\": \"service.allowMultiInstantiation\",\r\n            \"value\": \"false\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/configurations/properties",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"configurations",
												"properties"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2603efe4-0fd2-497a-b19e-1da50d406000",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\r\n\t\"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n\t\"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n\t\"subscriptionDate\": \"2016-12-01\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instantiate Service 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "00379731-3dbd-44ea-a3e8-c43bf53d131e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\n    \"servicesToInstantiate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2016-12-01\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instantiate Service again - fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "20362656-97c7-4c04-b5cd-0bfea334171b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ServiceInstance with code=\"+pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE1 is already instanciated or activated.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\n    \"servicesToInstantiate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"3\",\n                \"subscriptionDate\": \"2016-12-11\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription I",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e949a42b-d30e-4117-adb4-66cf221c8f84",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_WFL\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"CREATED\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.contains(\"2016-12-01T\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"INACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.contains(\"2016-12-01T\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_WFL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services 1 and 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "167b1305-2f18-4dd8-9317-6254d3ece093",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\r\n\t\"servicesToActivate\": {\r\n\t\t\"service\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n\t\t\t\t\"quantity\": \"1\",\r\n\t\t\t\t\"subscriptionDate\": \"2016-12-02\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_SERVICE2\",\r\n\t\t\t\t\"quantity\": \"2\",\r\n\t\t\t\t\"subscriptionDate\": \"2017-01-01\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription A1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50c5f8d2-a817-493b-a3f1-892434178310",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_WFL\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.contains(\"2016-12-01T\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.globals.set(\"siid1\", jsonData.subscription.services.serviceInstance[0].id);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.contains(\"2016-12-02T\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE2\");",
													"    pm.globals.set(\"siid2\", jsonData.subscription.services.serviceInstance[1].id);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.contains(\"2017-01-01T\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_WFL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find service instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b1ed10f3-cfe4-4d0a-958f-b5ae3e28299b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceInstance.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.serviceInstance.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.serviceInstance.subscriptionDate).to.contains(\"2016-12-02T\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/serviceInstance?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_WFL&serviceInstanceCode={{baseEntityPrefix}}_SERVICE1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"serviceInstance"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL"
												},
												{
													"key": "serviceInstanceCode",
													"value": "{{baseEntityPrefix}}_SERVICE1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Instantiate Service 1 again - fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b67af63-7a0e-48c9-b424-75c4fcf313c4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ServiceInstance with code=\"+pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE1 is already instanciated or activated.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"3\",\r\n                \"subscriptionDate\": \"2016-12-05\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate service 1 again - fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "30216adf-72f8-4c57-97a6-b0275588c06f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\r\n\t\"servicesToActivate\": {\r\n\t\t\"service\": {\r\n\t\t\t\"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n\t\t\t\"quantity\": \"5\",\r\n\t\t\t\"subscriptionDate\": \"2016-12-08\"\r\n\t\t}\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find service instance by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dcf6c489-652d-4c22-ba1b-bc99b0fa345b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceInstance.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.serviceInstance.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.serviceInstance.subscriptionDate).to.contains(\"2016-12-02T\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/serviceInstance?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_WFL&serviceInstanceId={{siid1}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"serviceInstance"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL"
												},
												{
													"key": "serviceInstanceId",
													"value": "{{siid1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Service by id1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ccf0ab06-550b-4f11-8a7b-b631496da686",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"serviceIds\": [\n        \"{{siid1}}\"\n    ],\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\n    \"terminationReason\": \"TERM_REASON_1\",\n    \"terminationDate\": \"2016-12-31\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription T1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8dec5b89-ceef-4b69-bb3c-2daac4bf220d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_WFL\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.contains(\"2016-12-01T\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.contains(\"2016-12-02T\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.contains(\"2017-01-01T\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_WFL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Service 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9426499f-b59f-4d6c-a0c0-bc132c664e84",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"services\": [\r\n        \"{{baseEntityPrefix}}_SERVICE2\"\r\n    ],\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\r\n    \"terminationReason\": \"TERM_REASON_3\",\r\n    \"terminationDate\": \"2016-12-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription T2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d70caf44-a717-48de-b6a3-2f1770ee3b45",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_WFL\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.contains(\"2016-12-01T\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.contains(\"2016-12-02T\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.contains(\"2017-01-01T\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_WFL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "e30b17aa-1a81-49f9-857d-e10de25a9caf",
										"type": "text/javascript",
										"exec": [
											"pm.globals.set(\"index\", 240);"
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "c6a0f964-3779-4f72-8295-dedaf911db60",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "11f62738-40ec-40f6-944a-91f22ec98fd0",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 242);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "811ba5a9-9a44-41ed-a55e-e960b31ed6ea",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Subscription workflow",
					"item": [
						{
							"name": "Terminate Subscription",
							"item": [
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed45a7b3-af0f-4d5b-8f96-d66410f187ed",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_SUB_WFL\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2016-03-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "14209923-3212-4dcf-b4c1-de3274be7126",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SUB_WFL\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2015-02-02\"\r\n            },\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\r\n                \"quantity\": \"2\",\r\n                \"subscriptionDate\": \"2015-04-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "856a50ed-8dfb-48ae-803a-41da256e5801",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SUB_WFL\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.contains(\"2016-03-01T\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.contains(\"2015-02-02T\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.contains(\"2015-04-01T\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SUB_WFL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SUB_WFL"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Subscription 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "12344368-7344-41da-b145-4cf4ba36c351",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SUB_WFL\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"2016-04-30\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4d52a43-fe13-43bc-9a61-0ec24349368a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SUB_WFL\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"RESILIATED\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.contains(\"2016-03-01T\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.contains(\"2015-02-02T\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.contains(\"2015-04-01T\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SUB_WFL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SUB_WFL"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription - future termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e5554b71-beb6-47cd-b448-73b49ff73102",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"{{today}}\"\r\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services - future termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5bcbd6ad-66c0-4bda-8c42-d7cf0e30eaf6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"{{today}}\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - future termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3226115-98b3-4456-a17f-ed62a361f0a0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_FUTURE_TERMINATION\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.contains(pm.globals.get(\"today\"));",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.contains(pm.globals.get(\"today\"));",
													"    pm.expect(jsonData.subscription.renewalRule.initialTermType).to.eql(\"RECURRING\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Subscription - future termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "166c513a-15da-4036-8014-37ba796292ba",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"{{terminationDate}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - future termination 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a628645e-a48c-42da-a3e3-b9f6fdeef546",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_FUTURE_TERMINATION\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.contains(pm.globals.get(\"today\"));",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.contains(pm.globals.get(\"today\"));",
													"    pm.expect(jsonData.subscription.subscribedTillDate).to.contains(pm.globals.get(\"terminationDate\"));",
													"    pm.expect(jsonData.subscription.renewalRule.endOfTermAction).to.eql(\"TERMINATE\");",
													"    pm.expect(jsonData.subscription.renewalRule.terminationReasonCode).to.eql(\"TERM_REASON_1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription - in-between-days termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48780edb-13b4-47c1-8884-7198357de382",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"{{10daysBefore}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services - in-between-days termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "472f7273-080c-422d-af13-9b44d6656ab2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"{{5daysBefore}}\"\r\n            },\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"{{2daysBefore}}\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - in-between-days termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4787954b-57a2-454d-b86b-a48a6c25eb57",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_INBETWEEN_TERMINATION\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.contains(pm.globals.get(\"10daysBefore\"));",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.contains(pm.globals.get(\"5daysBefore\"));",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.contains(pm.globals.get(\"2daysBefore\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Subscription - in-between-days termination - before Subscription's subscription date -KO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "05e06a71-d05a-40ec-abcc-6acd22b6ca4d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Termination date can not be before the subscription date\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"{{20daysBefore}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Subscription - in-between-days termination - on Subscription's subscription date - OK",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c80fdcf5-938a-4a3c-b70a-a82b245041c7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"{{10daysBefore}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - in-between-days termination 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b1eed14-f58c-456f-83fd-d0a3d2cd859e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_INBETWEEN_TERMINATION\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"RESILIATED\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.contains(pm.globals.get(\"10daysBefore\"));",
													"    pm.expect(jsonData.subscription.terminationDate).to.contains(pm.globals.get(\"10daysBefore\"));",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.contains(pm.globals.get(\"5daysBefore\"));",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].terminationDate).to.contains(pm.globals.get(\"5daysBefore\"));",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.contains(pm.globals.get(\"2daysBefore\"));",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].terminationDate).to.contains(pm.globals.get(\"2daysBefore\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription - in-between-days 2 termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50b412fe-af3c-4077-8c19-fdff6424431c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"{{10daysBefore}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services - in-between-days 2 termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a6238c10-a65a-40a2-88f7-ea3a07758d87",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"{{5daysBefore}}\"\n            },\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"{{2daysBefore}}\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - in-between-days 2 termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4daf0f29-5326-43d0-8756-d8a986618de8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_INBETWEEN_2_TERMINATION\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.contains(pm.globals.get(\"10daysBefore\"));",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.contains(pm.globals.get(\"5daysBefore\"));",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.contains(pm.globals.get(\"2daysBefore\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Subscription - in-between-days 2 termination - inbetween service's subscription date - OK",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "627e477f-0e21-44e4-829a-ae447606cd97",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"{{3daysBefore}}\"\r\n}\r\n\t",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - in-between-days 2 termination 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ddb1766a-0899-4ce4-8d54-ddad49b48106",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_INBETWEEN_2_TERMINATION\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"RESILIATED\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.contains(pm.globals.get(\"10daysBefore\"));",
													"    pm.expect(jsonData.subscription.terminationDate).to.contains(pm.globals.get(\"3daysBefore\"));",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.contains(pm.globals.get(\"5daysBefore\"));",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].terminationDate).to.contains(pm.globals.get(\"3daysBefore\"));",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.contains(pm.globals.get(\"2daysBefore\"));",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].terminationDate).to.contains(pm.globals.get(\"2daysBefore\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription - future termination 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "315f3159-7630-42ac-b2c0-9e797d8e0549",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION_3\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"{{today}}\",\r\n    \"terminationDate\": \"{{terminationDate}}\",\r\n    \"terminationReason\": \"TERM_REASON_1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - future termination 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d641fbdc-d51c-4203-8da2-0b37d50d8f2a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_FUTURE_TERMINATION_3\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"CREATED\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.contains(pm.globals.get(\"today\"));",
													"    pm.expect(jsonData.subscription.terminationDate).to.contains(pm.globals.get(\"terminationDate\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION_3",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION_3"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription - future termination 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab951eb2-0d37-4b53-8f1b-41ac5f82d255",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION_4\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"{{today}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services - future termination 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44151566-9f99-48aa-9773-d168a902ee0d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION_4\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"{{today}}\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update subscription - future termination 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8846e59e-dae7-41a7-81bf-be4703619ecd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION_4\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"{{today}}\",\r\n    \"terminationDate\": \"{{terminationDate}}\",\r\n    \"terminationReason\": \"TERM_REASON_1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - future termination 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "429922fc-808c-4d0f-a39d-6306eda3a873",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_FUTURE_TERMINATION_4\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.contains(pm.globals.get(\"today\"));",
													"    pm.expect(jsonData.subscription.subscribedTillDate).to.contains(pm.globals.get(\"terminationDate\"));",
													"    pm.expect(jsonData.subscription.renewalRule.initialTermType).to.eql(\"FIXED\");",
													"    pm.expect(jsonData.subscription.renewalRule.autoRenew).to.eql(false);",
													"    pm.expect(jsonData.subscription.renewalRule.endOfTermAction).to.eql(\"TERMINATE\");",
													"    pm.expect(jsonData.subscription.renewalRule.terminationReasonCode).to.eql(\"TERM_REASON_1\");",
													"    pm.expect(jsonData.subscription.renewalRule.extendAgreementPeriodToSubscribedTillDate).to.eql(false);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION_4",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION_4"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "ApplyOneShotChargeInstance",
							"item": [
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "caf99ccf-23e7-4939-afc9-024436f5f3d6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_SUB_AOCI\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2016-03-01\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eb244290-0058-418d-ab50-23ab139fa406",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SUB_AOCI\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2015-02-02\"\r\n            },\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\r\n                \"quantity\": \"2\",\r\n                \"subscriptionDate\": \"2015-04-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "applyOneShotChargeInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5dc020b4-d7a6-4c04-87e4-d90e2a2097bd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"oneShotCharge\": \"{{baseEntityPrefix}}_OS1\",\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SUB_AOCI\",\n    \"createWallet\": false,\n    \"operationDate\": \"2016-04-06\",\n    \"quantity\": \"1\",\n    \"description\": \"{{baseEntityPrefix}}_Apply-OneShotChargeInstance_Description\",\n    \"amountWithoutTax\": \"11\",\n    \"amountWithTax\": \"13\",\n    \"criteria1\": \"criteria1\",\n    \"criteria2\": \"criteria2\",\n    \"criteria3\": \"criteria3\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/applyOneShotChargeInstance",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"applyOneShotChargeInstance"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Subscription instantiate/activate service NOT in Offer and modify offer in subscription",
							"item": [
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ce02e03-7c82-4bca-8482-a0ca48fdd879",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2015-02-01\",\r\n    \"endAgreementDate\": \"2015-05-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create service with min req Vals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e8d9470-c3e1-4793-93cd-e07e022cb51b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SERVICE\",\r\n    \"invoicingCalendar\": \"Multi period\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services with service not in Offer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0ea2bbcf-ee2e-43f5-8c00-d9758a147924",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"BUSINESS_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Service \"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_SERVICE is not associated with Offer\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_SERVICE\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2015-02-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instanticate services with service not in Offer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7ecdcd82-c3c1-4a54-ba8d-4da4a49b63d8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"BUSINESS_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"No offerServiceTemplate corresponds to \"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_SERVICE\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_SERVICE\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2016-05-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update subscription with another offer - ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2d80543-c1a4-48c4-9327-bbede920a789",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER2\",\r\n    \"subscriptionDate\": \"2015-02-01\",\r\n    \"endAgreementDate\": \"2015-05-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instanticate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f460781-e128-4959-bda8-89fde0dc1286",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2016-05-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update subscription with another offer - fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42039904-10ce-404b-bf32-cc5b34268da4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Cannot change the offer of subscription once the services are instantiated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2015-02-01\",\r\n    \"endAgreementDate\": \"2015-05-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Apply Product",
							"item": [
								{
									"name": "Create CFT Product 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "74142ee4-ccf4-4379-9b74-294e5604182e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n    \"fieldType\": \"DOUBLE\",\r\n    \"appliesTo\": \"ProductInstance\",\r\n    \"storageType\": \"SINGLE\",\r\n    \"defaultValue\": \"101\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CFT Product 101",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "800015b7-80ae-4680-9b01-bfd7a7bf9145",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE101\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE101\",\r\n    \"fieldType\": \"DOUBLE\",\r\n    \"appliesTo\": \"ProductInstance\",\r\n    \"storageType\": \"SINGLE\",\r\n    \"defaultValue\": \"101\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Product charge100",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d1e7c4ed-d428-45b8-8742-8e235f5148d0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_PC100\",\r\n    \"description\": \"{{baseEntityPrefix}}_PC100\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": false,\r\n    \"amountEditable\": false,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}-Produit 100 Test\"\r\n        }\r\n    ],\r\n    \"taxClassCode\":\"{{baseEntityPrefix}}_taxClass\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalogManagement/productChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalogManagement",
												"productChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Product 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "12dd5196-c2fa-4f76-89c4-eb5d22d6d6f5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_PRODUCT100\",\r\n    \"description\": \"{{baseEntityPrefix}}_PRODUCT2 DESC\",\r\n    \"name\": \"{{baseEntityPrefix}}_PRODUCT100 NAME\",\r\n    \"productChargeTemplate\": [\r\n        {\r\n            \"code\": \"{{baseEntityPrefix}}_PC100\",\r\n            \"invoiceSubCategory\": \"SUB_DATA\",\r\n            \"disabled\": false\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalogManagement/productTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalogManagement",
												"productTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create priceplan product 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88aa5e99-6028-4d47-a011-8bd525313cce",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_PC100_PP\",\r\n    \"description\": \"price plan product 100\",\r\n    \"eventCode\": \"{{baseEntityPrefix}}_PC100\",\r\n    \"amountWithoutTax\": \"5\",\r\n    \"amountWithTax\": \"6\",\r\n    \"priority\": \"1\",\r\n    \"amountWithoutTaxEL\": \"#{mv:getInheritedCFValue(productInstance,'{{entityPrefix}}_{{index}}_CF_PROD_PRICE100')}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c4da4ce0-a27b-4431-a471-a3cfc20b2b48",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_PROD\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_PROD\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2015-02-01\",\r\n    \"endAgreementDate\": \"2015-05-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Apply product 2 to UA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "484b6aba-5e7a-438f-bee7-cfcb1be18c8d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"product\": \"{{baseEntityPrefix}}_PRODUCT2\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"operationDate\": \"2016-04-06\",\r\n    \"quantity\": \"1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Apply-OneShotChargeInstance_Description_UA\",\r\n    \"amountWithoutTax\": \"11\",\r\n    \"amountWithTax\": \"13\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n                \"doubleValue\": \"10\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/applyProduct",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"applyProduct"
											]
										}
									},
									"response": []
								},
								{
									"name": "Apply product 2 to UA_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c427c7f3-1a64-4e07-ae8b-4f7cf743ef32",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"product\": \"{{baseEntityPrefix}}_PRODUCT2\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_2\",\r\n    \"operationDate\": \"2016-04-06\",\r\n    \"quantity\": \"1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Apply-OneShotChargeInstance_Description_UA\",\r\n    \"amountWithoutTax\": \"11\",\r\n    \"amountWithTax\": \"13\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n                \"doubleValue\": \"10\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/applyProduct",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"applyProduct"
											]
										}
									},
									"response": []
								},
								{
									"name": "Apply product 2 to SUB_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f7be2d2b-1e9f-467e-af74-68fb4f9e9a3d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"product\": \"{{baseEntityPrefix}}_PRODUCT2\",\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_PROD\",\r\n    \"operationDate\": \"2016-04-06\",\r\n    \"quantity\": \"1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Apply-OneShotChargeInstance_Description_SUB\",\r\n    \"amountWithoutTax\": \"11\",\r\n    \"amountWithTax\": \"13\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n                \"doubleValue\": \"10\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/applyProduct",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"applyProduct"
											]
										}
									},
									"response": []
								},
								{
									"name": "Apply product 100 to UA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1bf21586-e619-4181-b0ae-2ee9d4092acc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"product\": \"{{baseEntityPrefix}}_PRODUCT100\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"operationDate\": \"2016-04-06\",\r\n    \"quantity\": \"1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Apply-OneShotChargeInstance_Description_UA\",\r\n    \"amountWithoutTax\": \"11\",\r\n    \"amountWithTax\": \"13\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n                \"doubleValue\": \"101.1\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/applyProduct",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"applyProduct"
											]
										}
									},
									"response": []
								},
								{
									"name": "Apply product 100 to SUB_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b790635-e47c-4356-b59e-663b0c2271eb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"product\": \"{{baseEntityPrefix}}_PRODUCT100\",\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_PROD\",\r\n    \"operationDate\": \"2016-04-06\",\r\n    \"quantity\": \"1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Apply-OneShotChargeInstance_Description_SUB\",\r\n    \"amountWithoutTax\": \"11\",\r\n    \"amountWithTax\": \"13\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n                \"doubleValue\": \"101.2\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/applyProduct",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"applyProduct"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT Product 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86fb3127-5a8d-4803-b6ae-6be6f90d2f66",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/customFieldTemplate/{{entityPrefix}}_{{index}}_CF_PROD_PRICE100/ProductInstance",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"customFieldTemplate",
												"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100",
												"ProductInstance"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT Product 101",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "66d7ad96-bbee-4eb2-b3b5-7addab65f138",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/customFieldTemplate/{{entityPrefix}}_{{index}}_CF_PROD_PRICE101/ProductInstance",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"customFieldTemplate",
												"{{entityPrefix}}_{{index}}_CF_PROD_PRICE101",
												"ProductInstance"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04accbf1-7fc6-4e7a-b40e-cb5262498f76",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_PROD\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"CREATED\");",
													"    pm.expect(jsonData.subscription.productInstance[0].code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_PRODUCT2\");",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_PROD",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_PROD"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update service instance",
							"item": [
								{
									"name": "Create CFT ServiceInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "79dbeecb-6911-4f59-90a7-ced9bd87f7fe",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n    \"fieldType\": \"DOUBLE\",\r\n    \"appliesTo\": \"ServiceInstance\",\r\n    \"storageType\": \"SINGLE\",\r\n    \"defaultValue\": \"101\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "992b2e83-aaf9-4a5b-bf18-e8e29287e294",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2017-03-15\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8eba0a3c-0d89-42ae-b09c-816934328492",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2017-03-15\"\r\n            },\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\r\n                \"quantity\": \"2\",\r\n                \"subscriptionDate\": \"2017-03-15\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee9b7bc6-a948-42da-862b-0bf8dd699816",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_UPD_SERV_100\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_UPD_SERV_100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "677354c6-b08f-4f31-8030-d2a501c6ad84",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\n    \"serviceToUpdate\": [\n        {\n            \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n            \"endAgreementDate\": \"2017-03-29\",\n            \"customFields\": {\n                \"customField\": [\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\n                        \"doubleValue\": \"201\"\n                    }\n                ]\n            }\n        },\n        {\n            \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\n            \"endAgreementDate\": \"2017-03-30\",\n            \"customFields\": {\n                \"customField\": [\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\n                        \"doubleValue\": \"202\"\n                    }\n                ]\n            }\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/updateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"updateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription-Updated",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f34e860b-20c3-4933-958a-967bb53f6319",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_UPD_SERV_100\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(jsonBody.services.serviceInstance[0].quantity);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].customFields).to.eql(jsonBody.services.serviceInstance[1].customFields);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(jsonBody.services.serviceInstance[1].quantity);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].customFields).to.eql(jsonBody.services.serviceInstance[1].customFields);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\n    \"services\": {\n        \"serviceInstance\": [\n            {\n                \"quantity\": 1,\n                \"customFields\": {\n                    \"customField\": [\n                        {\n                            \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\n                            \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\n                            \"fieldType\": \"DOUBLE\",\n                            \"doubleValue\": 201\n                        }\n                    ]\n                }\n            },\n            {\n                \"quantity\": 2,\n                \"customFields\": {\n                    \"customField\": [\n                        {\n                            \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\n                            \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\n                            \"fieldType\": \"DOUBLE\",\n                            \"doubleValue\": 202\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_UPD_SERV_100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update services - change quantity",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3f17bdd-a1ef-4801-bf4b-e40ae1580ef1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\n    \"serviceToUpdate\": [\n        {\n            \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n            \"quantity\": \"5\"\n        },\n        {\n            \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\n            \"quantity\": \"7\"\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/updateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"updateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - Updated quantity",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2037f730-cf74-41f3-b31a-7df583296310",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.subscription.code).to.eql(jsonBody.code);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(jsonBody.services.serviceInstance[0].quantity);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].customFields).to.eql(jsonBody.services.serviceInstance[1].customFields);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(jsonBody.services.serviceInstance[1].quantity);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].customFields).to.eql(jsonBody.services.serviceInstance[1].customFields);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\n    \"services\": {\n        \"serviceInstance\": [\n            {\n                \"quantity\": 5,\n                \"customFields\": {\n                    \"customField\": [\n                        {\n                            \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\n                            \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\n                            \"fieldType\": \"DOUBLE\",\n                            \"doubleValue\": 201\n                        }\n                    ]\n                }\n            },\n            {\n                \"quantity\": 7,\n                \"customFields\": {\n                    \"customField\": [\n                        {\n                            \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\n                            \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\n                            \"fieldType\": \"DOUBLE\",\n                            \"doubleValue\": 202\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_UPD_SERV_100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CFT ServiceInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9ebdb23-6228-467b-82c4-6fd5c7becc0c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/customFieldTemplate/{{entityPrefix}}_{{index}}_CF_SERV_UPD_100/ServiceInstance",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"customFieldTemplate",
												"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100",
												"ServiceInstance"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update services - future termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d46d90e5-7794-443d-ad5f-c6061eec173f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "1fbc1dc1-ec41-46fd-95ef-cdb7339d2cb2",
												"exec": [
													"var today = new Date();\r",
													"var terminationDate = new Date();\r",
													"terminationDate.setMonth(today.getMonth() + 5);\r",
													"\r",
													"\r",
													"pm.globals.set(\"testCase.terminationDate\", terminationDate.toISOString().slice(0, 10));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\n    \"serviceToUpdate\": [\n        {\n            \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n            \"terminationDate\": \"{{testCase.terminationDate}}\",\n            \"terminationReason\": \"TERM_REASON_1\"\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/updateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"updateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find service instance - future termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1f5f0ad0-8497-403b-b374-15c2357ee9bf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.serviceInstances[0].code).to.eql(jsonBody.serviceInstances[0].code);",
													"    pm.expect(jsonData.serviceInstances[0].quantity).to.eql(jsonBody.serviceInstances[0].quantity);",
													"    pm.expect(jsonData.serviceInstances[0].subscriptionDate).to.contains(jsonBody.serviceInstances[0].subscriptionDate);",
													"    pm.expect(jsonData.serviceInstances[0].terminationDate).to.contains(pm.globals.get(\"testCase.terminationDate\"));",
													"    pm.expect(jsonData.serviceInstances[0].serviceRenewal).to.eql(jsonBody.serviceInstances[0].serviceRenewal);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"actionStatus\": {\n        \"status\": \"SUCCESS\"\n    },\n    \"serviceInstances\": [\n        {\n            \"id\": 30,\n            \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n            \"description\": \"{{baseEntityPrefix}}_SERVICE1\",\n            \"subscriptionDate\": \"2017-03-15\",\n            \"quantity\": 5,\n            \"serviceRenewal\": {\n                \"initialTermType\": \"FIXED\",\n                \"renewalTermType\": null,\n                \"initialyActiveFor\": null,\n                \"initialyActiveForUnit\": null,\n                \"calendarInitialyActiveFor\": null,\n                \"autoRenew\": false,\n                \"daysNotifyRenewal\": null,\n                \"endOfTermAction\": \"TERMINATE\",\n                \"terminationReasonCode\": \"TERM_REASON_1\",\n                \"renewFor\": null,\n                \"calendarRenewFor\": null,\n                \"renewForUnit\": null,\n                \"extendAgreementPeriodToSubscribedTillDate\": false\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/serviceInstances?subscriptionCode={{entityPrefix}}_{{index}}_SUB_UPD_SERV_100&serviceInstanceCode={{baseEntityPrefix}}_SERVICE1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"serviceInstances"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100"
												},
												{
													"key": "serviceInstanceCode",
													"value": "{{baseEntityPrefix}}_SERVICE1"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Subscribe to disable offer",
							"item": [
								{
									"name": "Disable Offer3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c145647b-daa0-403f-80e1-2a49a5827f24",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_OFFER3\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{baseEntityPrefix}}_OFFER3/disable",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{baseEntityPrefix}}_OFFER3",
												"disable"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a246e515-fc9c-49c7-b99c-8b52875b58d3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Cannot subscribe to disabled offer\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\r\n    \"subscriptionDate\": \"2015-02-01\",\r\n    \"endAgreementDate\": \"2015-05-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Enable Offer3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae411c0c-2a2d-45fa-a9a5-59e49e0ac93e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_OFFER3\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{baseEntityPrefix}}_OFFER3/enable",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{baseEntityPrefix}}_OFFER3",
												"enable"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Due date delay",
							"item": [
								{
									"name": "Find due date delay - bc",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73d12b1d-9adc-4bae-9e3b-2e977436582b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData).to.deep.equal(jsonBody);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"actionStatus\": {\r\n        \"status\": \"SUCCESS\"\r\n    },\r\n    \"dueDateDelay\": {\r\n        \"delayOrigin\": \"BC\",\r\n        \"computedDelay\": 2,\r\n        \"delayEL\": null\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/dueDateDelay?subscriptionCode={{baseEntityPrefix}}_SUB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"dueDateDelay"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{baseEntityPrefix}}_SUB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e1cbeab2-087e-4bca-87e6-3dcdd77b957f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"CA_DELAY_{{index}}\",\r\n    \"description\": \"CA_DELAY_{{index}}\",\r\n    \"customer\": \"{{baseEntityPrefix}}_CUST_3\",\r\n    \"currency\": \"USD\",\r\n    \"language\": \"ENG\",\r\n    \"creditCategory\": \"PRO\",\r\n    \"dueDateDelayEL\": \"#{ba.customerAccount.auditable.created.date}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create BA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ce5bdde7-5cec-4c1a-9de9-827d82e7becb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"BA_DELAY_{{index}}\",\r\n    \"description\": \"BA_DELAY_{{index}}\",\r\n    \"customerAccount\": \"CA_DELAY_{{index}}\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"country\": \"US\",\r\n    \"language\": \"ENG\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create UA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "05911c65-22f5-4012-901a-8951d82613c4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"UA_DELAY_{{index}}\",\r\n    \"description\": \"UA_DELAY_{{index}}\",\r\n    \"billingAccount\": \"BA_DELAY_{{index}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a476039-67f0-404a-9986-de9901252e94",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"DELAY_SUB_{{index}}\",\r\n    \"description\": \"DELAY_SUB_{{index}}\",\r\n    \"userAccount\": \"UA_DELAY_{{index}}\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\r\n    \"subscriptionDate\": \"2017-01-07\",\r\n    \"endAgreementDate\": \"2017-01-07\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find due date delay - ca",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "27e16abb-af39-45e1-ab0b-34ef084ea86e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.dueDateDelay.delayOrigin).to.deep.equal(jsonBody.delayOrigin);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"delayOrigin\": \"CA\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/dueDateDelay?subscriptionCode=DELAY_SUB_{{index}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"dueDateDelay"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "DELAY_SUB_{{index}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "49052a49-bd4f-4139-a7b9-bb3c17879a58",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"DELAY_SUB_{{index}}\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\",\r\n                \"quantity\": \"5\",\r\n                \"subscriptionDate\": \"2017-03-15\"\r\n            },\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE4\",\r\n                \"quantity\": \"10\",\r\n                \"subscriptionDate\": \"2017-05-15\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Subscription age",
							"item": [
								{
									"name": "Create recurring",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02380afa-e172-4cc7-9d8b-7825bdfb7d7f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"description\": \"{{baseEntityPrefix}}_REC1\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": false,\r\n    \"amountEditable\": true,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}-Subscription Age\"\r\n        }\r\n    ],\r\n    \"calendar\": \"MONTHLY\",\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"inputUnitDescription\": \"1\",\r\n    \"ratingUnitDescription\": \"1\",\r\n    \"unitMultiplicator\": \"1\",\r\n    \"unitNbDecimal\": \"2\",\r\n    \"durationTermInMonth\": \"4\",\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\":\"{{baseEntityPrefix}}_taxClass\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Service",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7fa31df8-9d02-4ecf-ab1a-878bc937d631",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_SERVICE_SUB_AGE\",\r\n    \"description\": \"{{baseEntityPrefix}}_SERVICE_SUB_AGE\",\r\n    \"invoicingCalendar\": \"MONTHLY\",\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_REC_SUB_AGE\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Offer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b86ebb8c-b9e0-4b1b-a29e-7b753723e21c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OFFER_SUB_AGE\",\r\n    \"description\": \"{{baseEntityPrefix}}_OFFER_SUB_AGE\",\r\n    \"name\": \"{{baseEntityPrefix}}_OFFER2\",\r\n    \"disabled\": false,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE_SUB_AGE\"\r\n            }\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate ",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate "
											]
										}
									},
									"response": []
								},
								{
									"name": "Create priceplan recurring 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "513a0eeb-0543-4fa4-a2ea-092ed11add8a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_REC_SUB_AGE2\",\r\n    \"description\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"eventCode\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"amountWithoutTax\": \"5\",\r\n    \"amountWithTax\": \"10\",\r\n    \"priority\": \"1\",\r\n    \"minSubscriptionAgeInMonth\": \"5\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create priceplan recurring 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "30a3bd35-1225-4772-af70-1be4ef1e1c76",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_REC_SUB_AGE2\",\r\n    \"description\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"eventCode\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"amountWithoutTax\": \"15\",\r\n    \"amountWithTax\": \"30\",\r\n    \"priority\": \"1\",\r\n    \"maxSubscriptionAgeInMonth\": \"3\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create priceplan recurring",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "302a558b-6534-45e7-bd28-4c1ff3aaa23b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_REC_SUB_AGE1\",\r\n    \"description\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"eventCode\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"amountWithoutTax\": \"2\",\r\n    \"amountWithTax\": \"4\",\r\n    \"priority\": \"2\",\r\n    \"minSubscriptionAgeInMonth\": \"1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fcd31116-6685-4ccf-b0dd-4b61ef774c00",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_AGE\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER_SUB_AGE\",\r\n    \"subscriptionDate\": \"2017-03-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "509df5bf-1a51-44f3-a941-a888f0ada3b7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_AGE\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE_SUB_AGE\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2017-05-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate subscription 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c952d378-26ff-4095-b34b-6272ff777246",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_AGE\",\n    \"terminationReason\": \"TERM_REASON_1\",\n    \"terminationDate\": \"2017-12-01\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f63ea0f5-f112-4794-a052-6ce38ff00eb1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_AGE2\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER_SUB_AGE\",\r\n    \"subscriptionDate\": \"2017-07-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "efeedd46-457b-46cf-84ae-96689de3acb2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_AGE2\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE_SUB_AGE\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2017-07-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate subscription 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3cc05574-d7e2-425c-80fa-d7179a9901c8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_AGE2\",\n    \"terminationReason\": \"TERM_REASON_1\",\n    \"terminationDate\": \"2017-09-01\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Activate Subscription",
							"item": [
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "053a6e55-4464-45ae-9413-e610a921a09d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_ACTIVATION\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_ACTIVATION\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2018-10-13\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instanticate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b6d63fa7-a32a-40c6-a2c6-2c1943788e84",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_ACTIVATION\",\n    \"servicesToInstantiate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2018-10-13\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a8a32655-1635-48f5-b2e4-8c5afd9c7de5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_ACTIVATION2\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_ACTIVATION2\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2018-10-13\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instanticate services 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c02d494-4fa8-4df4-9356-16868e97cc4a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_ACTIVATION2\",\n    \"servicesToInstantiate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2018-10-13\"\n            },\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2018-10-13\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b77c1be0-f4bd-437d-b51d-445b6e7b72ee",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{entityPrefix}}_{{index}}_SUB_ACTIVATION",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate subscription 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf591b29-9b48-4efa-8686-b75d5ea56a1f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{entityPrefix}}_{{index}}_SUB_ACTIVATION2",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Subscription status notification",
							"item": [
								{
									"name": "Create script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "16192e8f-0171-4c3d-b009-5023736e1869",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"org.meveo.service.script.SubscriptionStatusUpdatedScript\",\r\n    \"description\": \"rating script\",\r\n    \"type\": \"JAVA\",\r\n    \"script\": \"package org.meveo.service.script;\\n\\nimport org.meveo.admin.exception.BusinessException;\\nimport org.meveo.model.billing.Subscription;\\nimport org.meveo.model.billing.SubscriptionStatusEnum;\\nimport org.meveo.service.billing.impl.SubscriptionService;\\nimport org.meveo.service.script.Script;\\n\\nimport java.util.Map;\\n\\npublic class SubscriptionStatusUpdatedScript extends Script {\\n\\n    private SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface(\\\"SubscriptionService\\\");\\n\\n    @Override\\n    public void execute(Map<String, Object> methodContext) throws BusinessException {\\n        log.info(\\\"<<<<<<< SubscriptionStatusUpdatedScript >>>>>>>>>>\\\");\\n        Subscription subscription = (Subscription) methodContext.get(\\\"subscription\\\");\\n        SubscriptionStatusEnum previousState = (SubscriptionStatusEnum) methodContext.get(\\\"previousState\\\");\\n        SubscriptionStatusEnum currentState = (SubscriptionStatusEnum) methodContext.get(\\\"currentState\\\");\\n        log.info(\\\"subscription.getCode() : \\\" + subscription.getCode());\\n        log.info(\\\"currentState : \\\" + currentState.name());\\n        log.info(\\\"previousState : \\\" + previousState.name());\\n        subscription.setDescription(\\\"from_\\\" + previousState + \\\"_to_\\\" + currentState);\\n        subscriptionService.update(subscription);\\n    }\\n} \"\r\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create notifications",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd22c898-91ae-4220-beaa-c70066e97869",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SubscriptionStatusUpdatedNotification\",\r\n    \"classNameFilter\": \"org.meveo.model.billing.Subscription\",\r\n    \"eventTypeFilter\": \"STATUS_UPDATED\",\r\n    \"scriptInstanceCode\": \"org.meveo.service.script.SubscriptionStatusUpdatedScript\",\r\n    \"scriptParams\": {\r\n        \"subscription\": \"#{event.entity}\",\r\n        \"previousState\": \"#{event.previousState}\",\r\n        \"currentState\": \"#{event.currentState}\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "69136659-4a59-4b05-a97b-10afdba9c24c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2018-10-13\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instanticate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2372a06a-7091-45a4-9eb5-e8d495d5f0e1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION\",\n    \"servicesToInstantiate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2018-10-13\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "94f8e069-e708-4de4-bcdd-6081910b7b47",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e1e1ec8-40ec-4d40-b9dd-64cf2704bf4e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.subscription.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.subscription.description).to.deep.equal(jsonBody.description);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION\",\n    \"description\": \"from_CREATED_to_ACTIVE\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove Notification",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ecacfb8b-8342-4398-b671-a687089ad779",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/{{entityPrefix}}_{{index}}_SubscriptionStatusUpdatedNotification",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"{{entityPrefix}}_{{index}}_SubscriptionStatusUpdatedNotification"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "44477c96-fe99-493e-b725-09b452cc6d46",
								"type": "text/javascript",
								"exec": [
									"var today = new Date();",
									"var terminationDate = new Date();",
									"var days20before = new Date();",
									"var days10before = new Date();",
									"var days5before = new Date();",
									"var days3before = new Date();",
									"var days2before = new Date();",
									"terminationDate.setDate(today.getDate() + 1);",
									"days20before.setDate(today.getDate() - 20);",
									"days10before.setDate(today.getDate() - 10);",
									"days5before.setDate(today.getDate() - 5);",
									"days3before.setDate(today.getDate() - 3);",
									"days2before.setDate(today.getDate() - 2);",
									"",
									"pm.globals.set(\"index\", 194);",
									"pm.globals.set(\"today\", today.toISOString().slice(0, 10)+\"T\");",
									"pm.globals.set(\"terminationDate\", terminationDate.toISOString().slice(0, 10)+\"T\");",
									"pm.globals.set(\"20daysBefore\", days20before.toISOString().slice(0, 10)+\"T\");",
									"pm.globals.set(\"10daysBefore\", days10before.toISOString().slice(0, 10)+\"T\");",
									"pm.globals.set(\"5daysBefore\", days5before.toISOString().slice(0, 10)+\"T\");",
									"pm.globals.set(\"3daysBefore\", days3before.toISOString().slice(0, 10)+\"T\");",
									"pm.globals.set(\"2daysBefore\", days2before.toISOString().slice(0, 10)+\"T\");"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a765b3d4-7b58-4e2b-818d-6474eeeb068b",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Subscription with Inherited CF",
					"item": [
						{
							"name": "Tests",
							"item": [
								{
									"name": "Create CFT for User Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "71eb96d5-271c-4a33-a66a-729bc2e1fe26",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_UA_CF_INHERITED\",\n    \"description\": \"{{entityPrefix}}_UA_CF_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"UserAccount\",\n    \"storageType\": \"SINGLE\",\n    \"defaultValue\": \"userAccountCF\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CFT for Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "638492c7-b939-4008-8983-6ed8bb3c238d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_SUB_CF_INHERITED\",\n    \"description\": \"{{entityPrefix}}_SUB_CF_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"Subscription\",\n    \"storageType\": \"SINGLE\",\n    \"defaultValue\": \"subscriptionCF\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CFT for Subscription - Not Inherited",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88d71527-0aaa-415c-b073-6c96dc519498",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_SUB_CF_NOT_INHERITED\",\n    \"description\": \"{{entityPrefix}}_SUB_CF_NOT_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"Subscription\",\n    \"storageType\": \"SINGLE\",\n    \"defaultValue\": \"subscriptionCFNotInherited\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User Account 3 - Temp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c5dc4996-861c-4b57-8c80-55c1b523d19f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_UA_3_InheritedCF\",\n    \"description\": \"{{entityPrefix}}_{{index}}_UA_3_InheritedCF\",\n    \"billingAccount\": \"{{baseEntityPrefix}}_BA_3\",\n    \"externalRef1\": \"EXTREF1\",\n    \"externalRef2\": \"EXTREF2\",\n    \"name\": {\n        \"title\": \"MR\",\n        \"firstName\": \"Edward\",\n        \"lastName\": \"Legaspi\"\n    },\n    \"address\": {\n        \"address1\": \"adress1\",\n        \"address3\": \"adress3\",\n        \"zipCode\": \"21000\",\n        \"city\": \"Dijon\",\n        \"country\": \"France\"\n    },\n    \"subscriptionDate\": \"2016-03-10\",\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"{{entityPrefix}}_UA_CF_INHERITED\",\n                \"stringValue\": \"UA_INHERITED\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f6e319f-ada3-47d9-8390-27622beefd68",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_InheritedCF\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_InheritedCF\",\n    \"userAccount\": \"{{entityPrefix}}_{{index}}_UA_3_InheritedCF\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\n    \"subscriptionDate\": \"2015-02-01\",\n    \"endAgreementDate\": \"2015-05-01\",\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"{{entityPrefix}}_SUB_CF_INHERITED\",\n                \"stringValue\": \"SUB_INHERITED\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd266cc1-4642-4ad5-951e-e190d8cdbd86",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_InheritedCF\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"CREATED\");",
													"    pm.expect(jsonData.subscription.userAccount).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_UA_3_InheritedCF\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.contains(\"2015-02-01T\");",
													"    pm.expect(jsonData.subscription.endAgreementDate).to.contains(\"2015-05-01T\");",
													"    pm.expect(jsonData.subscription.customFields.customField[0].code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_SUB_CF_NOT_INHERITED\");",
													"    pm.expect(jsonData.subscription.customFields.customField[0].description).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_SUB_CF_NOT_INHERITED\");",
													"    pm.expect(jsonData.subscription.customFields.customField[0].fieldType).to.eql(\"STRING\");",
													"    pm.expect(jsonData.subscription.customFields.customField[0].stringValue).to.eql(\"subscriptionCFNotInherited\");",
													"    pm.expect(jsonData.subscription.customFields.customField[1].code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_SUB_CF_INHERITED\");",
													"    pm.expect(jsonData.subscription.customFields.customField[1].description).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_SUB_CF_INHERITED\");",
													"    pm.expect(jsonData.subscription.customFields.customField[1].fieldType).to.eql(\"STRING\");",
													"    pm.expect(jsonData.subscription.customFields.customField[1].stringValue).to.eql(\"SUB_INHERITED\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_InheritedCF\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_InheritedCF\",\n    \"userAccount\": \"{{entityPrefix}}_{{index}}_UA_3_InheritedCF\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"{{entityPrefix}}_SUB_CF_NOT_INHERITED\",\n                \"description\": \"{{entityPrefix}}_SUB_CF_NOT_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"stringValue\": \"subscriptionCFNotInherited\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_SUB_CF_INHERITED\",\n                \"description\": \"{{entityPrefix}}_SUB_CF_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"stringValue\": \"SUB_INHERITED\"\n            }\n        ],\n        \"inheritedCustomField\": [\n            {\n                \"code\": \"{{entityPrefix}}_UA_CF_INHERITED\",\n                \"description\": \"{{entityPrefix}}_UA_CF_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"stringValue\": \"UA_INHERITED\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_InheritedCF",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_InheritedCF"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT UA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "09dcec67-e3ce-490f-b52f-94ebc1881152",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_UA_CF_INHERITED/UserAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"{{entityPrefix}}_UA_CF_INHERITED",
												"UserAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT SUB",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c0ea3cf-5f9f-4ff7-bec5-7dd4a9edd958",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_SUB_CF_INHERITED/Subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"{{entityPrefix}}_SUB_CF_INHERITED",
												"Subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT SUB 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "11fc788a-6d78-4aac-88d8-bfdd6e99a492",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_SUB_CF_NOT_INHERITED/Subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"{{entityPrefix}}_SUB_CF_NOT_INHERITED",
												"Subscription"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Inherited CF in Account",
							"item": [
								{
									"name": "Create CFT for CUST",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a890786-40e8-4061-8ced-6bbe77f692a1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n    \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"Customer\",\n    \"storageType\": \"MATRIX\",\n    \"defaultValue\": \"INHERITED_CF\",\n    \"mapKeyType\": \"STRING\",\n    \"matrixColumn\": [\n        {\n            \"code\": \"MAT_1\",\n            \"position\": \"1\",\n            \"label\": \"One\",\n            \"keyType\": \"STRING\"\n        },\n        {\n            \"code\": \"MAT_2\",\n            \"position\": \"2\",\n            \"label\": \"Two\",\n            \"keyType\": \"RON\"\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CFT for BA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5d9348f-2584-4de1-842d-1ce85163d697",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n    \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"BillingAccount\",\n    \"storageType\": \"MATRIX\",\n    \"defaultValue\": \"INHERITED_CF\",\n    \"mapKeyType\": \"STRING\",\n    \"matrixColumn\": [\n        {\n            \"code\": \"MAT_1\",\n            \"position\": \"1\",\n            \"label\": \"One\",\n            \"keyType\": \"STRING\"\n        },\n        {\n            \"code\": \"MAT_2\",\n            \"position\": \"2\",\n            \"label\": \"Two\",\n            \"keyType\": \"RON\"\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CFT for CA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e5a6633b-e7be-4304-8513-6f4854534b33",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n    \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"CustomerAccount\",\n    \"storageType\": \"MATRIX\",\n    \"defaultValue\": \"INHERITED_CF\",\n    \"mapKeyType\": \"STRING\",\n    \"matrixColumn\": [\n        {\n            \"code\": \"MAT_1\",\n            \"position\": \"1\",\n            \"label\": \"One\",\n            \"keyType\": \"STRING\"\n        },\n        {\n            \"code\": \"MAT_2\",\n            \"position\": \"2\",\n            \"label\": \"Two\",\n            \"keyType\": \"RON\"\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CFT for UA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b325ea4b-5a27-4910-ab11-143f257d8729",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n    \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"UserAccount\",\n    \"storageType\": \"MATRIX\",\n    \"defaultValue\": \"INHERITED_CF\",\n    \"mapKeyType\": \"STRING\",\n    \"matrixColumn\": [\n        {\n            \"code\": \"MAT_1\",\n            \"position\": \"1\",\n            \"label\": \"One\",\n            \"keyType\": \"STRING\"\n        },\n        {\n            \"code\": \"MAT_2\",\n            \"position\": \"2\",\n            \"label\": \"Two\",\n            \"keyType\": \"RON\"\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create AccountHierarchy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "316ed49c-51c4-4a78-804d-bf1be1eebf41",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{entityPrefix}}_432@manaty.net\",\n    \"paymentMethod\": \"2\",\n    \"customerId\": \"{{entityPrefix}}_{{index}}_CUST1\",\n    \"sellerCode\": \"SELLER_FR\",\n    \"customerBrandCode\": \"DEFAULT\",\n    \"customerCategoryCode\": \"CLIENT\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"billingCycleCode\": \"CYC_INV_MT_1\",\n    \"titleCode\": \"MR\",\n    \"firstName\": \"firstName\",\n    \"lastName\": \"lastName\",\n    \"phoneNumber\": \"+102354749\",\n    \"address1\": \"Address1\",\n    \"address2\": \"Address2\",\n    \"zipCode\": \"75001\",\n    \"city\": \"Tunis\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "06f77e3e-b268-4569-884b-2ff051bd9852",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\n    \"customerCategory\": \"CLIENT\",\n    \"seller\": \"SELLER_FR\",\n    \"customerBrand\": \"DEFAULT\",\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n                \"mapValue\": {\n                    \"MAT_1\": {\n                        \"value\": \"ValueC1\"\n                    },\n                    \"MAT_2\": {\n                        \"value\": \"ValueC2\"\n                    }\n                }\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create customer account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "81fef607-a8ac-456c-b7d7-d63fd00484e3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\n    \"customer\": \"{{entityPrefix}}_{{index}}_CUST1\",\n    \"currency\": \"EUR\",\n    \"language\": \"FRA\",\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n                \"mapValue\": {\n                    \"MAT_1\": {\n                        \"value\": \"ValueCA1\"\n                    },\n                    \"MAT_2\": {\n                        \"value\": \"ValueCA2\"\n                    }\n                }\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create billing account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "136158bb-d21f-476e-8c7f-393cb7fe01dc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BA\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerAccount\": \"{{entityPrefix}}_{{index}}_CUST1\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"nextInvoiceDate\": \"2016-04-01\",\r\n    \"subscriptionDate\": \"2016-01-01\",\r\n    \"electronicBilling\": true,\r\n    \"status\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}@manaty.net\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\r\n                \"mapValue\": {\r\n                    \"MAT_1\": {\r\n                        \"value\": \"ValueBA1\"\r\n                    },\r\n                    \"MAT_2\": {\r\n                        \"value\": \"ValueBA2\"\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4ac2c122-2f9d-440a-911c-f3fa624daa58",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_UA\",\r\n    \"billingAccount\": \"{{entityPrefix}}_{{index}}_CUST1\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"address1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"address3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"subscriptionDate\": \"2016-03-10\",\r\n    \"status\": \"ACTIVE\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\r\n                \"mapValue\": {\r\n                    \"MAT_1\": {\r\n                        \"value\": \"ValueUA1\"\r\n                    },\r\n                    \"MAT_2\": {\r\n                        \"value\": \"ValueUA2\"\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find customer account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d6a25478-9b9b-479c-a6a1-1883ac3f6d34",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerAccount.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_CUST1\");",
													"    pm.expect(jsonData.customerAccount.customFields.customField[0].code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_ACCOUNT_CF_INHERITED\");",
													"    pm.expect(jsonData.customerAccount.customFields.customField[0].description).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_SUB_UA_CF_INHERITED\");",
													"    pm.expect(jsonData.customerAccount.customFields.customField[0].fieldType).to.eql(\"STRING\");",
													"    pm.expect(jsonData.customerAccount.customFields.customField[0].mapValue.MAT_1.value).to.eql(\"ValueCA1\");",
													"    pm.expect(jsonData.customerAccount.customFields.customField[0].mapValue.MAT_2.value).to.eql(\"ValueCA2\");",
													"    pm.expect(jsonData.customerAccount.customFields.customField[0].mapValue.key.value).to.eql(\"MAT_1/MAT_2\");",
													"",
													"    ",
													"    pm.expect(jsonData.customerAccount.customFields.inheritedCustomField[0].code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_ACCOUNT_CF_INHERITED\");",
													"    pm.expect(jsonData.customerAccount.customFields.inheritedCustomField[0].description).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_SUB_UA_CF_INHERITED\");",
													"    pm.expect(jsonData.customerAccount.customFields.inheritedCustomField[0].fieldType).to.eql(\"STRING\");",
													"    pm.expect(jsonData.customerAccount.customFields.inheritedCustomField[0].mapValue.MAT_1.value).to.eql(\"ValueC1\");",
													"    pm.expect(jsonData.customerAccount.customFields.inheritedCustomField[0].mapValue.MAT_2.value).to.eql(\"ValueC2\");",
													"    pm.expect(jsonData.customerAccount.customFields.inheritedCustomField[0].mapValue.key.value).to.eql(\"MAT_1/MAT_2\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\r\n                \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\r\n                \"fieldType\": \"STRING\",\r\n                \"mapValue\": {\r\n                    \"MAT_1\": {\r\n                        \"value\": \"ValueCA1\"\r\n                    },\r\n                    \"MAT_2\": {\r\n                        \"value\": \"ValueCA2\"\r\n                    },\r\n                    \"key\": {\r\n                        \"value\": \"MAT_1/MAT_2\"\r\n                    }\r\n                }\r\n            }\r\n        ],\r\n        \"inheritedCustomField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\r\n                \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\r\n                \"fieldType\": \"STRING\",\r\n                \"mapValue\": {\r\n                    \"MAT_1\": {\r\n                        \"value\": \"ValueC1\"\r\n                    },\r\n                    \"MAT_2\": {\r\n                        \"value\": \"ValueC2\"\r\n                    },\r\n                    \"key\": {\r\n                        \"value\": \"MAT_1/MAT_2\"\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CUST1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CUST1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find billing account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7dc31f5f-1d87-4399-bd75-ba65e7c5875c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingAccount.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_CUST1\");",
													"    pm.expect(jsonData.billingAccount.description).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_BA\");",
													"    pm.expect(jsonData.billingAccount.customFields.customField[0].code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_ACCOUNT_CF_INHERITED\");",
													"    pm.expect(jsonData.billingAccount.customFields.customField[0].description).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_SUB_UA_CF_INHERITED\");",
													"    pm.expect(jsonData.billingAccount.customFields.customField[0].fieldType).to.eql(\"STRING\");",
													"    pm.expect(jsonData.billingAccount.customFields.customField[0].mapValue.MAT_1.value).to.eql(\"ValueBA1\");",
													"    pm.expect(jsonData.billingAccount.customFields.customField[0].mapValue.MAT_2.value).to.eql(\"ValueBA2\");",
													"    pm.expect(jsonData.billingAccount.customFields.customField[0].mapValue.key.value).to.eql(\"MAT_1/MAT_2\");",
													"",
													"    ",
													"    pm.expect(jsonData.billingAccount.customFields.inheritedCustomField[0].code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_ACCOUNT_CF_INHERITED\");",
													"    pm.expect(jsonData.billingAccount.customFields.inheritedCustomField[0].description).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_SUB_UA_CF_INHERITED\");",
													"    pm.expect(jsonData.billingAccount.customFields.inheritedCustomField[0].fieldType).to.eql(\"STRING\");",
													"    pm.expect(jsonData.billingAccount.customFields.inheritedCustomField[0].mapValue.MAT_1.value).to.eql(\"ValueCA1\");",
													"    pm.expect(jsonData.billingAccount.customFields.inheritedCustomField[0].mapValue.MAT_2.value).to.eql(\"ValueCA2\");",
													"    pm.expect(jsonData.billingAccount.customFields.inheritedCustomField[0].mapValue.key.value).to.eql(\"MAT_1/MAT_2\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_BA\",\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n                \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"mapValue\": {\n                    \"MAT_1\": {\n                        \"value\": \"ValueBA1\"\n                    },\n                    \"MAT_2\": {\n                        \"value\": \"ValueBA2\"\n                    },\n                    \"key\": {\n                        \"value\": \"MAT_1/MAT_2\"\n                    }\n                }\n            }\n        ],\n        \"inheritedCustomField\": [\n            {\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n                \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"mapValue\": {\n                    \"MAT_1\": {\n                        \"value\": \"ValueCA1\"\n                    },\n                    \"MAT_2\": {\n                        \"value\": \"ValueCA2\"\n                    },\n                    \"key\": {\n                        \"value\": \"MAT_1/MAT_2\"\n                    }\n                }\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_CUST1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CUST1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find user account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9bca6fde-37a3-4e1f-9b31-18fdfe56f2c7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.userAccount.code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_CUST1\");",
													"    pm.expect(jsonData.userAccount.description).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_UA\");",
													"    pm.expect(jsonData.userAccount.customFields.customField[0].code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_ACCOUNT_CF_INHERITED\");",
													"    pm.expect(jsonData.userAccount.customFields.customField[0].description).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_SUB_UA_CF_INHERITED\");",
													"    pm.expect(jsonData.userAccount.customFields.customField[0].fieldType).to.eql(\"STRING\");",
													"    pm.expect(jsonData.userAccount.customFields.customField[0].mapValue.MAT_1.value).to.eql(\"ValueUA1\");",
													"    pm.expect(jsonData.userAccount.customFields.customField[0].mapValue.MAT_2.value).to.eql(\"ValueUA2\");",
													"    pm.expect(jsonData.userAccount.customFields.customField[0].mapValue.key.value).to.eql(\"MAT_1/MAT_2\");",
													"",
													"    ",
													"    pm.expect(jsonData.userAccount.customFields.inheritedCustomField[0].code).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_ACCOUNT_CF_INHERITED\");",
													"    pm.expect(jsonData.userAccount.customFields.inheritedCustomField[0].description).to.eql(pm.collectionVariables.get(\"entityPrefix\") + \"_SUB_UA_CF_INHERITED\");",
													"    pm.expect(jsonData.userAccount.customFields.inheritedCustomField[0].fieldType).to.eql(\"STRING\");",
													"    pm.expect(jsonData.userAccount.customFields.inheritedCustomField[0].mapValue.MAT_1.value).to.eql(\"ValueBA1\");",
													"    pm.expect(jsonData.userAccount.customFields.inheritedCustomField[0].mapValue.MAT_2.value).to.eql(\"ValueBA2\");",
													"    pm.expect(jsonData.userAccount.customFields.inheritedCustomField[0].mapValue.key.value).to.eql(\"MAT_1/MAT_2\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_UA\",\n    \"customFields\": {\n        \"customField\": [\n            {\n            },\n            {\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n                \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"mapValue\": {\n                    \"MAT_1\": {\n                        \"value\": \"ValueUA1\"\n                    },\n                    \"MAT_2\": {\n                        \"value\": \"ValueUA2\"\n                    },\n                    \"key\": {\n                        \"value\": \"MAT_1/MAT_2\"\n                    }\n                }\n            }\n        ],\n        \"inheritedCustomField\": [\n            {\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n                \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"mapValue\": {\n                    \"MAT_1\": {\n                        \"value\": \"ValueBA1\"\n                    },\n                    \"MAT_2\": {\n                        \"value\": \"ValueBA2\"\n                    },\n                    \"key\": {\n                        \"value\": \"MAT_1/MAT_2\"\n                    }\n                }\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_CUST1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CUST1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete User Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75392d63-8720-40a2-a89d-519a9c32f364",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/{{entityPrefix}}_{{index}}_CUST1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"{{entityPrefix}}_{{index}}_CUST1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Billing Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "386699b8-b501-430b-b54c-24a6f3964e35",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/{{entityPrefix}}_{{index}}_CUST1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"{{entityPrefix}}_{{index}}_CUST1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CustomerAccount",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e52853ba-65d6-4deb-9d05-e128d27cbfea",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/{{entityPrefix}}_{{index}}_CUST1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"{{entityPrefix}}_{{index}}_CUST1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1295dd9d-db98-44ac-8fb6-0a22064efc66",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/{{entityPrefix}}_{{index}}_CUST1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"{{entityPrefix}}_{{index}}_CUST1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT UA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9018166-3aa4-4364-a736-44e7e8c8e0bc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_ACCOUNT_CF_INHERITED/UserAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"{{entityPrefix}}_ACCOUNT_CF_INHERITED",
												"UserAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT BA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c4ea8046-3a59-48ce-b01c-3b25a9f82e89",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_ACCOUNT_CF_INHERITED/BillingAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"{{entityPrefix}}_ACCOUNT_CF_INHERITED",
												"BillingAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT CA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa3c0d24-4fe8-4e68-9b94-0f8657d12fb7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_ACCOUNT_CF_INHERITED/CustomerAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"{{entityPrefix}}_ACCOUNT_CF_INHERITED",
												"CustomerAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT CUST",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d501381-aa8b-4b5d-ab50-620dd6b6f2c2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_ACCOUNT_CF_INHERITED/Customer",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"{{entityPrefix}}_ACCOUNT_CF_INHERITED",
												"Customer"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6a8dd042-9c28-450c-9af6-a8f2c5a2a884",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 460);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4057b29b-377b-4fcb-9dd6-0ac00673431d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "EL expression tests",
					"item": [
						{
							"name": "Calling script from EL",
							"item": [
								{
									"name": "Create script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7cb65e85-e717-4550-989d-e7c6c5d97e3b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"org.meveo.service.script.The{{baseEntityPrefix}}_ScriptEL\",\n    \"type\": \"JAVA\",\n    \"script\": \"package org.meveo.service.script;           \\n            import java.util.Map;\\n            import java.math.BigDecimal;\\n            import org.meveo.admin.exception.BusinessException;\\n            import org.meveo.model.admin.User;\\n            import org.meveo.model.crm.Provider;\\n            import org.meveo.model.BusinessEntity;\\n            import org.slf4j.Logger;\\n            import org.slf4j.LoggerFactory;\\n            public class The{{baseEntityPrefix}}_ScriptEL extends Script {\\n                private static final Logger log = LoggerFactory.getLogger(The{{baseEntityPrefix}}_ScriptEL.class);\\n                public void execute(Map<String,Object> context) throws BusinessException{\\n                    log.debug(\\\"The{{baseEntityPrefix}}_ScriptEL called\\\");\\n                    context.put(Script.RESULT_VALUE, ((BusinessEntity)context.get(Script.CONTEXT_ENTITY)).getCode()!=null && ((BusinessEntity)context.get(Script.CONTEXT_ENTITY)).getCode().startsWith(\\\"EL_\\\"));                 \\n                }\\n            }\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CFT on Charge",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e9a8bbb-17b0-4aa2-91bb-2c293ec91b69",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_CFT_EL_SCRIPT\",\n    \"description\": \"Field visible on entities with code starting 'EL_'\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"ChargeTemplate\",\n    \"defaultValue\": \"KUKU\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": true,\n    \"applicableOnEl\": \"#{mv:executeScript(entity,'org.meveo.service.script.The{{baseEntityPrefix}}_ScriptEL', null, entity.auditable.creator)}\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Recuring Charge OK",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e475f36-30e4-47cd-ac20-6be458aa9592",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_REC1\",\n    \"invoiceSubCategory\": \"SUB_DATA\",\n    \"calendar\": \"MONTHLY\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate ",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate "
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "45d02f3a-452b-4dbc-98a4-070b23a467ec",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customFieldTemplateCode\": \"{{baseEntityPrefix}}_CFT_EL_SCRIPT\",\n    \"appliesTo\": \"ChargeTemplate\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/{{baseEntityPrefix}}_CFT_EL_SCRIPT/ChargeTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"{{baseEntityPrefix}}_CFT_EL_SCRIPT",
												"ChargeTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove Script Instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "77bd86ec-902e-4be2-a1b7-5a858caac2e8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"removeScriptInstanceRequest\": \"org.meveo.service.script.The{{baseEntityPrefix}}_ScriptEL\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/org.meveo.service.script.The{{baseEntityPrefix}}_ScriptEL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"org.meveo.service.script.The{{baseEntityPrefix}}_ScriptEL"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Charge filter expression",
							"item": [
								{
									"name": "Update recurring 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "38dc31d6-3cf5-4aaf-bb02-ed718df5d325",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_REC3\",\n    \"description\": \"{{baseEntityPrefix}}_REC3\",\n    \"invoiceSubCategory\": \"SUB_DATA\",\n    \"disabled\": false,\n    \"amountEditable\": false,\n    \"languageDescriptions\": [\n        {\n            \"languageCode\": \"FRA\",\n            \"description\": \"{{baseEntityPrefix}}-Forfait Test\"\n        }\n    ],\n    \"calendar\": \"MONTHLY\",\n    \"subscriptionProrata\": true,\n    \"terminationProrata\": true,\n    \"applyInAdvance\": true,\n    \"inputUnitDescription\": \"1\",\n    \"ratingUnitDescription\": \"1\",\n    \"unitMultiplicator\": \"1\",\n    \"unitNbDecimal\": \"2\",\n    \"durationTermInMonth\": \"4\",\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"triggeredEdrs\": {\n        \"triggeredEdr\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_EDR1\"\n            }\n        ]\n    },\n    \"filterExpression\": false\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc5165bc-90b5-48f7-8b8c-22480a6920a2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CHARGE_FILTER\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_2\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER2\",\n    \"subscriptionDate\": \"2018-01-01\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c55c3456-019e-4f91-8933-95b2f5ed4ce0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_CHARGE_FILTER\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\",\n                \"quantity\": \"2\",\n                \"subscriptionDate\": \"2018-01-01\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bbe6b16f-9363-4591-b532-ae0584a8f4e0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CHARGE_FILTER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_CHARGE_FILTER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_CHARGE_FILTER"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update recurring 3 - restore",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d2e4f11-0c51-4dcf-92dc-48f9bf12f7e5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_REC3\",\n    \"description\": \"{{baseEntityPrefix}}_REC3\",\n    \"invoiceSubCategory\": \"SUB_DATA\",\n    \"disabled\": false,\n    \"amountEditable\": false,\n    \"languageDescriptions\": [\n        {\n            \"languageCode\": \"FRA\",\n            \"description\": \"{{baseEntityPrefix}}-Forfait Test\"\n        }\n    ],\n    \"calendar\": \"MONTHLY\",\n    \"subscriptionProrata\": true,\n    \"terminationProrata\": true,\n    \"applyInAdvance\": true,\n    \"inputUnitDescription\": \"1\",\n    \"ratingUnitDescription\": \"1\",\n    \"unitMultiplicator\": \"1\",\n    \"unitNbDecimal\": \"2\",\n    \"durationTermInMonth\": \"4\",\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"triggeredEdrs\": {\n        \"triggeredEdr\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_EDR1\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "InvoiceType - EL AO",
							"item": [
								{
									"name": "Create Service1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f5467fdd-5084-4591-856c-f48beacbb3e8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_EL_INV_SERVICE1\",\n    \"description\": \"{{entityPrefix}}_EL_INV_SERVICE1\",\n    \"serviceChargeTemplateUsages\": {\n        \"serviceChargeTemplateUsage\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_USAGE1\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Offer1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8335fb57-225f-4979-beb3-87fa51dce803",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_EL_INV_OFFER1\",\n    \"description\": \"{{entityPrefix}}_EL_INV_OFFER1\",\n    \"name\": \"{{baseEntityPrefix}}_EL_INV_OFFER1\",\n    \"disabled\": false,\n    \"offerServiceTemplate\": [\n        {\n            \"serviceTemplate\": {\n                \"code\": \"{{entityPrefix}}_EL_INV_SERVICE1\"\n            }\n        }\n    ],\n    \"lifeCycleStatus\": \"ACTIVE\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create InvoiceType - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1056a1d2-e039-4eee-89e3-e963e77af0d1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_InvTypeElAO\",\n    \"description\": \"{{entityPrefix}}_{{index}}_Description_Created\",\n    \"occTemplateCode\": \"INV_REB\",\n    \"occTemplateNegativeCode\": \"PAY_TIP\",\n    \"sequenceDto\": {\n        \"prefixEL\": \"Fact_\",\n        \"sequenceSize\": \"2\",\n        \"currentInvoiceNb\": \"1\"\n    },\n    \"sellerSequence\": {\n        \"SELLER_FR\": {\n            \"prefixEL\": \"SellFact_\",\n            \"sequenceSize\": \"9\",\n            \"currentInvoiceNb\": \"9\"\n        }\n    },\n    \"appliesTo\": [\n        \"COM\"\n    ],\n    \"matchingAuto\": false,\n    \"billingTemplateName\": \"BTN\",\n    \"billingTemplateNameEL\": \"DEMO_#{invoice.id}\",\n    \"occTemplateCodeEl\": \"#{invoice.invoiceNumber.startsWith(\\\"Fact_\\\")?\\\"INV_STD\\\":\\\"INV_REB\\\"}\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate ",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate "
											]
										}
									},
									"response": []
								},
								{
									"name": "Create BillingCycle - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "daff5d31-a032-4d73-bd60-907f3fcac7ff",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_BC_ElAO\",\n    \"description\": \"{{entityPrefix}}_{{index}}_BC_ElAO\",\n    \"dueDateDelay\": \"1\",\n    \"calendar\": \"MONTHLY\",\n    \"invoiceDateDelay\": \"1\",\n    \"invoiceTypeCode\": \"{{entityPrefix}}_{{index}}_InvTypeElAO\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create AccountHierarchy - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9708b83-3b95-4236-876f-a3502096a53c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{entityPrefix}}_43@manaty.net\",\n    \"customerId\": \"{{entityPrefix}}_{{index}}_INV_CUST_ElAO\",\n    \"sellerCode\": \"SELLER_US\",\n    \"customerBrandCode\": \"DEFAULT\",\n    \"customerCategoryCode\": \"CLIENT\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"billingCycleCode\": \"{{entityPrefix}}_{{index}}_BC_ElAO\",\n    \"titleCode\": \"MR\",\n    \"firstName\": \"toto\",\n    \"lastName\": \"toc\",\n    \"phoneNumber\": \"+102354749\",\n    \"address1\": \"Address1\",\n    \"address2\": \"Address2\",\n    \"zipCode\": \"4050\",\n    \"city\": \"Los Banana\",\n    \"methodOfPayment\": [\n        {\n            \"paymentMethodType\": \"DIRECTDEBIT\",\n            \"bankCoordinates\": {\n                \"bankCode\": \"12456\",\n                \"branchCode\": \"23456\",\n                \"accountNumber\": \"34589324756\",\n                \"key\": \"45\",\n                \"iban\": \"1212\",\n                \"bic\": \"67789456\",\n                \"accountOwner\": \"Me and co\",\n                \"bankName\": \"Some bank\",\n                \"bankId\": \"78946\",\n                \"issuerNumber\": \"46789\",\n                \"issuerName\": \"Some issuer\",\n                \"ics\": \"5587\"\n            }\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a6ca2f2-0728-43d7-8f8f-46fba9cc29e1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_INV_SUB_ElAO\",\n    \"description\": \"{{entityPrefix}}_{{index}}_INV_SUB_ElAO\",\n    \"userAccount\": \"UA_{{entityPrefix}}_{{index}}_INV_CUST_ElAO\",\n    \"offerTemplate\": \"{{entityPrefix}}_EL_INV_OFFER1\",\n    \"subscriptionDate\": \"2050-10-13\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create access - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "570b354c-061a-4530-9596-3067f17e6ed3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_INV_SUB_ACCESS_ElAO\",\n    \"subscription\": \"{{entityPrefix}}_{{index}}_INV_SUB_ElAO\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/access/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"access",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate service - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b6ec88f-f6fd-478b-b783-385de886333b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_INV_SUB_ElAO\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{entityPrefix}}_EL_INV_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2050-10-13\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Charge CDR - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8a466d42-5d56-4e9e-a398-0713c39a4057",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "2050-10-13T00:00:00.000Z;1;{{entityPrefix}}_{{index}}_INV_SUB_ACCESS_ElAO;USAGE",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/mediation/chargeCdr",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"mediation",
												"chargeCdr"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate invoice - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3229e15c-ed41-4907-847c-9e39ce273278",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"targetCode\": \"BA_{{entityPrefix}}_{{index}}_INV_CUST_ElAO\",\n    \"targetType\": \"BILLINGACCOUNT\",\n    \"invoicingDate\": \"2050-10-15\",\n    \"firstTransactionDate\": \"2050-10-01\",\n    \"lastTransactionDate\": \"2050-10-31\",\n    \"generatePDF\": false\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoice/generateInvoice",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoice",
												"generateInvoice"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create DDRequestLotOp - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f5861c8-9a1f-401c-a210-92be66d81e9e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"fromDueDate\": \"2050-01-01T00:00:00Z\",\n    \"toDueDate\": \"2051-01-01T00:00:00Z\",\n    \"ddrequestOp\": \"CREATE\",\n    \"status\": \"WAIT\",\n    \"ddRequestBuilderCode\": \"SEPA_STD\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/ddrequestLotOp",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"ddrequestLotOp"
											]
										}
									},
									"response": []
								},
								{
									"name": "AO Job - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c6ad11d5-7903-432e-b282-5e6f005253df",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"AO_Job\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								},
								{
									"name": "List Account operations - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4630c344-0210-4806-8fd0-0a25b6180b92",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"actionStatus\": {\r\n        \"status\": \"SUCCESS\"\r\n    },\r\n    \"paging\": {\r\n        \"fullTextFilter\": null,\r\n        \"filters\": {\r\n            \"customerAccount.code\": \"CA_{{entityPrefix}}_{{index}}_INV_CUST_ElAO\"\r\n        },\r\n        \"fields\": null,\r\n        \"offset\": null,\r\n        \"limit\": null,\r\n        \"sortBy\": \"id\",\r\n        \"sortOrder\": \"DESCENDING\",\r\n        \"totalNumberOfRecords\": 2,\r\n        \"loadReferenceDepth\": 0\r\n    },\r\n    \"accountOperations\": {\r\n        \"accountOperation\": [\r\n            {\r\n                \"id\": 2,\r\n                \"dueDate\": 2549491200000,\r\n                \"type\": \"I\",\r\n                \"transactionDate\": 2549404800000,\r\n                \"transactionCategory\": \"DEBIT\",\r\n                \"reference\": \"Fact_03\",\r\n                \"accountCode\": \"411000000\",\r\n                \"accountingCode\": \"411000000\",\r\n                \"accountCodeClientSide\": \"445510000\",\r\n                \"amount\": 21.240000000000,\r\n                \"amountWithoutTax\": 18.000000000000,\r\n                \"taxAmount\": 3.240000000000,\r\n                \"matchingAmount\": 0E-12,\r\n                \"unMatchingAmount\": 21.240000000000,\r\n                \"matchingStatus\": \"O\",\r\n                \"code\": \"INV_STD\",\r\n                \"description\": \"Standard invoice sub-item\",\r\n                \"excludedFromDunning\": false,\r\n                \"orderNumber\": \"\",\r\n                \"paymentMethod\": \"DIRECTDEBIT\"\r\n            },\r\n            {\r\n                \"id\": 1,\r\n                \"dueDate\": 2549491200000,\r\n                \"type\": \"I\",\r\n                \"transactionDate\": 2549404800000,\r\n                \"transactionCategory\": \"DEBIT\",\r\n                \"reference\": \"Fact_02\",\r\n                \"accountCode\": \"411000000\",\r\n                \"accountingCode\": \"411000000\",\r\n                \"accountCodeClientSide\": \"445510000\",\r\n                \"amount\": 10.620000000000,\r\n                \"amountWithoutTax\": 9.000000000000,\r\n                \"taxAmount\": 1.620000000000,\r\n                \"matchingAmount\": 0E-12,\r\n                \"unMatchingAmount\": 10.620000000000,\r\n                \"matchingStatus\": \"O\",\r\n                \"code\": \"INV_STD\",\r\n                \"description\": \"Standard invoice sub-item\",\r\n                \"excludedFromDunning\": false,\r\n                \"orderNumber\": \"\",\r\n                \"paymentMethod\": \"DIRECTDEBIT\"\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/accountOperation/list?customerAccountCode=CA_{{entityPrefix}}_{{index}}_INV_CUST_ElAO",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"accountOperation",
												"list"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "CA_{{entityPrefix}}_{{index}}_INV_CUST_ElAO"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cc3b5500-ced7-4015-ad47-b3e8262b9131",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 73);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "14a168ed-ccda-4252-97c7-2619126dcbb1",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Custom Fields in Filters",
					"item": [
						{
							"name": "Setup Test Data",
							"item": [
								{
									"name": "Create Test Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b507a25b-9ff6-4184-adfc-de284f1139b8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_TEST_SUB\",\n    \"description\": \"{{baseEntityPrefix}}_TEST_SUB\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\n    \"subscriptionDate\": \"2016-06-01\",\n    \"endAgreementDate\": \"2016-06-30\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Access",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f6dee16c-2e2a-45d4-9b8e-ff6e9e9a0ebd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_TEST_ACCP\",\n    \"subscription\": \"{{baseEntityPrefix}}_TEST_SUB\",\n    \"startDate\": \"2016-06-01\",\n    \"endDate\": \"2016-06-30\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/access/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"access",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a547bcfb-265e-4f43-84f8-9d18edb4219c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_TEST_BA\",\n    \"description\": \"{{baseEntityPrefix}}_TEST_BA\",\n    \"externalRef1\": \"EXTREF1\",\n    \"externalRef2\": \"EXTREF2\",\n    \"name\": {\n      \"title\": \"MR\",\n      \"firstName\": \"ABC123\",\n      \"lastName\": \"DEF456\"\n    },\n    \"address\": {\n      \"address1\": \"adress1\",\n      \"address2\": \"address2\",\n      \"address3\": \"adress3\",\n      \"zipCode\": \"21000\",\n      \"city\": \"Dijon\",\n      \"country\": \"FR\"\n    },\n    \"customerAccount\": \"{{baseEntityPrefix}}_CA\",\n    \"billingCycle\": \"CYC_INV_MT_1\",\n    \"country\": \"FR\",\n    \"language\": \"FRA\",\n    \"nextInvoiceDate\": \"2015-04-01\",\n    \"subscriptionDate\": \"2015-01-01\",\n    \"electronicBilling\": \"true\",\n    \"email\": \"ABC123@manaty.net\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create priceplan recurring",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa6482a8-6c07-4bbe-a542-a55a99425ca2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_TEST_REC1\",\n    \"description\": \"{{baseEntityPrefix}}_TEST_REC1\",\n    \"eventCode\": \"{{baseEntityPrefix}}_REC1\",\n    \"amountWithoutTax\": \"10\",\n    \"amountWithTax\": \"12\",\n    \"startRatingDate\": \"2016-06-01\",\n    \"endRatingDate\": \"2016-06-30\",\n    \"priority\": \"1\",\n    \"minSubscriptionAgeInMonth\": \"6\",\n    \"maxSubscriptionAgeInMonth\": \"12\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create priceplan OneShot",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0fd19df2-6af4-4fe4-aff0-3d3a6b94922d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_TEST_OS1\",\n    \"description\": \"{{baseEntityPrefix}}_TEST_OS1\",\n    \"eventCode\": \"{{baseEntityPrefix}}_OS1\",\n    \"amountWithoutTax\": \"11\",\n    \"amountWithTax\": \"15\",\n    \"startRatingDate\": \"2016-06-01\",\n    \"endRatingDate\": \"2016-06-15\",\n    \"priority\": \"1\",\n    \"minSubscriptionAgeInMonth\": \"6\",\n    \"maxSubscriptionAgeInMonth\": \"12\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create priceplan usage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "108cbcb0-c5d5-4c65-824c-3139435bdf14",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_TEST_USAGE1\",\n    \"description\": \"{{baseEntityPrefix}}_TEST_USAGE1\",\n    \"eventCode\": \"{{baseEntityPrefix}}_USAGE1\",\n    \"amountWithoutTax\": \"9\",\n    \"amountWithTax\": \"14\",\n    \"startRatingDate\": \"2016-06-15\",\n    \"endRatingDate\": \"2016-06-30\",\n    \"priority\": \"1\",\n    \"minSubscriptionAgeInMonth\": \"12\",\n    \"maxSubscriptionAgeInMonth\": \"24\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create recurring charge template",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4afc1646-976e-40a6-96b2-29d43464d886",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_REC100\",\n    \"invoiceSubCategory\": \"SUB_DATA\",\n    \"calendar\": \"MONTHLY\",\n    \"durationTermInMonth\": \"10\",\n    \"taxClassCode\": \"{{baseEntityPrefix}}_taxClass\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Setup Filters",
							"item": [
								{
									"name": "Create Access Filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d811b5a0-0f7b-4d5d-9b29-f603e07328a6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_Access\",\n    \"description\": \"Subscription with Start and End Date\",\n    \"shared\": \"false\",\n    \"inputXml\": \"<filter>\\n                <primarySelector>\\n                <targetEntity>org.meveo.model.mediation.Access</targetEntity>\\n                <alias>a</alias>\\n                <displayFields>\\n                  <field>code</field>\\n                  <field>startDate</field>\\n                  <field>endDate</field>\\n                </displayFields>\\n                <exportFields/>\\n                <ignoreIfNotFoundForeignKeys/>\\n              </primarySelector>\\n              <secondarySelectors/>\\n              <disabled>false</disabled>\\n              <appendGeneratedCode>false</appendGeneratedCode>\\n              <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                <filterConditions>\\n                    <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>startDate</fieldName>\\n                                <operator>>=</operator>\\n                                <operand>cfDate:ACCESS_START_DATE</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>\\n                    <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                        <filterConditions>\\n                            <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>endDate</fieldName>\\n                                <operator><![CDATA[<=]]></operator>\\n                                <operand>cfDate:ACCESS_END_DATE</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>\\n                    <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>subscription</fieldName>\\n                                <operator>=</operator>\\n                                <operand>cfEntity:ACCESS_SUBSCRIPTION</operand>\\n                                <className>org.meveo.model.billing.Subscription</className>\\n                                <label>Subscription</label>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>\\n                </filterConditions>\\n              </filterCondition>\\n          </filter>\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filter/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filter",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan Filter - Rating date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22fa8782-77e9-4c98-b7a0-b530df2b94ce",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_PricePlanMatrix\",\n    \"description\": \"Start and End Rating Dates\",\n    \"shared\": \"false\",\n    \"inputXml\": \"<filter>\\n                <primarySelector>\\n                <targetEntity>org.meveo.model.catalog.PricePlanMatrix</targetEntity>\\n                <alias>p</alias>\\n                <displayFields>\\n                  <field>code</field>\\n                  <field>eventCode</field>\\n                </displayFields>\\n                <exportFields/>\\n                <ignoreIfNotFoundForeignKeys/>\\n              </primarySelector>\\n              <secondarySelectors/>\\n              <disabled>false</disabled>\\n              <appendGeneratedCode>false</appendGeneratedCode>\\n              <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                <filterConditions>\\n                    <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>startRatingDate</fieldName>\\n                                <operator>>=</operator>\\n                                <operand>cfDate:PRICE_PLAN_START_RATING_DATE</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>\\n                    <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                        <filterConditions>\\n                            <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>endRatingDate</fieldName>\\n                                <operator><![CDATA[<=]]></operator>\\n                                <operand>cfDate:PRICE_PLAN_END_RATING_DATE</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>\\n                </filterConditions>\\n              </filterCondition>\\n          </filter>\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filter/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filter",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan Filter by Code",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b106c618-e572-427c-b143-7e422379e586",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_PricePlanMatrix_Code\",\n    \"description\": \"Priceplan by code\",\n    \"shared\": \"false\",\n    \"inputXml\": \"<filter>\\n                <primarySelector>\\n                <targetEntity>org.meveo.model.catalog.PricePlanMatrix</targetEntity>\\n                <alias>p</alias>\\n                <displayFields>\\n                  <field>code</field>\\n                  <field>eventCode</field>\\n                </displayFields>\\n                <exportFields/>\\n                <ignoreIfNotFoundForeignKeys/>\\n              </primarySelector>\\n              <secondarySelectors/>\\n              <disabled>false</disabled>\\n              <appendGeneratedCode>false</appendGeneratedCode>\\n              <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                <filterConditions>\\n                    <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>code</fieldName>\\n                                <operator>=</operator>\\n                                <operand>cfString:PRICE_PLAN_CODE</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>                    \\n                </filterConditions>\\n              </filterCondition>\\n          </filter>\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filter/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filter",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan Filter by Amount",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eec6874e-1674-44cf-9f98-9ff4d5dc6f6c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_PricePlanMatrix_Amount\",\n    \"description\": \"Priceplan by code\",\n    \"shared\": \"false\",\n    \"inputXml\": \"<filter>\\n                <primarySelector>\\n                <targetEntity>org.meveo.model.catalog.PricePlanMatrix</targetEntity>\\n                <alias>p</alias>\\n                <displayFields>\\n                  <field>code</field>\\n                  <field>eventCode</field>\\n                </displayFields>\\n                <exportFields/>\\n                <ignoreIfNotFoundForeignKeys/>\\n              </primarySelector>\\n              <secondarySelectors/>\\n              <disabled>false</disabled>\\n              <appendGeneratedCode>false</appendGeneratedCode>\\n              <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                <filterConditions>\\n                    <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>amountWithoutTax</fieldName>\\n                                <operator>=</operator>\\n                                <operand>cfDecimal:AMOUNT</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>                    \\n                </filterConditions>\\n              </filterCondition>\\n          </filter>\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filter/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filter",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan Filter Age",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "00fc935f-dab1-429b-8376-ef4acbb49ee1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_PricePlanMatrix_Age\",\n    \"description\": \"PP by Age\",\n    \"shared\": \"false\",\n    \"inputXml\": \"<filter>\\n                <primarySelector>\\n                <targetEntity>org.meveo.model.catalog.PricePlanMatrix</targetEntity>\\n                <alias>p</alias>\\n                <displayFields>\\n                  <field>code</field>\\n                  <field>eventCode</field>\\n                </displayFields>\\n                <exportFields/>\\n                <ignoreIfNotFoundForeignKeys/>\\n              </primarySelector>\\n              <secondarySelectors/>\\n              <disabled>false</disabled>\\n              <appendGeneratedCode>false</appendGeneratedCode>\\n              <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                <filterConditions>\\n                    <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>minSubscriptionAgeInMonth</fieldName>\\n                                <operator>>=</operator>\\n                                <operand>cfLong:MIN_SUBSCR_AGE</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>\\n                    <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                        <filterConditions>\\n                            <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>maxSubscriptionAgeInMonth</fieldName>\\n                                <operator><![CDATA[<=]]></operator>\\n                                <operand>cfLong:MAX_SUBSCR_AGE</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>\\n                </filterConditions>\\n              </filterCondition>\\n          </filter>\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filter/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filter",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Account Filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e657e57-a33c-494d-bad4-3d7b9085ab80",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_Billing_Account\",\n    \"description\": \"Multi Fields\",\n    \"shared\": \"false\",\n    \"inputXml\": \"<filter>\\n                <primarySelector>\\n                <targetEntity>org.meveo.model.billing.BillingAccount</targetEntity>\\n                <alias>ba</alias>\\n                <displayFields>\\n                  <field>code</field>\\n                  <field>statusDate</field>\\n                  <field>email</field>\\n                  <field>nextInvoiceDate</field>\\n                </displayFields>\\n                <exportFields/>\\n                <ignoreIfNotFoundForeignKeys/>\\n              </primarySelector>\\n              <secondarySelectors/>\\n              <disabled>false</disabled>\\n              <appendGeneratedCode>false</appendGeneratedCode>\\n              <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                <filterConditions>\\n                    <filterCondition class=\\\"orCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_OR</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>statusDate</fieldName>\\n                                <operator>=</operator>\\n                                <operand>cfDate:BILLING_ACCOUNT_STATUS_DATE</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>\\n                        <filterCondition class=\\\"orCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_OR</filterConditionType>\\n                        <filterConditions>\\n                            <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>email</fieldName>\\n                                <operator>LIKE</operator>\\n                                <operand>cfString:BILLING_ACCOUNT_EMAIL</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>\\n                    <filterCondition class=\\\"orCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_OR</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>customerAccount</fieldName>\\n                                <operator>=</operator>\\n                                <operand>cfEntity:BILLING_ACCOUNT_CUSTOMER_ACCOUNT</operand>\\n                                <className>org.meveo.model.payments.CustomerAccount</className>\\n                                <label>Customer Account</label>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>\\n                        <filterCondition class=\\\"orCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_OR</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>brAmountWithTax</fieldName>\\n                                <operator>=</operator>\\n                                <operand>cfDecimal:BILLING_ACCOUNT_AMOUNT_WITH_TAX</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>\\n                </filterConditions>\\n              </filterCondition>\\n          </filter>\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filter/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filter",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Account Filter enum",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf993d0d-2021-4b64-8038-dcbbc498a0db",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_Billing_Account_Enum\",\n    \"description\": \"Multi Fields\",\n    \"shared\": \"false\",\n    \"inputXml\": \"<filter>\\n                <primarySelector>\\n                <targetEntity>org.meveo.model.billing.BillingAccount</targetEntity>\\n                <alias>ba</alias>\\n                <displayFields>\\n                  <field>code</field>\\n                  <field>statusDate</field>\\n                  <field>email</field>\\n                  <field>nextInvoiceDate</field>\\n                </displayFields>\\n                <exportFields/>\\n                <ignoreIfNotFoundForeignKeys/>\\n              </primarySelector>\\n              <secondarySelectors/>\\n              <disabled>false</disabled>\\n              <appendGeneratedCode>false</appendGeneratedCode>\\n              <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                <filterConditions>\\n                    <filterCondition class=\\\"orCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_OR</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>paymentTerm</fieldName>\\n                                <operator>=</operator>\\n                                <operand>cfDate:PAYMENT_TERMS</operand>\\n                                <className>org.meveo.model.payments.PaymentTermEnum</className>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>                        \\n                </filterConditions>\\n              </filterCondition>\\n          </filter>\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filter/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filter",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Recurring charge template Filter by Duration",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0c9f24d3-a046-4a10-ae70-3ebbd4afe0cd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_RCT_Duration\",\n    \"description\": \"RCT by duration\",\n    \"shared\": \"false\",\n    \"inputXml\": \"<filter>\\n                <primarySelector>\\n                <targetEntity>org.meveo.model.catalog.RecurringChargeTemplate</targetEntity>\\n                <alias>p</alias>\\n                <displayFields>\\n                  <field>code</field>\\n                  <field>eventCode</field>\\n                </displayFields>\\n                <exportFields/>\\n                <ignoreIfNotFoundForeignKeys/>\\n              </primarySelector>\\n              <secondarySelectors/>\\n              <disabled>false</disabled>\\n              <appendGeneratedCode>false</appendGeneratedCode>\\n              <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                <filterConditions>\\n                    <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>durationTermInMonth</fieldName>\\n                                <operator>=</operator>\\n                                <operand>cfInteger:DURATION</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>                    \\n                </filterConditions>\\n              </filterCondition>\\n          </filter>\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filter/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filter",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Recurring charge template Filter by Prorata",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1997137b-68c4-45ce-93a8-e568840eaa73",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_RCT_Prorata\",\n    \"description\": \"RCT by Prorata\",\n    \"shared\": \"false\",\n    \"inputXml\": \"<filter>\\n                <primarySelector>\\n                <targetEntity>org.meveo.model.catalog.RecurringChargeTemplate</targetEntity>\\n                <alias>p</alias>\\n                <displayFields>\\n                  <field>code</field>\\n                  <field>eventCode</field>\\n                </displayFields>\\n                <exportFields/>\\n                <ignoreIfNotFoundForeignKeys/>\\n              </primarySelector>\\n              <secondarySelectors/>\\n              <disabled>false</disabled>\\n              <appendGeneratedCode>false</appendGeneratedCode>\\n              <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                <filterConditions>\\n                    <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n                        <filterConditionType>COMPOSITE_AND</filterConditionType>\\n                        <filterConditions>\\n                              <primitiveFilterCondition>\\n                                <filterConditionType>PRIMITIVE</filterConditionType>\\n                                <fieldName>subscriptionProrata</fieldName>\\n                                <operator>=</operator>\\n                                <operand>cfBoolean:SUBSCRIPTION_PRORATA</operand>\\n                              </primitiveFilterCondition>\\n                        </filterConditions>\\n                    </filterCondition>                    \\n                </filterConditions>\\n              </filterCondition>\\n          </filter>\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filter/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filter",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Search with Filters",
							"item": [
								{
									"name": "Search PP by date - date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3674c67c-3d74-4dcd-a994-5569f9156e04",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"filter\": {\n      \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_PricePlanMatrix\"\n    },\n    \"parameters\": {\n      \"entry\": [\n        {\n          \"key\": \"PRICE_PLAN_START_RATING_DATE\",\n          \"value\": \"cfDate:2016-06-01\"\n        },\n        {\n          \"key\": \"PRICE_PLAN_END_RATING_DATE\",\n          \"value\": \"cfDate:2016-06-30\"\n        }\n      ]\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filteredList/listByFilter?from=0&size=100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filteredList",
												"listByFilter"
											],
											"query": [
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "100"
												},
												{
													"key": "query",
													"value": "PRICE_PLAN_START_RATING_DATE:cfDate:2016-06-01&PRICE_PLAN_END_RATING_DATE:cfDate:2016-06-30",
													"disabled": true
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search PP by code - string",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f0f4a8c-1385-4f0c-9e03-42d963fe54fb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"filter\": {\n      \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_PricePlanMatrix_Code\"\n    },\n    \"parameters\": {\n      \"entry\": {\n        \"key\": \"PRICE_PLAN_CODE\",\n        \"value\": \"cfString:{{baseEntityPrefix}}_TEST_REC1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filteredList/listByFilter?from=0&size=100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filteredList",
												"listByFilter"
											],
											"query": [
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search PP by amount - decimal",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7dc4b36b-93d8-4a7f-a50f-34c2efe3ae12",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"filter\": {\n      \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_PricePlanMatrix_Amount\"\n    },\n    \"parameters\": {\n      \"entry\": {\n        \"key\": \"AMOUNT\",\n        \"value\": \"cfDecimal:10\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filteredList/listByFilter?from=0&size=100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filteredList",
												"listByFilter"
											],
											"query": [
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search PP by age - long",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7c115c5-9a25-4339-97ea-8bcd32bd6c01",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"filter\": {\n      \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_PricePlanMatrix_Age\"\n    },\n    \"from\": \"0\",\n    \"size\": \"100\",\n    \"parameters\": {\n      \"entry\": [\n        {\n          \"key\": \"MIN_SUBSCR_AGE\",\n          \"value\": \"cfLong:6\"\n        },\n        {\n          \"key\": \"MAX_SUBSCR_AGE\",\n          \"value\": \"cfLong:12\"\n        }\n      ]\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filteredList/listByFilter?from=0&size=100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filteredList",
												"listByFilter"
											],
											"query": [
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search RCT by duration - integer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04baf85d-dcdf-49e5-87a4-b012e898f907",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"filter\": {\n      \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_RCT_Duration\"\n    },\n    \"parameters\": {\n      \"entry\": {\n        \"key\": \"DURATION\",\n        \"value\": \"cfInteger:10\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filteredList/listByFilter?from=0&size=100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filteredList",
												"listByFilter"
											],
											"query": [
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Search RCT by prorata - boolean",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c131ca3e-2df0-44e9-9e34-1f4795656e2e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"filter\": {\n      \"code\": \"{{entityPrefix}}_{{index}}_FilterCustomFields_RCT_Prorata\"\n    },\n    \"parameters\": {\n      \"entry\": {\n        \"key\": \"SUBSCRIPTION_PRORATA\",\n        \"value\": \"cfBoolean:true\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filteredList/listByFilter?from=0&size=100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filteredList",
												"listByFilter"
											],
											"query": [
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "100"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Test Data Cleanup",
							"item": [
								{
									"name": "Remove recurring charge template",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dc2f44f0-33be-4de0-8d99-375a830300cc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n  \"recurringChargeTemplateCode\": \"{{entityPrefix}}_{{index}}_REC100\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/{{entityPrefix}}_{{index}}_REC100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"{{entityPrefix}}_{{index}}_REC100"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove Access",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "66d1aa07-ea8d-42c6-82f6-bc4957b6ccbd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"accessCode\": \"{{baseEntityPrefix}}_TEST_ACCP\",\n    \"subscriptionCode\": \"{{baseEntityPrefix}}_TEST_SUB\",\n    \"startDate\": \"2016-06-01\",\n    \"endDate\": \"2016-06-30\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/access/{{baseEntityPrefix}}_TEST_ACCP/{{baseEntityPrefix}}_TEST_SUB/2016-06-01/2016-06-30",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"access",
												"{{baseEntityPrefix}}_TEST_ACCP",
												"{{baseEntityPrefix}}_TEST_SUB",
												"2016-06-01",
												"2016-06-30"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove Billing Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "59f0bb1b-b80f-45a7-9388-6bb41b35f6e1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:removeBillingAccount\": {\n        \"billingAccountCode\": \"{{baseEntityPrefix}}_TEST_BA\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/{{baseEntityPrefix}}_TEST_BA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"{{baseEntityPrefix}}_TEST_BA"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove priceplan recurring",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a4f7e08a-054f-4bd5-b1dd-6aaab05b1a09",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:removePricePlan\": {\n        \"pricePlanCode\": \"{{baseEntityPrefix}}_TEST_REC1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/{{baseEntityPrefix}}_TEST_REC1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"{{baseEntityPrefix}}_TEST_REC1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove priceplan OneShot",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "29909cac-2a26-4f77-b3c3-3607b174568a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:removePricePlan\": {\n        \"pricePlanCode\": \"{{baseEntityPrefix}}_TEST_OS1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/{{baseEntityPrefix}}_TEST_OS1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"{{baseEntityPrefix}}_TEST_OS1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove priceplan usage",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "93f49738-795f-4091-b64e-af240efb48df",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:removePricePlan\": {\n        \"pricePlanCode\": \"{{baseEntityPrefix}}_TEST_USAGE1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/{{baseEntityPrefix}}_TEST_USAGE1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"{{baseEntityPrefix}}_TEST_USAGE1"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "19e5ae0d-9533-4c71-b55f-323bc9f0473f",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 641);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "75c78765-8c92-4d88-81a2-5fac2daa1fd5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Entity Customization",
					"item": [
						{
							"name": "Reference Entity",
							"item": [
								{
									"name": "Create CFT with reference entity",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa4147c5-10e4-485a-afd5-5ba721651456",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RCF100\",\n    \"description\": \"{{entityPrefix}}_{{index}}_RCF100\",\n    \"fieldType\": \"ENTITY\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"entityClazz\": \"org.meveo.model.crm.Customer\",\n    \"storageType\": \"SINGLE\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get reference entities - no wildcard",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d70255e-5c86-436f-af24-0bf7ceda2f1d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RCF100\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/listBusinessEntityForCFVByCode/?code={{entityPrefix}}_{{index}}_RCF100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"listBusinessEntityForCFVByCode",
												""
											],
											"query": [
												{
													"key": "code",
													"value": "{{entityPrefix}}_{{index}}_RCF100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get reference entities - with wildcard",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9e93b112-c8b1-43b0-961f-d58d2b9a6232",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RCF100\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/listBusinessEntityForCFVByCode/?code={{entityPrefix}}_{{index}}_RCF100&wildcode=2",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"listBusinessEntityForCFVByCode",
												""
											],
											"query": [
												{
													"key": "code",
													"value": "{{entityPrefix}}_{{index}}_RCF100"
												},
												{
													"key": "wildcode",
													"value": "2"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "List per entity instance - el evaluated",
							"item": [
								{
									"name": "Create CFT Offer visible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c3d898ef-7309-40c1-a2aa-d4267cba9c3b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CF_VISIBLE_100\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CF_VISIBLE_100\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"storageType\": \"SINGLE\",\n    \"defaultValue\": \"VISIBLE\",\n    \"applicableOnEl\": \"#{entity.code.equals('{{baseEntityPrefix}}_OFFER1')}\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CFT Offer hidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "29e96c2e-eac0-4a74-b050-961373197ee8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CF_HIDDEN_100\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CF_HIDDEN_100\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"storageType\": \"SINGLE\",\n    \"defaultValue\": \"HIDDEN\",\n    \"applicableOnEl\": \"#{!entity.code.equals('{{baseEntityPrefix}}_OFFER1')}\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Query visible CFT",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9da11b7e-8ed0-476c-abf6-9f46fb36f863",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.entityCustomization.field[0].code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.entityCustomization.field[0].description).to.deep.equal(jsonBody.description);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\":\"{{entityPrefix}}_{{index}}_CF_VISIBLE_100\",\n    \"description\":\"{{entityPrefix}}_{{index}}_CF_VISIBLE_100\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/entity/listELFiltered?appliesTo=OfferTemplate&entityCode={{baseEntityPrefix}}_OFFER1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"entity",
												"listELFiltered"
											],
											"query": [
												{
													"key": "appliesTo",
													"value": "OfferTemplate"
												},
												{
													"key": "entityCode",
													"value": "{{baseEntityPrefix}}_OFFER1"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "List entity action",
							"item": [
								{
									"name": "Create script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "62eecf6c-88f2-4aa1-916f-b2d70e8d7421",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"executeAction\",\n    \"type\": \"JAVA\",\n    \"script\": \"package org.meveo.service.script;\\n    \\n    import java.util.Map;\\n    import java.math.BigDecimal;\\n    import org.meveo.admin.exception.BusinessException;\\n    import org.meveo.model.admin.User;\\n    import org.meveo.model.crm.Provider;\\n    import org.slf4j.Logger;\\n    import org.slf4j.LoggerFactory;\\n    import org.meveo.service.catalog.impl.OfferTemplateService;\\n    import org.meveo.model.catalog.OfferTemplate;\\n    \\n    public class ExecuteCustomAction_{{index}}_Script extends Script {\\n      \\n        private static final Logger log = LoggerFactory.getLogger(ExecuteCustomAction_{{index}}_Script.class);\\n        private OfferTemplateService offerTemplateService = (OfferTemplateService)getServiceInterface(\\\"OfferTemplateService\\\");\\n    \\n        public void execute(Map<String,Object> context) throws BusinessException{\\n            OfferTemplate offerTemplate = (OfferTemplate) context.get(Script.CONTEXT_ENTITY);\\n            offerTemplate.setDescription(\\\"action executed\\\");\\n        }\\n    }\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create custom action hidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f24b00ce-364c-4ce4-9ccc-dd4d98b506a4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"ExecuteCustomAction_{{index}}_HIDDEN\",\n    \"description\": \"ExecuteCustomAction_{{index}}_HIDDEN\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"script\": {\n        \"code\": \"org.meveo.service.script.ExecuteCustomAction_{{index}}_Script\"\n    },\n    \"applicableOnEl\": \"#{!entity.code.equals('{{baseEntityPrefix}}_OFFER1')}\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/action/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"action",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create custom action visible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4b5ace70-e1e6-4b06-8fe3-c36e49989bb4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"ExecuteCustomAction_{{index}}_VISIBLE\",\n    \"description\": \"ExecuteCustomAction_{{index}}_VISIBLE\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"script\": {\n        \"code\": \"org.meveo.service.script.ExecuteCustomAction_{{index}}_Script\"\n    },\n    \"applicableOnEl\": \"#{entity.code.equals('{{baseEntityPrefix}}_OFFER1')}\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/action/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"action",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "List visible CA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "65e4a668-e6d4-4aa3-bb94-80597022cbcd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.entityCustomization.action[0].code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.entityCustomization.action[0].description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.entityCustomization.action[0].appliesTo).to.deep.equal(jsonBody.appliesTo);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"ExecuteCustomAction_{{index}}_VISIBLE\",\n    \"description\": \"ExecuteCustomAction_{{index}}_VISIBLE\",\n    \"appliesTo\": \"OfferTemplate\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/entity/listELFiltered?appliesTo=OfferTemplate&entityCode={{baseEntityPrefix}}_OFFER1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"entity",
												"listELFiltered"
											],
											"query": [
												{
													"key": "appliesTo",
													"value": "OfferTemplate"
												},
												{
													"key": "entityCode",
													"value": "{{baseEntityPrefix}}_OFFER1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete custom action hidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b4682b8-6de7-4a1e-a534-d4d1ca839ab3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/action/ExecuteCustomAction_{{index}}_HIDDEN/OfferTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"action",
												"ExecuteCustomAction_{{index}}_HIDDEN",
												"OfferTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete custom action visible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d75b28b1-51c4-480b-848e-47deb3161592",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/action/ExecuteCustomAction_{{index}}_VISIBLE/OfferTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"action",
												"ExecuteCustomAction_{{index}}_VISIBLE",
												"OfferTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef2d5630-00ad-4b2e-bcc4-0c86960c31a8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/org.meveo.service.script.ExecuteCustomAction_{{index}}_Script",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"org.meveo.service.script.ExecuteCustomAction_{{index}}_Script"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Execute entity action",
							"item": [
								{
									"name": "Create script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7472d1b2-f3e8-489a-82f0-75e46d9d6ba7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"executeAction\",\n    \"type\": \"JAVA\",\n    \"script\": \"package org.meveo.service.script;\\n    \\n    import java.util.Map;\\n    import java.math.BigDecimal;\\n    import org.meveo.admin.exception.BusinessException;\\n    import org.meveo.model.admin.User;\\n    import org.meveo.model.crm.Provider;\\n    import org.slf4j.Logger;\\n    import org.slf4j.LoggerFactory;\\n    import org.meveo.service.catalog.impl.OfferTemplateService;\\n    import org.meveo.model.catalog.OfferTemplate;\\n    \\n    public class ExecuteCustomAction_{{index}}_Script extends Script {\\n      \\n        private static final Logger log = LoggerFactory.getLogger(ExecuteCustomAction_{{index}}_Script.class);\\n        private OfferTemplateService offerTemplateService = (OfferTemplateService)getServiceInterface(\\\"OfferTemplateService\\\");\\n    \\n        public void execute(Map<String,Object> context) throws BusinessException{\\n            OfferTemplate offerTemplate = (OfferTemplate) context.get(Script.CONTEXT_ENTITY);\\n            offerTemplate.setDescription(\\\"action executed\\\");\\n        }\\n    }\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create custom action",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "74d13ed6-ed54-486f-aa68-52e4c4bd4c49",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"ExecuteCustomAction_{{index}}\",\n    \"description\": \"ExecuteCustomAction_{{index}}\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"script\": {\n        \"code\": \"org.meveo.service.script.ExecuteCustomAction_{{index}}_Script\"\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/action/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"action",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Execute action",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ced424d6-265d-4032-af9a-e7ed32adf8d7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"actionCode\": \"ExecuteCustomAction_{{index}}\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"entityCode\": \"{{baseEntityPrefix}}_OFFER3\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/entity/action/execute/ExecuteCustomAction_{{index}}/OfferTemplate/{{baseEntityPrefix}}_OFFER3",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"entity",
												"action",
												"execute",
												"ExecuteCustomAction_{{index}}",
												"OfferTemplate",
												"{{baseEntityPrefix}}_OFFER3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee921527-f027-4c3f-917b-262626f897b2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"    pm.expect(jsonData.offerTemplate.description).to.deep.equal(jsonBody.description);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"action executed\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{baseEntityPrefix}}_OFFER3",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{baseEntityPrefix}}_OFFER3"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete custom action",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c107b660-42b8-4341-b865-aca3df6b22ab",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"actionCode\": \"ExecuteCustomAction_{{index}}\",\n    \"appliesTo\": \"OfferTemplate\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/action/ExecuteCustomAction_{{index}}/OfferTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"action",
												"ExecuteCustomAction_{{index}}",
												"OfferTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8dafff57-fe77-4d97-b9c2-8a15e83100e7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"removeScriptInstanceRequest\": \"org.meveo.service.script.ExecuteCustomAction_{{index}}_Script\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/org.meveo.service.script.ExecuteCustomAction_{{index}}_Script ",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"org.meveo.service.script.ExecuteCustomAction_{{index}}_Script "
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cdecbaa4-e9e7-4d56-a241-d0c9c62e6ba0",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 461);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4c2a79dd-e672-47ea-886a-9196818cb617",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Entity Security",
					"item": [
						{
							"name": "Setup Data",
							"item": [
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "acd49c5a-5383-4dd0-8450-28433a6bf851",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Seller SELLER_A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b49a137-ab75-437f-acc6-d2e2d51dc5d9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d9b9f68b-5b0c-41c3-9114-465984b32936",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Seller SELLER_B",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e5f0908d-9686-47de-b712-7382bb44bfc0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76d7c27c-f0de-4309-8968-74f00da65023",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Seller SELLER_C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31b0ada2-1f99-4534-b0c5-15290d007dbe",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_C\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_C\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"{{entityPrefix}}_{{index}}_SELLER_B\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Account Hierarchy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "71e10a50-b010-4e63-96d7-97f2b59e2984",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sellers\": {\n        \"seller\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n                \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n                \"currencyCode\": \"EUR\",\n                \"countryCode\": \"FR\",\n                \"languageCode\": \"FRA\",\n                \"parentSeller\": \"MAIN_SELLER\",\n                \"customers\": {\n                    \"customer\": [\n                        {\n                            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n                            \"description\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n                            \"externalRef1\": \"1\",\n                            \"externalRef2\": \"1\",\n                            \"name\": {\n                                \"title\": \"MR\",\n                                \"firstName\": \"firstName\",\n                                \"lastName\": \"lastName\"\n                            },\n                            \"address\": {\n                                \"address1\": \"address1\",\n                                \"address2\": \"address2\",\n                                \"address3\": \"address3\",\n                                \"zipCode\": \"75001\",\n                                \"city\": \"Tunis\",\n                                \"country\": \"TN\"\n                            },\n                            \"customerCategory\": \"CLIENT\",\n                            \"customerBrand\": \"DEFAULT\",\n                            \"mandateIdentification\": \"M1\",\n                            \"mandateDate\": \"2016-02-28\",\n                            \"contactInformation\": {\n                                \"email\": \"{{entityPrefix}}@manaty.net\",\n                                \"phone\": \"1234\",\n                                \"mobile\": \"092152154716\",\n                                \"fax\": \"1234\"\n                            },\n                            \"customerAccounts\": {\n                                \"customerAccount\": [\n                                    {\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\n                                        \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\n                                        \"externalRef1\": \"1\",\n                                        \"externalRef2\": \"1\",\n                                        \"name\": {\n                                            \"title\": \"MR\",\n                                            \"firstName\": \"firstName\",\n                                            \"lastName\": \"lastName\"\n                                        },\n                                        \"address\": {\n                                            \"address1\": \"address1\",\n                                            \"address2\": \"address2\",\n                                            \"address3\": \"address3\",\n                                            \"zipCode\": \"75001\",\n                                            \"city\": \"Tunis\",\n                                            \"country\": \"TN\"\n                                        },\n                                        \"currency\": \"USD\",\n                                        \"language\": \"ENG\",\n                                        \"creditCategory\": \"NEWCUSTOMER\",\n                                        \"dateStatus\": \"2016-02-28\",\n                                        \"dateDunningLevel\": \"2016-02-28\",\n                                        \"contactInformation\": {\n                                            \"email\": \"{{entityPrefix}}@manaty.net\",\n                                            \"phone\": \"1234\",\n                                            \"mobile\": \"092152154716\",\n                                            \"fax\": \"1234\"\n                                        },\n                                        \"dunningLevel\": \"R0\",\n                                        \"mandateIdentification\": \"1234\",\n                                        \"mandateDate\": \"2016-02-28\",\n                                        \"billingAccounts\": {\n                                            \"billingAccount\": [\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA1\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA2\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA3\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA2\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA2\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA4\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA4\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA5\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA5\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA6\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA6\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA3\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA3\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA7\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA7\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA8\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA8\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA9\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA9\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    },\n                                    {\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CAA2\",\n                                        \"description\": \"{{entityPrefix}}_{{index}}_CAA2\",\n                                        \"externalRef1\": \"1\",\n                                        \"externalRef2\": \"1\",\n                                        \"name\": {\n                                            \"title\": \"MR\",\n                                            \"firstName\": \"firstName\",\n                                            \"lastName\": \"lastName\"\n                                        },\n                                        \"address\": {\n                                            \"address1\": \"address1\",\n                                            \"address2\": \"address2\",\n                                            \"address3\": \"address3\",\n                                            \"zipCode\": \"75001\",\n                                            \"city\": \"Tunis\",\n                                            \"country\": \"TN\"\n                                        },\n                                        \"currency\": \"USD\",\n                                        \"language\": \"ENG\",\n                                        \"creditCategory\": \"NEWCUSTOMER\",\n                                        \"dateStatus\": \"2016-02-28\",\n                                        \"dateDunningLevel\": \"2016-02-28\",\n                                        \"contactInformation\": {\n                                            \"email\": \"{{entityPrefix}}@manaty.net\",\n                                            \"phone\": \"1234\",\n                                            \"mobile\": \"092152154716\",\n                                            \"fax\": \"1234\"\n                                        },\n                                        \"dunningLevel\": \"R0\",\n                                        \"mandateIdentification\": \"1234\",\n                                        \"mandateDate\": \"2016-02-28\",\n                                        \"billingAccounts\": {\n                                            \"billingAccount\": [\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA4\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA4\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA11\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA11\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA12\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA12\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA13\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA13\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA5\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA5\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA14\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA14\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA15\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA15\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA16\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA16\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA6\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA6\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA17\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA17\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA18\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA18\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA19\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA19\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    },\n                                    {\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CAA3\",\n                                        \"description\": \"{{entityPrefix}}_{{index}}_CAA3\",\n                                        \"externalRef1\": \"1\",\n                                        \"externalRef2\": \"1\",\n                                        \"name\": {\n                                            \"title\": \"MR\",\n                                            \"firstName\": \"firstName\",\n                                            \"lastName\": \"lastName\"\n                                        },\n                                        \"address\": {\n                                            \"address1\": \"address1\",\n                                            \"address2\": \"address2\",\n                                            \"address3\": \"address3\",\n                                            \"zipCode\": \"75001\",\n                                            \"city\": \"Tunis\",\n                                            \"country\": \"TN\"\n                                        },\n                                        \"currency\": \"USD\",\n                                        \"language\": \"ENG\",\n                                        \"creditCategory\": \"NEWCUSTOMER\",\n                                        \"dateStatus\": \"2016-02-28\",\n                                        \"dateDunningLevel\": \"2016-02-28\",\n                                        \"contactInformation\": {\n                                            \"email\": \"{{entityPrefix}}@manaty.net\",\n                                            \"phone\": \"1234\",\n                                            \"mobile\": \"092152154716\",\n                                            \"fax\": \"1234\"\n                                        },\n                                        \"dunningLevel\": \"R0\",\n                                        \"mandateIdentification\": \"1234\",\n                                        \"mandateDate\": \"2016-02-28\",\n                                        \"billingAccounts\": {\n                                            \"billingAccount\": [\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA7\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA7\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA21\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA21\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA22\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA22\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA23\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA23\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA8\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA8\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA24\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA24\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA25\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA25\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA26\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA26\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA9\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA9\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA27\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA27\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA28\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA28\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA29\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA29\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n                \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n                \"currencyCode\": \"USD\",\n                \"countryCode\": \"US\",\n                \"languageCode\": \"ENG\",\n                \"parentSeller\": \"MAIN_SELLER\",\n                \"customers\": {\n                    \"customer\": [\n                        {\n                            \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n                            \"description\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n                            \"externalRef1\": \"1\",\n                            \"externalRef2\": \"1\",\n                            \"name\": {\n                                \"title\": \"MR\",\n                                \"firstName\": \"firstName\",\n                                \"lastName\": \"lastName\"\n                            },\n                            \"address\": {\n                                \"address1\": \"address1\",\n                                \"address2\": \"address2\",\n                                \"address3\": \"address3\",\n                                \"zipCode\": \"75001\",\n                                \"city\": \"Tunis\",\n                                \"country\": \"TN\"\n                            },\n                            \"customerCategory\": \"CLIENT\",\n                            \"customerBrand\": \"DEFAULT\",\n                            \"mandateIdentification\": \"M1\",\n                            \"mandateDate\": \"2016-02-28\",\n                            \"contactInformation\": {\n                                \"email\": \"{{entityPrefix}}@manaty.net\",\n                                \"phone\": \"1234\",\n                                \"mobile\": \"092152154716\",\n                                \"fax\": \"1234\"\n                            },\n                            \"customerAccounts\": {\n                                \"customerAccount\": [\n                                    {\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\n                                        \"description\": \"{{entityPrefix}}_{{index}}_CAB1\",\n                                        \"externalRef1\": \"1\",\n                                        \"externalRef2\": \"1\",\n                                        \"name\": {\n                                            \"title\": \"MR\",\n                                            \"firstName\": \"firstName\",\n                                            \"lastName\": \"lastName\"\n                                        },\n                                        \"address\": {\n                                            \"address1\": \"address1\",\n                                            \"address2\": \"address2\",\n                                            \"address3\": \"address3\",\n                                            \"zipCode\": \"75001\",\n                                            \"city\": \"Tunis\",\n                                            \"country\": \"TN\"\n                                        },\n                                        \"currency\": \"USD\",\n                                        \"language\": \"ENG\",\n                                        \"creditCategory\": \"NEWCUSTOMER\",\n                                        \"dateStatus\": \"2016-02-28\",\n                                        \"dateDunningLevel\": \"2016-02-28\",\n                                        \"contactInformation\": {\n                                            \"email\": \"{{entityPrefix}}@manaty.net\",\n                                            \"phone\": \"1234\",\n                                            \"mobile\": \"092152154716\",\n                                            \"fax\": \"1234\"\n                                        },\n                                        \"dunningLevel\": \"R0\",\n                                        \"mandateIdentification\": \"1234\",\n                                        \"mandateDate\": \"2016-02-28\",\n                                        \"billingAccounts\": {\n                                            \"billingAccount\": [\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB1\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB1\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB1\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB2\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB2\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB3\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB3\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB2\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB2\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB4\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB4\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB5\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB5\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB6\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB6\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB3\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB3\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB7\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB7\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB8\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB8\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB9\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB9\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    },\n                                    {\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CAB2\",\n                                        \"description\": \"{{entityPrefix}}_{{index}}_CAB2\",\n                                        \"externalRef1\": \"1\",\n                                        \"externalRef2\": \"1\",\n                                        \"name\": {\n                                            \"title\": \"MR\",\n                                            \"firstName\": \"firstName\",\n                                            \"lastName\": \"lastName\"\n                                        },\n                                        \"address\": {\n                                            \"address1\": \"address1\",\n                                            \"address2\": \"address2\",\n                                            \"address3\": \"address3\",\n                                            \"zipCode\": \"75001\",\n                                            \"city\": \"Tunis\",\n                                            \"country\": \"TN\"\n                                        },\n                                        \"currency\": \"USD\",\n                                        \"language\": \"ENG\",\n                                        \"creditCategory\": \"NEWCUSTOMER\",\n                                        \"dateStatus\": \"2016-02-28\",\n                                        \"dateDunningLevel\": \"2016-02-28\",\n                                        \"contactInformation\": {\n                                            \"email\": \"{{entityPrefix}}@manaty.net\",\n                                            \"phone\": \"1234\",\n                                            \"mobile\": \"092152154716\",\n                                            \"fax\": \"1234\"\n                                        },\n                                        \"dunningLevel\": \"R0\",\n                                        \"mandateIdentification\": \"1234\",\n                                        \"mandateDate\": \"2016-02-28\",\n                                        \"billingAccounts\": {\n                                            \"billingAccount\": [\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB4\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB4\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB11\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB11\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB12\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB12\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB13\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB13\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB5\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB5\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB14\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB14\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB15\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB15\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB16\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB16\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB6\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB6\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB17\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB17\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB18\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB18\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB19\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB19\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    },\n                                    {\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CAB3\",\n                                        \"description\": \"{{entityPrefix}}_{{index}}_CAB3\",\n                                        \"externalRef1\": \"1\",\n                                        \"externalRef2\": \"1\",\n                                        \"name\": {\n                                            \"title\": \"MR\",\n                                            \"firstName\": \"firstName\",\n                                            \"lastName\": \"lastName\"\n                                        },\n                                        \"address\": {\n                                            \"address1\": \"address1\",\n                                            \"address2\": \"address2\",\n                                            \"address3\": \"address3\",\n                                            \"zipCode\": \"75001\",\n                                            \"city\": \"Tunis\",\n                                            \"country\": \"TN\"\n                                        },\n                                        \"currency\": \"USD\",\n                                        \"language\": \"ENG\",\n                                        \"creditCategory\": \"NEWCUSTOMER\",\n                                        \"dateStatus\": \"2016-02-28\",\n                                        \"dateDunningLevel\": \"2016-02-28\",\n                                        \"contactInformation\": {\n                                            \"email\": \"{{entityPrefix}}@manaty.net\",\n                                            \"phone\": \"1234\",\n                                            \"mobile\": \"092152154716\",\n                                            \"fax\": \"1234\"\n                                        },\n                                        \"dunningLevel\": \"R0\",\n                                        \"mandateIdentification\": \"1234\",\n                                        \"mandateDate\": \"2016-02-28\",\n                                        \"billingAccounts\": {\n                                            \"billingAccount\": [\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB7\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB7\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB21\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB21\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB22\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB22\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB23\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB23\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB8\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB8\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB24\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB24\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB25\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB25\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB26\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB26\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB9\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB9\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB27\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB27\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB28\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB28\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB29\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB29\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/customerHierarchyUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"customerHierarchyUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create UserHierarchyLevels",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e32d3e93-1027-48c2-a459-70887124c61b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_LEVEL_1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_Description1\",\n    \"orderLevel\": \"1\",\n    \"userHierarchyLevel\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_LEVEL_2\",\n            \"description\": \"{{entityPrefix}}_{{index}}_Description 2\",\n            \"orderLevel\": \"1\",\n            \"userHierarchyLevel\": [\n                {\n                    \"code\": \"{{entityPrefix}}_{{index}}_LEVEL_2_1\",\n                    \"description\": \"{{entityPrefix}}_{{index}}_Description 21\",\n                    \"orderLevel\": \"1\"\n                },\n                {\n                    \"code\": \"{{entityPrefix}}_{{index}}_LEVEL_2_2\",\n                    \"description\": \"{{entityPrefix}}_{{index}}_Description 22\",\n                    \"orderLevel\": \"2\"\n                }\n            ]\n        },\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_LEVEL_3\",\n            \"description\": \"{{entityPrefix}}_{{index}}_Description 3\",\n            \"orderLevel\": \"2\"\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/hierarchy/userGroupLevel",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"hierarchy",
												"userGroupLevel"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User in level 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d2f0fcf-d495-4da3-882d-a96d9f813cd2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level1\",\n    \"email\": \"{{entityPrefix}}_{{index}}@test.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"Level 1\",\n    \"lastName\": \"User\",\n    \"userLevel\": \"{{entityPrefix}}_{{index}}_LEVEL_1\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User in level 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "89caf588-110a-432f-af4a-d9a4b7e601c9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level2\",\n    \"email\": \"{{entityPrefix}}_{{index}}@test.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"Level 2\",\n    \"lastName\": \"User\",\n    \"userLevel\": \"{{entityPrefix}}_{{index}}_LEVEL_2\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User in level 2.1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9f22015f-42ae-4295-ab1f-d36e865ad2fa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level21\",\n    \"email\": \"{{entityPrefix}}_{{index}}@test.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"Level 2.1\",\n    \"lastName\": \"User\",\n    \"userLevel\": \"{{entityPrefix}}_{{index}}_LEVEL_2_1\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User in level 2.2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23129cab-2fba-4013-818b-bf235c99dc68",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level22\",\n    \"email\": \"{{entityPrefix}}_{{index}}@test.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"Level 2.2\",\n    \"lastName\": \"User\",\n    \"userLevel\": \"{{entityPrefix}}_{{index}}_LEVEL_2_2\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User in level 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6bf3edc8-2dc7-4df4-80cd-2fc2ead4e767",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level3\",\n    \"email\": \"{{entityPrefix}}_{{index}}@test.com\",\n    \"userRole\": [\n      \"administrateur\"\n    ],\n    \"firstName\": \"Level 3\",\n    \"lastName\": \"User\",\n    \"userLevel\": \"{{entityPrefix}}_{{index}}_LEVEL_3\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create UserRole with userSelfManagement permission",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e1b268be-12bb-466c-88d9-7fa1c6494ce6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{entityPrefix}}_{{index}}_ROLE_SELF_USER\",\n    \"description\": \"{{entityPrefix}}_{{index}}_ROLE_SELF_USER\",\n    \"permission\": [\n      {\n        \"permission\": \"userSelfManagement\",\n        \"name\": \"User Self Management\"\n      }\n    ]\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create offer template - no seller",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e96f4113-d2c3-4d44-b84d-8ade9a30a7a3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_NOSELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create offer template - seller A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "81d58c46-07a7-48fe-9f6b-1d3dedfea942",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_A\",\n    \"seller\": [\n        \"{{entityPrefix}}_{{index}}_SELLER_A\"\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create offer template - seller B",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "203ebda5-356b-4cef-8b04-ec68e46540e0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_B\",\n    \"seller\": [\n        \"{{entityPrefix}}_{{index}}_SELLER_B\"\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create offer template - seller C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "99388aaa-919e-4c2e-8ec3-30fd38836f3a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_C\",\n    \"seller\": [\n        \"{{entityPrefix}}_{{index}}_SELLER_C\"\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create offer template - seller A,B,C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6df48876-b721-47c1-8a61-b2dcb367b497",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_D\",\n    \"seller\": [\n        \"{{entityPrefix}}_{{index}}_SELLER_A\",\n        \"{{entityPrefix}}_{{index}}_SELLER_B\",\n        \"{{entityPrefix}}_{{index}}_SELLER_C\"\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set securedEntities=true - AUTHORIZATION_SUPERADMIN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2c447ae-431b-492a-9510-64c928597049",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "username",
													"value": "{{opencell.superusername}}",
													"type": "string"
												},
												{
													"key": "password",
													"value": "{{opencell.superpassword}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"properties\": [\n        {\n            \"key\": \"secured.entities.enabled\",\n            \"value\": \"true\"\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/configurations/properties",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"configurations",
												"properties"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Seller Tests",
							"item": [
								{
									"name": "Restore User to default.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f1af5503-e0c2-4981-8c9a-a695537d6c27",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60220d28-7b86-4069-8f92-d7a05873ce5e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1aee9625-8747-48d0-b3f2-a9dc7c739c21",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to MAIN_SELLER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6209ec67-67b5-42cf-811e-ccc4cdcf9da5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"MAIN_SELLER\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        },\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        },\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A still accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "206deec0-973c-43fa-b523-6fd8e92d41e2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B still accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3e04458-3b0e-4c46-ab5c-b7a1b3f8adfe",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f3d34c4a-ce86-48b8-ad4d-a67071bda07d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A still accessible.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d38e0fbf-69bb-402d-9422-9444a20faf7b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f0e9130-0d27-402c-b0ea-034a269b49c7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller MAIN_SELLER not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04322a50-d3bd-450d-8de9-c9d078dfb48d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode=MAIN_SELLER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "MAIN_SELLER"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c65d0b09-db4d-4d9f-a757-1c3b13744143",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8a7190e7-4f86-43c4-bb9e-71685d73c3a9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B now accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e1fbfe5-07ba-476d-93e2-852ebe3aac38",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller MAIN_SELLER still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa5b2b85-b4cd-4c51-9df1-5817ebb5cba7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sellerCode\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode=MAIN_SELLER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "MAIN_SELLER"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dada8ab6-47b4-453e-a433-69523cddcdcf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Customer Tests",
							"item": [
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9087b074-ffb5-41d8-85fd-651735fe10f8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a331e393-b955-4293-bf42-f3adcaa694fc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA3\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc518470-a7ea-4512-b8c9-7660d84e608b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB3\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTA only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd377269-f574-4721-926b-f60b3e9473fe",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\n        \n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA still accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3625348d-4ab4-46e4-85c1-1de35e6f182e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA3\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c338b5e9-a0aa-4280-975e-590930981163",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "List Customer with Filter CUSTA is accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8a02e743-0df4-4dfe-bf99-25ce4811936e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customers.totalNumberOfRecords).to.eql(1);",
													"    pm.expect(jsonData.customers.customer[0].code).to.deep.equal(jsonBody.customer[0].code);",
													"    pm.expect(jsonData.customers.customer[0].description).to.deep.equal(jsonBody.customer[0].description);",
													"    pm.expect(jsonData.customers.customer[0].customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customer[0].customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customers.customer[0].customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customer[0].customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customers.customer[0].customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customer[0].customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customer\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n            \"description\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n            \"customerAccounts\": {\n                \"customerAccount\": [\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CAA1\"\n                    },\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CAA2\"\n                    },\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CAA3\"\n                    }\n                ]\n            }\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/list?query=code:{{entityPrefix}}_{{index}}_CUSTA|seller:{{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"list"
											],
											"query": [
												{
													"key": "query",
													"value": "code:{{entityPrefix}}_{{index}}_CUSTA|seller:{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "List Customer with Filter CUSTB not accessible.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c33e8b8-9b46-4d04-93da-7cd4e30d7273",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customers.totalNumberOfRecords).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customer\": [\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/list?query=code:{{entityPrefix}}_{{index}}_CUSTB|seller:{{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"list"
											],
											"query": [
												{
													"key": "query",
													"value": "code:{{entityPrefix}}_{{index}}_CUSTB|seller:{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50daad4f-1b49-4f75-bf08-de1aea62bc52",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sellerCode\": \"{{entityPrefix}}_{{index}}_SELLER_A\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "90b57ac2-d5b7-4760-86f9-ad5f4c4af6eb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sellerCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTB only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55bcbe74-0fc6-4808-97a2-85f883432872",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "80a05630-3faf-4f4b-b689-0aa91a993044",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customerCode\": \"{{entityPrefix}}_{{index}}_CUSTA\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB now accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "378a59b1-81d3-44d2-9e53-745ae5931662",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB3\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5dfd6d47-4b89-48a3-81ef-78dca991254a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sellerCode\": \"{{entityPrefix}}_{{index}}_SELLER_A\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "254a9981-f481-4ac6-8f9e-e576bb55afc1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sellerCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "List Customer with Filter CUSTA not accessible.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "291d17ee-d226-44af-8c60-521b86d5fcb0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customers.totalNumberOfRecords).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customer\": [\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/list?query=code:{{entityPrefix}}_{{index}}_CUSTB|seller:{{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"list"
											],
											"query": [
												{
													"key": "query",
													"value": "code:{{entityPrefix}}_{{index}}_CUSTB|seller:{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "List Customer with Filter CUSTB is accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "39adf401-e377-4190-aaa8-6b0ed8d4ece7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customers.totalNumberOfRecords).to.eql(1);",
													"    pm.expect(jsonData.customers.customer[0].code).to.deep.equal(jsonBody.customer[0].code);",
													"    pm.expect(jsonData.customers.customer[0].description).to.deep.equal(jsonBody.customer[0].description);",
													"    pm.expect(jsonData.customers.customer[0].customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customer[0].customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customers.customer[0].customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customer[0].customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customers.customer[0].customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customer[0].customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customer\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n            \"description\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n            \"customerAccounts\": {\n                \"customerAccount\": [\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CAB1\"\n                    },\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CAB2\"\n                    },\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CAB3\"\n                    }\n                ]\n            }\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/list?query=code:{{entityPrefix}}_{{index}}_CUSTB|seller:{{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"list"
											],
											"query": [
												{
													"key": "query",
													"value": "code:{{entityPrefix}}_{{index}}_CUSTB|seller:{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore User to default.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e19a86bf-eb63-4cd0-8cc2-883fa0e92720",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Customer Account Tests",
							"item": [
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9ac9b689-1a41-4779-a4ec-282fdc8e8bcf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab78e65b-5378-4bda-bf0f-ab265166baf4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b7ab5f62-afbe-4068-8cac-7e572bcccbf3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed7d72b9-963c-42ae-8252-35144185c6bc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA3\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "35873365-a4c7-4259-846a-297b806fd3af",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB3\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3cf235f-f2e6-45c6-bf1a-f55b79938aa7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "595077a1-c64b-43fe-994e-0df51a642aae",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "421a39b0-13d6-4c89-a6cf-2ae21c7e0795",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 still accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b368dce-2bed-4dcb-8f09-a73be6ce9278",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0516b7ad-e913-42a7-b5d3-446914c73ed6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd6b8a2a-cc00-424a-8081-41461a2d9e22",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d4a1239c-23ae-4b9c-bda8-0084bbc3f080",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 now accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c1e9fef-e3d5-4769-8c86-ed3906cb2255",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTA only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87ef0fc6-f578-47b6-b1fa-20a66d92ac17",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 now accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c42e37ab-f2b6-4830-96d8-1b00b87f887a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 not accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b1a5d059-4206-4363-a890-79f821295396",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomerAccount\": {\n        \"customerAccountCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CAB1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTB only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f6b1767d-cb6c-4d59-b00e-674a70824583",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 not accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ae74eae-655d-432b-a3dc-56a58baa62d2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomerAccount\": {\n        \"customerAccountCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CAA1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 now accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02cc994d-c9d7-492d-a3f9-d7a4b22a5570",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "25290892-5f31-4088-81a6-9e83289cf132",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 now accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3512634-37f6-4837-ab40-c4cbe26f1fd0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 not accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28f95bd8-400f-4c26-90fb-35486907ce57",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomerAccount\": {\n        \"customerAccountCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CAB1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e15656a-06fa-4bba-8c08-a6301905888e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customerCode\": \"{{entityPrefix}}_{{index}}_CUSTA\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8fbbe7bb-76d8-48bf-ac24-140cb1be6876",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customerCode\": \"{{entityPrefix}}_{{index}}_CUSTA\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "21fdea95-c961-40ad-82f3-3a8aeda16c98",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findSeller\": {\n        \"sellerCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_SELLER_A\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "30a4bb8d-88a5-4993-b1fd-8ae4ffefad3d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findSeller\": {\n        \"sellerCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_SELLER_B\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CAB1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "588e1e3d-efd9-436d-92ef-5d3640ee9e1d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 not accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "25f57afe-4ae8-4bbe-a663-830b1f4c47ff",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomerAccount\": {\n        \"customerAccountCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CAA1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 now accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d42a6e3f-0d69-4ff2-b038-d72e398eada3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ea795cca-60f2-4d72-aa8c-738ec7a81027",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomer\": {\n        \"customerCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CUSTA\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a1ff124-569e-4415-a93a-4bd17e474010",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomer\": {\n        \"customerCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CUSTB\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c85df809-3283-47a0-9d94-30463587175c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomer\": {\n        \"customerCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CUSTB\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e165351-a30f-4d8b-bcea-17bbad4a7e1d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findSeller\": {\n        \"sellerCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_SELLER_B\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTA and CAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b7010e8a-b7c8-48c2-8ce7-8a26d83b15a8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        },\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 now accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a228658-0a27-4608-bf0f-e2f9c2a8b080",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA with all its CustomerAccounts included",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d455f17a-8322-4cf6-9426-0f22b6c8fa67",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA3\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "26952aaa-b6c5-4a77-8659-c5b22aba1d7a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Billing Account Tests",
							"item": [
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36292b65-cc6d-4bbd-8983-e4cd67df6f08",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "912f5a35-ece4-4148-9a56-e04079e2f3dd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5abb020c-e1f0-4bac-b974-224afbbff762",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ddc35696-4258-48f9-b9a1-86a6db54f603",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 still accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd3c00c3-c26e-4643-863f-0ee95b867864",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "056a356a-17c8-4d05-9f83-02fc66d06aab",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60cc3014-6690-4580-9efc-f45b61f77ecc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4659f017-2851-47a6-b1e7-485a371f9948",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 now accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d47c5ce-e548-4ed2-ab90-ecc0056c8d13",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTA only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6bf9716c-24d4-4a5d-b874-56fd26836b26",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 now accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6046893e-bd89-48a9-8000-100962beb9fd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 not accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "374208e1-d92e-41a9-bc95-6becc9dc655c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTB only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9baa666-b594-442f-8637-cb126ce7dd7d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 not accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f88551ff-5421-42af-9caa-ec5f3db646fc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 now accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a89d4a5-1fb3-411e-bd22-8619f5b49a82",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2f1b0053-ef95-45f7-9a26-6a096c14b5f4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 now accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8b9bb3cd-e895-46f4-a334-023c900d1125",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 not accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba47e43e-605e-498c-9f9b-239cc3b3a51f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CAB1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1704beef-6ff2-4c9e-ac95-edd8a048f4e9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 not accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ca1a8bb-61fd-476b-831b-62e0d6ea743b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 now accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6bb4d476-4740-4449-9367-56abd49c8087",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to BAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "33c37ee1-3b7c-435e-9205-c19521e2aac1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n            \"entityClass\": \"org.meveo.model.billing.BillingAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 now accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dbcb13a2-25a9-4b28-9031-9a49ae9d931b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 not accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c5e7136-01d8-424d-9023-37c0ffb8ac9c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0bbb49ea-f256-4b1e-8d6e-ecfa17a5b584",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "268a2bea-f7fc-409a-ac94-52279f4e70f0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e6c587d-7474-4b3c-b74e-4e87018fa619",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0968a1ef-c39f-4d81-bfae-fa827fb02e21",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc13759f-b29b-4901-97df-a0d8469ed81f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "11dcae56-cfd6-4d68-9176-acf0d2980fb3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to BAB1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b1d2994e-10dc-441e-8521-c7807f5dd236",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n            \"entityClass\": \"org.meveo.model.billing.BillingAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 not accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f0389f2-29d7-42ed-bc34-90aeb8722e55",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 now accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "154dfad8-277c-461a-b746-ff1e3fa12431",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e644018-0309-43f8-8d5b-f9da05c6aecd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c620e04-8b9e-46d4-ae1e-1b3ab3abea77",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f79a9a13-7003-459f-a730-0d9eb007a4e6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "90f2294b-338f-4dd0-b461-ec9afc5edc12",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d225557c-622d-4ff6-9198-44818fa77901",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48c66cf7-1420-4f8b-9302-f10cdd08eaf9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CAA1 and BAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b8d27b49-793f-4722-9a87-4008b6d936c5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        },\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n            \"entityClass\": \"org.meveo.model.billing.BillingAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 with all its BillingAccounts included",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "adb59f10-4e36-4003-9b21-3f8a1020126f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "846239f4-4c2e-43d3-bf1b-0783373a361c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "User Account Tests",
							"item": [
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d49bff0-5559-4035-aca5-cec042e44a1a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "61672657-6721-4196-9b6d-3a93dbea2969",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5800a40b-8297-4e9b-a99e-1e34f3b7c0d9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae50535d-a6a5-42fe-9e7f-90b2ff0ed046",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 still accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd4b9d6f-e1b8-4b34-aca8-cd03b135e595",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e84e0314-3c73-4a79-992d-0ee734118d4d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "18ac8def-056b-43a6-bfd1-4d7c003e2e07",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c204417f-72e4-479c-b9fb-836fef43a5d4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 now accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee8e1753-20b5-447c-b6b7-ed3989982391",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTA only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95dc4dbf-dc4d-47dd-a04a-68f3dab53d16",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 now accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "932869b7-a973-4f63-a56c-d51bf28f10ff",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 not accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3bb0088b-403b-4177-8d0d-b66c63af86f0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTB only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "447c6059-6050-406c-813e-98c759d98829",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 not accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6144749b-c61d-4907-ac82-e380fe25b4de",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 now accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3df6aad8-fac7-47e7-afc6-ca590ec7a40f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d66bf996-d5c3-4efd-8099-0e557c6adc8a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 now accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5adfe825-d0c3-4931-9237-b28ec36bc447",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 not accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1b47556-aa4b-4d4c-9da3-33e1d93b49e3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CAA1 only Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c69c835c-2bd5-4a81-b315-95e909747d10",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 not accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eda98a4a-cc9f-43e7-948d-f3e41f98cd77",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 now accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8118f6c6-c132-4fd3-ae84-2a6d856272f0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to BAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0bb54559-56c0-4ed0-8d36-2de38098ff87",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n            \"entityClass\": \"org.meveo.model.billing.BillingAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 now accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "70dbae65-53f6-43a4-9293-18dbabd2c1f0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 not accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b11fd8eb-c6c5-4a61-acd1-8ae42617a573",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to BAB1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4870317f-fea6-442d-84da-a4442d81a1cf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n            \"entityClass\": \"org.meveo.model.billing.BillingAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 not accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a6a8afb5-2aa3-40c4-9d4f-3fa34b8e871e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 now accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2efb9fc1-c908-4e45-a025-02582902fe4a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to UAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2f79849-f6b1-4f0e-a04c-2f9f1bf59ecd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_UAA1\",\r\n            \"entityClass\": \"org.meveo.model.billing.UserAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 now accessible again...",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da11cabb-d7ab-4170-95be-87b0dc3a6b0f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 not accessible again...",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "661e0337-4e00-4ed5-bcf6-53104c647987",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "39c81ee0-840a-4b2e-bedd-ee3107fa8cb1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0cc7531c-52d5-4694-96ce-e821e8011511",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d807c288-1182-474b-8828-e5cf1ed55c01",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "790515c9-e7cf-4769-9814-e07a2ea09e08",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "038d577e-3342-41a3-9c7b-b9e5f2b2a14d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9eab5017-bf2a-4092-a683-7dd608c565dc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e9a3c20-486d-47f4-9a9e-14fed965ed85",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "89e18c8b-301a-4e0c-bbf4-2e6dd24cce64",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to UAB1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef5f6cef-c376-41e3-9980-0f3f5c0b34af",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_UAB1\",\r\n            \"entityClass\": \"org.meveo.model.billing.UserAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 not accessible again...",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2ba46ae-7961-4b27-81ab-394b9edfd9a5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 now accessible again...",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "710426ce-bc63-438d-9db4-0a2ce38f86be",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a568507-11b1-454c-aedd-029283b1a08a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "635a992d-8829-45ce-b0f5-25a9a77c8c0f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e0da16c5-bf45-4b3b-a1c9-fae1b1635c34",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e61c3444-46b1-4c5f-a703-01c018371b1d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "43caad03-f88e-47df-9ff3-32e3a96271a9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9ab55f5e-92e1-485e-a8a0-06293f49596d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c967f56-1f2f-47cf-8d11-3d503b29b516",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36758756-5237-41eb-a5d2-ae5a01d1e7f4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to BAA1 and UAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad29624b-0072-4fd8-90ab-276df674327c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n            \"entityClass\": \"org.meveo.model.billing.BillingAccount\"\r\n        },\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_UAA1\",\r\n            \"entityClass\": \"org.meveo.model.billing.UserAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 with all its UserAccounts included",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2d824263-be99-4340-a9ff-1de156bfb710",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e1657a6-8fe2-48de-b37a-e4e755244ffc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "AccountHierarchy API Tests",
							"item": [
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "66ef77ad-e530-4c0c-b016-09b4315a7529",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c207f949-d94d-4ef8-92f2-cfa671368745",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CRMAccountHierarchy fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23c3ed3a-3eab-4b81-803b-d64b3880e506",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CRM-AccountHierarchy\",\r\n    \"externalRef1\": \"Ref1\",\r\n    \"externalRef2\": \"Ref2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Saidani\",\r\n        \"lastName\": \"Hatem\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"Address1\",\r\n        \"address2\": \"Address2\",\r\n        \"zipCode\": \"20250\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}_{{index}}@yahoo.fr\",\r\n        \"phone\": \"+0122674100\",\r\n        \"mobile\": \"+0139154716\"\r\n    },\r\n    \"language\": \"FRA\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"subscriptionDate\": \"2016-02-01\",\r\n    \"terminationDate\": \"2016-05-01\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"mandateIdentification\": \"M1\",\r\n    \"mandateDate\": \"2016-04-01\",\r\n    \"currency\": \"EUR\",\r\n    \"caStatus\": \"ACTIVE\",\r\n    \"creditCategory\": \"VIP\",\r\n    \"dateStatus\": \"2016-04-01\",\r\n    \"dateDunningLevel\": \"2016-04-04\",\r\n    \"dunningLevel\": \"R0\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"seller\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"country\": \"FR\",\r\n    \"nextInvoiceDate\": \"2016-05-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"baStatus\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}_{{index}}@yahoo.fr\",\r\n    \"uaStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f86c0d44-f2fe-4f0b-ad8e-cd49fa8cb0d9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CRMAccountHierarchy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "913c8b31-b51c-48b3-b17e-9027cbb84f4f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CRM-AccountHierarchy\",\r\n    \"externalRef1\": \"Ref1\",\r\n    \"externalRef2\": \"Ref2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Saidani\",\r\n        \"lastName\": \"Hatem\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"Address1\",\r\n        \"address2\": \"Address2\",\r\n        \"zipCode\": \"20250\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}_{{index}}@yahoo.fr\",\r\n        \"phone\": \"+0122674100\",\r\n        \"mobile\": \"+0139154716\"\r\n    },\r\n    \"language\": \"FRA\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"subscriptionDate\": \"2016-02-01\",\r\n    \"terminationDate\": \"2016-05-01\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"mandateIdentification\": \"M1\",\r\n    \"mandateDate\": \"2016-04-01\",\r\n    \"currency\": \"EUR\",\r\n    \"caStatus\": \"ACTIVE\",\r\n    \"creditCategory\": \"VIP\",\r\n    \"dateStatus\": \"2016-04-01\",\r\n    \"dateDunningLevel\": \"2016-04-04\",\r\n    \"dunningLevel\": \"R0\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"seller\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"country\": \"FR\",\r\n    \"nextInvoiceDate\": \"2016-05-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"baStatus\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}_{{index}}@yahoo.fr\",\r\n    \"uaStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9ecd775f-8d78-4592-89ed-b6b804c0d52f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find CRMAccountHierarchy fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "65b58e5e-6b5a-4cf1-92a1-080447729bab",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CRM-CUST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CRM-CUST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2bc26d0f-2ed2-4365-b1b7-b702c61a6d1c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find CRMAccountHierarchy.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "885b21f7-0395-4da0-8f8e-090c57259fdb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].billingAccounts.billingAccount[0].userAccounts.userAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"customerAccounts\": {\r\n        \"customerAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n                \"billingAccounts\": {\r\n                    \"billingAccount\": [\r\n                        {\r\n                            \"userAccounts\": {\r\n                                \"userAccount\": [\r\n                                    {\r\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\"\r\n                                    }\r\n                                ]\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CRM-CUST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CRM-CUST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c8b12ac-9e60-4314-a0ef-ea35cbe4ca52",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CRMAccountHierarchy fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24476857-55dd-43eb-885c-606bd17417a2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CRM-AccountHierarchy-Updated\",\r\n    \"externalRef1\": \"EXTRef1\",\r\n    \"externalRef2\": \"EXTRef2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Saidani\",\r\n        \"lastName\": \"Hatem\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"Address1\",\r\n        \"address2\": \"Address2\",\r\n        \"zipCode\": \"01020\",\r\n        \"city\": \"Charguia2\",\r\n        \"country\": \"TN\",\r\n        \"state\": \"Tunisie\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}_{{index}}@manaty.com\",\r\n        \"phone\": \"+0135215579\",\r\n        \"mobile\": \"+0141487410\"\r\n    },\r\n    \"language\": \"ENG\",\r\n    \"terminationReason\": \"TERM_REASON_2\",\r\n    \"subscriptionDate\": \"2016-03-16\",\r\n    \"terminationDate\": \"2016-06-15\",\r\n    \"customerCategory\": \"PROSPECT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"mandateIdentification\": \"M10221\",\r\n    \"mandateDate\": \"2016-04-01\",\r\n    \"currency\": \"USD\",\r\n    \"caStatus\": \"ACTIVE\",\r\n    \"creditCategory\": \"PART_C\",\r\n    \"dateStatus\": \"2016-04-01\",\r\n    \"dateDunningLevel\": \"2016-04-04\",\r\n    \"dunningLevel\": \"R1\",\r\n    \"billingCycle\": \"CYC_INV_MT_2\",\r\n    \"seller\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"country\": \"US\",\r\n    \"nextInvoiceDate\": \"2016-05-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"baStatus\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}_{{index}}@manaty.com\",\r\n    \"uaStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/updateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"updateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95f9063c-e46e-4b44-8742-e31731765763",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CRMAccountHierarchy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5193b0f0-0706-4b0a-bd97-a1035233c1f4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CRM-AccountHierarchy-Updated\",\r\n    \"externalRef1\": \"EXTRef1\",\r\n    \"externalRef2\": \"EXTRef2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Saidani\",\r\n        \"lastName\": \"Hatem\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"Address1\",\r\n        \"address2\": \"Address2\",\r\n        \"zipCode\": \"01020\",\r\n        \"city\": \"Charguia2\",\r\n        \"country\": \"TN\",\r\n        \"state\": \"Tunisie\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}_{{index}}@manaty.com\",\r\n        \"phone\": \"+0135215579\",\r\n        \"mobile\": \"+0141487410\"\r\n    },\r\n    \"language\": \"ENG\",\r\n    \"terminationReason\": \"TERM_REASON_2\",\r\n    \"subscriptionDate\": \"2016-03-16\",\r\n    \"terminationDate\": \"2016-06-15\",\r\n    \"customerCategory\": \"PROSPECT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"mandateIdentification\": \"M10221\",\r\n    \"mandateDate\": \"2016-04-01\",\r\n    \"currency\": \"USD\",\r\n    \"caStatus\": \"ACTIVE\",\r\n    \"creditCategory\": \"PART_C\",\r\n    \"dateStatus\": \"2016-04-01\",\r\n    \"dateDunningLevel\": \"2016-04-04\",\r\n    \"dunningLevel\": \"R1\",\r\n    \"billingCycle\": \"CYC_INV_MT_2\",\r\n    \"seller\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"country\": \"US\",\r\n    \"nextInvoiceDate\": \"2016-05-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"baStatus\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}_{{index}}@manaty.com\",\r\n    \"uaStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/updateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"updateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only...",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9772993d-d41b-43e8-990b-8cc707763cb5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find CRMAccountHierarchy fail.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b30d33d5-de87-4941-a88f-cb621bc3b4c3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CRM-CUST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CRM-CUST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only...",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7921f36d-c424-449b-9436-20920a4a1c33",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find CRMAccountHierarchy..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "93104ffc-35e9-4b28-b7b1-3f6bff6f2166",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].billingAccounts.billingAccount[0].userAccounts.userAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"customerAccounts\": {\r\n        \"customerAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n                \"billingAccounts\": {\r\n                    \"billingAccount\": [\r\n                        {\r\n                            \"userAccounts\": {\r\n                                \"userAccount\": [\r\n                                    {\r\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\"\r\n                                    }\r\n                                ]\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CRM-CUST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CRM-CUST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CRM-CUST only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "669df409-19dc-4fbd-ac78-e1305a3da3e0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CRMAccountHierarchy.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "308ccf2e-e0fb-4e84-864a-d9f85ecc06b8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CRM-AccountHierarchy-Updated\",\r\n    \"externalRef1\": \"EXTRef1\",\r\n    \"externalRef2\": \"EXTRef2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Saidani\",\r\n        \"lastName\": \"Hatem\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"Address1\",\r\n        \"address2\": \"Address2\",\r\n        \"zipCode\": \"01020\",\r\n        \"city\": \"Charguia2\",\r\n        \"country\": \"TN\",\r\n        \"state\": \"Tunisie\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}_{{index}}@manaty.com\",\r\n        \"phone\": \"+0135215579\",\r\n        \"mobile\": \"+0141487410\"\r\n    },\r\n    \"language\": \"ENG\",\r\n    \"terminationReason\": \"TERM_REASON_2\",\r\n    \"subscriptionDate\": \"2016-03-16\",\r\n    \"terminationDate\": \"2016-06-15\",\r\n    \"customerCategory\": \"PROSPECT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"mandateIdentification\": \"M10221\",\r\n    \"mandateDate\": \"2016-04-01\",\r\n    \"currency\": \"USD\",\r\n    \"caStatus\": \"ACTIVE\",\r\n    \"creditCategory\": \"PART_C\",\r\n    \"dateStatus\": \"2016-04-01\",\r\n    \"dateDunningLevel\": \"2016-04-04\",\r\n    \"dunningLevel\": \"R1\",\r\n    \"billingCycle\": \"CYC_INV_MT_2\",\r\n    \"seller\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"country\": \"US\",\r\n    \"nextInvoiceDate\": \"2016-05-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"baStatus\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}_{{index}}@manaty.com\",\r\n    \"uaStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/updateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"updateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Customer CRM_CUST",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a457de88-a40c-4715-b97f-37c359381ed7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CRM-AccountHierarchy\",\r\n    \"externalRef1\": \"Ref1\",\r\n    \"externalRef2\": \"Ref2\",\r\n    \"name\": {\r\n        \"title\": \"M\",\r\n        \"firstName\": \"Saidani\",\r\n        \"lastName\": \"Hatem\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"Address1\",\r\n        \"address2\": \"Address2\",\r\n        \"zipCode\": \"20250\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}_18@yahoo.fr\",\r\n        \"phone\": \"+0122674100\",\r\n        \"mobile\": \"+0139154716\"\r\n    },\r\n    \"language\": \"FRA\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"subscriptionDate\": \"2016-02-01\",\r\n    \"terminationDate\": \"2016-05-01\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"mandateIdentification\": \"M1\",\r\n    \"mandateDate\": \"2016-04-01\",\r\n    \"currency\": \"EUR\",\r\n    \"caStatus\": \"ACTIVE\",\r\n    \"creditCategory\": \"VIP\",\r\n    \"dateStatus\": \"2016-04-01\",\r\n    \"dateDunningLevel\": \"2016-04-04\",\r\n    \"dunningLevel\": \"R0\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"seller\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"country\": \"FR\",\r\n    \"nextInvoiceDate\": \"2016-05-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"baStatus\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}_18@yahoo.fr\",\r\n    \"uaStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/{{entityPrefix}}_{{index}}_CRM-CUST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"{{entityPrefix}}_{{index}}_CRM-CUST"
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b6afb07-46e9-418b-ad45-be9d7aa5ec0a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Offer templates",
							"item": [
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "06ba0b21-bb7e-44ed-94b1-6061f81d7cc6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "List offerTemplates - show all",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "14650b1e-9220-4acb-9f24-178ed8322de2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Body contains offer templates\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_NOSELLER\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_A\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_B\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_C\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/list?limit=500",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"list"
											],
											"query": [
												{
													"key": "limit",
													"value": "500"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a6de5788-13ba-439b-9d9e-02b7bf63efdf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "List offerTemplates - show A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4fea3a24-c0b8-4892-b219-ab2fea211796",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Body contains offer templates\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_NOSELLER\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_A\\\"\");",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_B\\\"\");",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_C\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/list?limit=500",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"list"
											],
											"query": [
												{
													"key": "limit",
													"value": "500"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - no seller",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "19f9d275-ab42-48fd-8f80-dc0bc7b7e44f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.offerTemplate.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.offerTemplate.name).to.deep.equal(jsonBody.name);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_NOSELLER\",\n    \"name\": \"{{entityPrefix}}_{{index}}_OFFER_NOSELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_NOSELLER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_NOSELLER"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9d26bd65-24b7-49d3-b4c0-170e3ce43d48",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.offerTemplate.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.offerTemplate.name).to.deep.equal(jsonBody.name);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_A\",\n    \"name\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_A\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - B fails",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a183232b-3414-4470-83a5-a8f8a8293bb6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bb41f8b5-b91e-4f12-a8ba-7497583a66f0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "List offerTemplates - show B and C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ff1f0b7b-32d0-4e5d-99ec-7ff7635ac834",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Body contains offer templates\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_NOSELLER\\\"\");",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_A\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_B\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_C\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/list?limit=500",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"list"
											],
											"query": [
												{
													"key": "limit",
													"value": "500"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - B 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e2816e1-d36f-4e38-8d0b-9c2154c4372e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.offerTemplate.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.offerTemplate.name).to.deep.equal(jsonBody.name);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_B\",\r\n    \"name\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_B\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7dfdbcc5-3244-46ae-993e-9bc0ded51f3d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.offerTemplate.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.offerTemplate.name).to.deep.equal(jsonBody.name);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_C\",\r\n    \"name\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_C\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_C"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - A  fails",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7dc1db51-06e0-4832-acff-4d49c86afaf5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_C only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fe48fae6-6bd4-4c08-87fa-8cf8ee87cfce",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_C\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "List offerTemplates - show C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa02142a-dfac-4024-877c-5f632382d257",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Body contains offer templates\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_NOSELLER\\\"\");",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_A\\\"\");",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_B\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_C\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/list?limit=500",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"list"
											],
											"query": [
												{
													"key": "limit",
													"value": "500"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - C 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac646113-bd74-4042-8796-5cb698dc70e7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.offerTemplate.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.offerTemplate.name).to.deep.equal(jsonBody.name);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_C\",\r\n    \"name\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_C\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_C"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - A  fails 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0b4fae3b-20ff-4b56-81bc-20a0f6e58fbd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - B fails 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "be504c88-d550-42c7-a100-fb638e952ce1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore User to default.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ac822af-d7d4-4af6-9ac7-1a885db93878",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "List offerTemplates by filter - show only C and A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c392e02f-b93d-4e48-b6ed-ca66205b7519",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Body contains offer templates\", function () {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData.paging.totalNumberOfRecords).to.eql(3);",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_NOSELLER\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_A\\\"\");",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_B\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_C\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_D\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"filters\": {\r\n        \"inList sellers\": \"{{entityPrefix}}_{{index}}_SELLER_A,{{entityPrefix}}_{{index}}_SELLER_C\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/list",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"list"
											]
										}
									},
									"response": []
								},
								{
									"name": "List offerTemplates by filter - do not show C and A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44f2242a-239c-4032-bd13-13772cc513f2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Body contains offer templates\", function () {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData.paging.totalNumberOfRecords).to.eql(2);",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_NOSELLER\\\"\");",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_A\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_B\\\"\");",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_C\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_D\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"filters\": {\n        \"not-inList sellers\": \"{{entityPrefix}}_{{index}}_SELLER_A,{{entityPrefix}}_{{index}}_SELLER_C\",\n        \"like code\": \"{{entityPrefix}}_{{index}}_*\"\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/list",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"list"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup Data",
							"item": [
								{
									"name": "Set securedEntities=false",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "74a0b46a-6dda-463c-b1c2-2beeb2a2e381",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.superpassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.superuser}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "\n{\n    \"properties\": [\n        {\n            \"key\": \"secured.entities.enabled\",\n            \"value\": \"false\"\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/configurations/properties",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"configurations",
												"properties"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Customer CUSTA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73578e7f-b016-408a-9e53-ae1617eb982c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/{{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"{{entityPrefix}}_{{index}}_CUSTA"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Deleted Customer CUSTA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc51b3a8-237c-4cb8-a923-6b4fcc1cf6c4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Customer with code=\" + pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_CUSTA does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Customer CUSTB",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b71ebd33-d802-44bc-9acc-b285870bcbc1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/{{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"{{entityPrefix}}_{{index}}_CUSTB"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Deleted Customer CUSTB",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7d1b26d4-a17c-4741-890a-5e28358aa569",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Customer with code=\" + pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_CUSTB does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove offerTemplate - no seller",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ca725de-a0e4-416f-8081-ccf584c4d973",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{entityPrefix}}_{{index}}_OFFER_NOSELLER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{entityPrefix}}_{{index}}_OFFER_NOSELLER"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove offerTemplate - A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd5017ce-ba19-44f2-a905-c50a749dd8b5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{entityPrefix}}_{{index}}_OFFER_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{entityPrefix}}_{{index}}_OFFER_SELLER_A"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove offerTemplate - B",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bfcb84ed-a5ec-4814-9187-a7cb3320bacb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{entityPrefix}}_{{index}}_OFFER_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{entityPrefix}}_{{index}}_OFFER_SELLER_B"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove offerTemplate - C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "99a158ef-041b-4e7f-b49d-9b167e513609",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{entityPrefix}}_{{index}}_OFFER_SELLER_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{entityPrefix}}_{{index}}_OFFER_SELLER_C"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove offerTemplate - D",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7de27f03-af4e-4aaa-9e3a-632ab1f715e6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{entityPrefix}}_{{index}}_OFFER_SELLER_D",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{entityPrefix}}_{{index}}_OFFER_SELLER_D"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Seller SELLER_A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e2d6feda-198d-4465-9338-4b0f198b93a2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/{{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"{{entityPrefix}}_{{index}}_SELLER_A"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find deleted Seller SELLER_A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "559286e9-63b2-4b8d-b451-1e592789b237",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Seller with code=\" + pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SELLER_A does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Seller SELLER_C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ba04f3d-9bc0-4957-8633-5b3c5cb21df5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/{{entityPrefix}}_{{index}}_SELLER_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"{{entityPrefix}}_{{index}}_SELLER_C"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Seller SELLER_B",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae3d1163-1054-46a1-8406-2064d59e7688",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/{{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"{{entityPrefix}}_{{index}}_SELLER_B"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find deleted Seller SELLER_B",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5a5edc1d-81bf-4cd4-bbd0-bf0e9f502d00",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Seller with code=\" + pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SELLER_B does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sellerCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find deleted Seller SELLER_C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aa0e83a9-2369-4a74-9f30-57c1101748b3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Seller with code=\" + pm.collectionVariables.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SELLER_C does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sellerCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_C"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d5541c88-94cc-4177-b30f-1576332f93c6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete User level 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a05113d1-414b-4929-85c5-bffa68318a21",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level1\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user/{{entityPrefix}}_{{index}}_Username.Level1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user",
												"{{entityPrefix}}_{{index}}_Username.Level1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete User level 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f92baacb-ce93-425b-90f5-9d1cffe331e4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level2\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user/{{entityPrefix}}_{{index}}_Username.Level2",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user",
												"{{entityPrefix}}_{{index}}_Username.Level2"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete User level 2.1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "62ad71ae-4df5-496e-b6ee-99e40906f5df",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql()",
													"    ;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level21\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user/{{entityPrefix}}_{{index}}_Username.Level21",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user",
												"{{entityPrefix}}_{{index}}_Username.Level21"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete User level 2.2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "af86edc9-d194-4bf3-aa93-0b2f8fddc175",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level22\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user/{{entityPrefix}}_{{index}}_Username.Level22",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user",
												"{{entityPrefix}}_{{index}}_Username.Level22"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete User level 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b03f3e1-36fe-4580-b2e3-82aee547e1c0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level3\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user/{{entityPrefix}}_{{index}}_Username.Level3",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user",
												"{{entityPrefix}}_{{index}}_Username.Level3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove UserHierarchyLevel 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c8d1dde-05e6-4cd9-8d55-4e59bff5a833",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"hierarchyLevelCode\": \"{{entityPrefix}}_{{index}}_LEVEL_1\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/hierarchy/userGroupLevel/{{entityPrefix}}_{{index}}_LEVEL_1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"hierarchy",
												"userGroupLevel",
												"{{entityPrefix}}_{{index}}_LEVEL_1"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3c05eb73-2b5b-4068-8dd7-9e959b1b01d8",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 34);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "17bd610a-7851-4c6e-b4be-4eae8f815d7d",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Workflow executions",
					"item": [
						{
							"name": "Test data",
							"item": [
								{
									"name": "Create customer account for WF",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "724a327a-91d0-4dc7-943f-5914ba1a9a72",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_WF_CA\",\r\n    \"description\": \"testWF_CA\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}@manaty.net\",\r\n        \"phone\": \"00123456789\",\r\n        \"mobile\": \"092152154716\"\r\n    },\r\n    \"mandateIdentification\": \"1234569548\",\r\n    \"mandateDate\": \"2016-03-10\",\r\n    \"customer\": \"{{baseEntityPrefix}}_CUST\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"creditCategory\": \"Pro\",\r\n    \"status\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ScriptInstance for Action",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "606f65da-53ee-46d0-a835-d50661839a6b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"org.meveo.service.script.TheAction\",\r\n    \"description\": \"The Action Script\",\r\n    \"type\": \"JAVA\",\r\n    \"script\": \"package org.meveo.service.script;\\nimport java.util.Map;\\nimport java.math.BigDecimal;\\nimport org.meveo.admin.exception.BusinessException;\\nimport org.meveo.model.admin.User;\\nimport org.meveo.model.crm.Provider;\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\npublic class TheAction extends Script {  \\n  private static final Logger log = LoggerFactory.getLogger(TheAction.class);\\npublic void execute(Map<String,Object> context) throws BusinessException{\\nlog.debug(\\\"\\\\nTheAction Execution\\\\n\\\");\\ncontext.put(Script.RESULT_VALUE, \\\"A string response\\\");\\n}\\n}\",\r\n    \"executionRoles\": [\r\n        {\r\n            \"name\": \"administrateur\"\r\n        }\r\n    ],\r\n    \"sourcingRoles\": [\r\n        {\r\n            \"name\": \"administrateur\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Dunning WFType Script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "997a0aa4-4c80-4d28-b2f9-a2e23a71a9a1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"org.meveo.service.script.DunningWFTypeScript\",\r\n    \"description\": \"DunningWFTypeScript\",\r\n    \"type\": \"JAVA\",\r\n    \"script\": \"package org.meveo.service.script;\\n\\nimport java.util.ArrayList;\\nimport java.util.Date;\\nimport java.util.List;\\n\\nimport org.meveo.model.admin.User;\\nimport org.meveo.model.payments.CustomerAccount;\\nimport org.meveo.model.payments.DunningLevelEnum;\\nimport org.meveo.service.script.wf.WFTypeScript;\\n\\n\\npublic class DunningWFTypeScript extends WFTypeScript<CustomerAccount>{\\n\\n  public DunningWFTypeScript() {    \\n  }\\n  \\n  public DunningWFTypeScript(CustomerAccount e) {\\n    super(e);\\n  }\\n  @Override\\n  public List<String> getStatusList() {    \\n    List<String> values = new ArrayList<String>();\\n    for (DunningLevelEnum dunningLevelEnum : DunningLevelEnum.values()) {\\n      values.add(dunningLevelEnum.name());\\n    }\\n    return values;\\n  }\\n\\n  @Override\\n  public void changeStatus(String newStatus) {\\n    entity.setDunningLevel(DunningLevelEnum.valueOf(newStatus));\\n    entity.setDateDunningLevel(new Date());\\n  }\\n\\n  @Override\\n  public String getActualStatus() {    \\n    return entity.getDunningLevel().name();\\n  }\\n}\",\r\n    \"executionRoles\": [\r\n        {\r\n            \"name\": \"administrateur\"\r\n        }\r\n    ],\r\n    \"sourcingRoles\": [\r\n        {\r\n            \"name\": \"administrateur\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Workflow with natif WFType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "13873304-de02-4fca-8341-8cd99af3a600",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_DunningWorkflow\",\r\n    \"description\": \"Dunning workflow from class\",\r\n    \"enableHistory\": \"true\",\r\n    \"targetEntityClass\": \"org.meveo.admin.wf.types.DunningWF\",\r\n    \"initStatus\": \"R0\",\r\n    \"status\": [\r\n        {\r\n            \"code\": \"R0\"\r\n        }\r\n    ],\r\n    \"transition\": [\r\n        {\r\n            \"fromStatus\": \"R0\",\r\n            \"toStatus\": \"R1\",\r\n            \"conditionEl\": \"#{true}\",\r\n            \"description\": \"DESCRIPTION to R1\",\r\n            \"actionScriptCode\": \"#{mv:executeScript(entity,\\\"org.meveo.service.script.TheAction\\\",null)}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/admin/genericWorkflow/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"admin",
												"genericWorkflow",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Workflow with runTime WFType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1665ab4c-6af6-4d7e-ba2e-42de0840b896",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_DunningRunTimeWF\",\r\n    \"description\": \"Dunning workflow from script\",\r\n    \"enableHistory\": \"true\",\r\n    \"targetEntityClass\": \"org.meveo.service.script.DunningWFTypeScript\",\r\n    \"initStatus\": \"R0\",\r\n    \"status\": [\r\n        {\r\n            \"code\": \"R0\"\r\n        }\r\n    ],\r\n    \"transition\": [\r\n        {\r\n            \"fromStatus\": \"R1\",\r\n            \"toStatus\": \"R2\",\r\n            \"conditionEl\": \"#{true}\",\r\n            \"description\": \"DESCRIPTION to R2\",\r\n            \"actionScriptCode\": \"#{mv:executeScript(entity,\\\"org.meveo.service.script.TheAction\\\",null)}\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/admin/genericWorkflow/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"admin",
												"genericWorkflow",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "find & execute",
							"item": [
								{
									"name": "find workflow by entity",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f6cf64e4-377b-48f3-8ecb-4e45a7096ec2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/admin/genericWorkflow/findByEntity?baseEntityName=org.meveo.model.payments.CustomerAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"admin",
												"genericWorkflow",
												"findByEntity"
											],
											"query": [
												{
													"key": "baseEntityName",
													"value": "org.meveo.model.payments.CustomerAccount"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Execute WF - NatitType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b8bbedbe-7333-4f85-9562-0e687ca0f23c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/admin/genericWorkflow/execute?baseEntityName=org.meveo.model.payments.CustomerAccount&entityInstanceCode={{entityPrefix}}_{{index}}_WF_CA&workflowCode={{baseEntityPrefix}}_DunningWorkflow",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"admin",
												"genericWorkflow",
												"execute"
											],
											"query": [
												{
													"key": "baseEntityName",
													"value": "org.meveo.model.payments.CustomerAccount"
												},
												{
													"key": "entityInstanceCode",
													"value": "{{entityPrefix}}_{{index}}_WF_CA"
												},
												{
													"key": "workflowCode",
													"value": "{{baseEntityPrefix}}_DunningWorkflow"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Execute WF - scriptType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2276123a-14fa-432f-a5a7-20264fa2e0e7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/admin/genericWorkflow/execute?baseEntityName=org.meveo.model.payments.CustomerAccount&entityInstanceCode={{entityPrefix}}_{{index}}_WF_CA&workflowCode={{baseEntityPrefix}}_DunningRunTimeWF",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"admin",
												"genericWorkflow",
												"execute"
											],
											"query": [
												{
													"key": "baseEntityName",
													"value": "org.meveo.model.payments.CustomerAccount"
												},
												{
													"key": "entityInstanceCode",
													"value": "{{entityPrefix}}_{{index}}_WF_CA"
												},
												{
													"key": "workflowCode",
													"value": "{{baseEntityPrefix}}_DunningRunTimeWF"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "wf history",
							"item": [
								{
									"name": "findHistory-no criteria",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cbd8869e-cc94-4a6c-8709-080f0074f66b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/admin/genericWorkflow/history",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"admin",
												"genericWorkflow",
												"history"
											]
										}
									},
									"response": []
								},
								{
									"name": "findHistory-with criteria",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "27d22176-958e-44ba-922f-b2ea0774a845",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"entityInstanceCode\": \"{{entityPrefix}}_{{index}}_WF_CA\",\r\n    \"fromStatus\": \"R1\",\r\n    \"toStatus\": \"R2\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/admin/genericWorkflow/history?entityInstanceCode=RS_FULL_{{index}}_WF_CA&fromStatus=R1&toStatus=R2",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"admin",
												"genericWorkflow",
												"history"
											],
											"query": [
												{
													"key": "entityInstanceCode",
													"value": "RS_FULL_{{index}}_WF_CA"
												},
												{
													"key": "fromStatus",
													"value": "R1"
												},
												{
													"key": "toStatus",
													"value": "R2"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "012c2a12-5cec-41c1-9e0c-51ae2656d0cb",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 453);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "3608efca-85c9-432a-bec2-f8f49d79dd1e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Filter search and invoicing",
					"item": [
						{
							"name": "Data model",
							"item": [
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0a26bcb4-66d8-49cd-9b50-2d9de31544f3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_CHARGE\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\n    \"subscriptionDate\": \"2016-02-01\",\n    \"endAgreementDate\": \"2017-02-01\"\n  }\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36bad072-3e29-42b2-9add-3bc28d963748",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_CHARGE\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2016-02-01\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create RatedTransactions Filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52ce7980-d036-42b7-a384-faeda1680f6a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterRT\",\n    \"description\": \"Rated transactions for invoicing test\",\n    \"shared\": \"false\",\n    \"inputXml\": \"<filter>\\n    <primarySelector>\\n    <targetEntity>org.meveo.model.billing.RatedTransaction</targetEntity>\\n    <alias>r</alias>\\n    <displayFields>\\n      <field>code</field>\\n      <field>description</field>\\n      <field>usageDate</field>\\n    </displayFields>\\n    <exportFields/>\\n    <ignoreIfNotFoundForeignKeys/>\\n  </primarySelector>\\n  <secondarySelectors/>\\n  <disabled>false</disabled>\\n  <appendGeneratedCode>false</appendGeneratedCode>\\n  <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n    <filterConditionType>COMPOSITE_AND</filterConditionType>\\n    <filterConditions>\\n        <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n            <filterConditionType>COMPOSITE_AND</filterConditionType>\\n            <filterConditions>\\n                  <primitiveFilterCondition>\\n                    <filterConditionType>PRIMITIVE</filterConditionType>\\n                    <fieldName>usageDate</fieldName>\\n                    <operator><![CDATA[<=]]></operator>\\n                    <operand>date:01/05/2016</operand>\\n                  </primitiveFilterCondition>\\n            </filterConditions>\\n        </filterCondition>\\n        <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n            <filterConditionType>COMPOSITE_AND</filterConditionType>\\n            <filterConditions>\\n                <primitiveFilterCondition>\\n                    <filterConditionType>PRIMITIVE</filterConditionType>\\n                    <fieldName>code</fieldName>\\n                    <operator>=</operator>\\n                    <operand>{{baseEntityPrefix}}_REC1</operand>\\n                  </primitiveFilterCondition>\\n            </filterConditions>\\n        </filterCondition>\\n    </filterConditions>\\n  </filterCondition>\\n</filter>\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filter/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filter",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Rated Transaction Job",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ea048abe-c396-4b60-b367-aec4de3eb7e1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"RT_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search from filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fbeb79c-0a3d-40a8-9c3a-1a0a7e93bbdb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Body matches string\", function () {",
													"    pm.expect(pm.response.text()).not.to.include(\"<code>\"+pm.collectionVariables.get(\"baseEntityPrefix\")+\"_OS1</code>\");",
													"    pm.expect(pm.response.text()).to.include(\"<code>\"+pm.collectionVariables.get(\"baseEntityPrefix\")+\"_REC1</code>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterRT\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filteredList/listByFilter?from=0&size=100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filteredList",
												"listByFilter"
											],
											"query": [
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "100"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "779219b8-1a7b-4a87-a9fe-9cabeaa7e710",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 456);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4cdd343d-4b1b-4abf-9623-76e0218390b8",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Inbound Request Tests",
					"item": [
						{
							"name": "Inbound 1",
							"item": [
								{
									"name": "Create ScriptInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fee62bce-88dc-44ae-ae97-46a46cb047d7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"org.meveo.service.script.inbound.InboundServletScript\",\n    \"description\": \"InboundServletScript\",\n    \"type\": \"JAVA\",\n    \"script\": \"package org.meveo.service.script.inbound;\\n\\nimport java.math.BigDecimal;\\nimport java.util.Map;\\nimport org.meveo.admin.exception.BusinessException;\\nimport org.meveo.model.admin.User;\\nimport org.meveo.model.billing.WalletOperation;\\nimport org.meveo.service.script.Script;\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\nimport org.meveo.model.notification.InboundRequest;\\n\\npublic class InboundServletScript extends Script {\\n\\n    private static final Logger log = LoggerFactory.getLogger(InboundServletScript.class);\\n\\n    public void execute(Map<String, Object> context) throws BusinessException {\\n        log.debug(\\\"InboundServlet script...\\\");\\n      \\n        InboundRequest inboundRequest = (InboundRequest) context.get(\\\"event\\\");\\n        inboundRequest.getHeaders().put(\\\"INBOUND_SCRIPT_VAR\\\", \\\"InboundServletScript\\\");\\n\\n    inboundRequest.setResponseBody(\\\"API test\\\");\\n\\n        if (inboundRequest.getParameters()!=null && inboundRequest.getParameters().get(\\\"returnStatus\\\")!=null){\\n            inboundRequest.setResponseStatus(Integer.parseInt(inboundRequest.getParameters().get(\\\"returnStatus\\\")));\\n        }\\n    }\\n}\",\n    \"executionRoles\": [\n        {\n            \"name\": \"administrateur\"\n        }\n    ],\n    \"sourcingRoles\": [\n        {\n            \"name\": \"administrateur\"\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Notifications",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d6fd4bc5-8528-4723-b2d9-25eaceb41028",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"INBOUND_SERVLET_NOTIF\",\n    \"classNameFilter\": \"org.meveo.model.notification.InboundRequest\",\n    \"eventTypeFilter\": \"INBOUND_REQ\",\n    \"scriptInstanceCode\": \"org.meveo.service.script.inbound.InboundServletScript\",\n    \"elFilter\": \"#{event.parameters!=null and !event.parameters.containsKey('doNotFire')}\",\n    \"scriptParams\": {\n        \"event\": \"#{event}\"\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Fired=true",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ceb788a-e42f-4204-83e1-76ab56fc2f99",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Fired - change return status to 230",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42a6f15f-d695-40d3-9915-e397ffb693c2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Fired=false",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae56c38a-664d-4218-bf11-05eecbc618f0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "List notification history",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "05fb7f5b-0493-4378-a76b-e63d91dff2b5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"/*",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.notification).to.deep.equal(jsonBody.notification);",
													"    pm.expect(jsonData.entityClassName).to.deep.equal(jsonBody.entityClassName);",
													"    pm.expect(jsonData.nbRetry).to.deep.equal(jsonBody.nbRetry);",
													"}); */"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"notification\": \"INBOUND_SERVLET_NOTIF\",\n    \"entityClassName\": \"org.meveo.model.notification.InboundRequest\",\n    \"nbRetry\": \"0\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/listNotificationHistory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"listNotificationHistory"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"description": "What is this for and what API is it using?",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5bffbe52-a7ad-4fda-a810-e97ecf2a6743",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 377);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "ba5bf1a1-829a-425d-94e2-0f97fac6c494",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Jobs",
					"item": [
						{
							"name": "Job Reporting",
							"item": [
								{
									"name": "Execute 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "27c8e5d1-f2d6-4f8d-bdab-8e1415aaf118",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
													"});",
													"",
													"",
													"var jsonData = pm.response.json();",
													"pm.globals.set(\"job_id\", jsonData.actionStatus.message);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"M_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								},
								{
									"name": "Execute 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da6ab4ab-20dc-41cc-b13f-e0370eaf60e1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"M_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find by code",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "18719b87-20a9-4da1-aa63-3f0a9bf81999",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.jobExecutionResultDto.jobInstanceCode).to.deep.equal(jsonBody.jobInstanceCode);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"jobInstanceCode\": \"M_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/jobReport?code=M_Job",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"jobReport"
											],
											"query": [
												{
													"key": "code",
													"value": "M_Job"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47c3e27d-503d-4d83-a9c9-a6bbc9a5e9a7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.jobExecutionResultDto.jobInstanceCode).to.deep.equal(jsonBody.jobInstanceCode);",
													"    pm.expect(jsonData.jobExecutionResultDto.id).to.deep.equal(jsonBody.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"id\": {{job_id}},\n\t\"jobInstanceCode\": \"M_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/jobReport?id={{job_id}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"jobReport"
											],
											"query": [
												{
													"key": "id",
													"value": "{{job_id}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Reporting",
					"item": [
						{
							"name": "ReportExtract",
							"item": [
								{
									"name": "Create ScriptInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f8aa8313-43e1-42d3-becf-82f27a0d5890",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"org.meveo.service.script.finance.{{entityPrefix}}_{{index}}_RE_SCRIPT_1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_RE_SCRIPT_1\",\n    \"type\": \"JAVA\",\n    \"script\": \"package org.meveo.service.script.finance;\\n\\nimport java.io.File;\\nimport java.io.FileWriter;\\nimport java.text.DateFormat;\\nimport java.text.SimpleDateFormat;\\nimport java.util.List;\\nimport java.util.Map;\\n\\nimport org.meveo.admin.exception.BusinessException;\\nimport org.meveo.model.payments.AccountOperation;\\nimport org.meveo.model.payments.CustomerAccount;\\nimport org.meveo.model.payments.RecordedInvoice;\\nimport org.meveo.service.payments.impl.AccountOperationService;\\nimport org.meveo.service.script.Script;\\nimport org.meveo.service.script.finance.ReportExtractScript;\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\nimport java.util.Date;\\n\\npublic class {{entityPrefix}}_{{index}}_RE_SCRIPT_1 extends ReportExtractScript {\\n\\n    private static final Logger LOGGER = LoggerFactory.getLogger({{entityPrefix}}_{{index}}_RE_SCRIPT_1.class);\\n\\n    private AccountOperationService accountOperationService = (AccountOperationService) getServiceInterface(AccountOperationService.class.getSimpleName());\\n\\n\\n    @Override\\n    public void execute(Map<String, Object> initContext) throws BusinessException {\\n        try {\\n            LOGGER.debug(\\\"#####################Starting of script {{entityPrefix}}_{{index}}_RE_SCRIPT_1\\\");\\n    \\n            // Get transaction start and end date\\n            Date startDate = (Date) initContext.get(ReportExtractScript.START_DATE);    \\n            Date endDate = (Date) initContext.get(ReportExtractScript.END_DATE);\\n            DateFormat df = new SimpleDateFormat(\\\"yyyy-MM-dd\\\");\\n             \\n            List<AccountOperation> accountOperations = accountOperationService.list();\\n            //create export file\\n            String exportDir = String.valueOf(initContext.get(ReportExtractScript.DIR));\\n            File dir = new File(exportDir);\\n            if (!dir.exists()) {\\n                dir.mkdirs();\\n            }\\n            CustomerAccount customerAccount = null;\\n            StringBuilder sb =new StringBuilder();\\n            sb.append(\\\"Transaction Date;Transaction Type;Amount;Due Date;Reference;Transaction Category;Invoice Date;\\\"\\n                    + \\\"Customer Account Code;Customer Account Description\\\\n\\\");\\n            for (AccountOperation accountOperation : accountOperations) { \\n                if(accountOperation.getTransactionDate().equals(startDate) || accountOperation.getTransactionDate().equals(endDate)\\n                        || (accountOperation.getTransactionDate().after(startDate) && accountOperation.getTransactionDate().before(endDate))) {\\n                    \\n                    customerAccount = accountOperation.getCustomerAccount();\\n                    sb.append(nil(accountOperation.getTransactionDate().toString())+ \\\";\\\");\\n                    sb.append(nil(accountOperation.getType()) + \\\";\\\");\\n                    sb.append(nil(accountOperation.getAmount().toString()) + \\\";\\\");\\n                    sb.append(isNull(accountOperation.getDueDate()) + \\\";\\\");\\n                    sb.append(nil(accountOperation.getReference()) + \\\";\\\");\\n                    sb.append(nil(accountOperation.getTransactionCategory().toString()) + \\\";\\\");\\n                    if(accountOperation instanceof RecordedInvoice) {\\n                        RecordedInvoice invoice = (RecordedInvoice) accountOperation;\\n                        sb.append(invoice.getInvoiceDate().toString() + \\\";\\\");\\n                    } else {\\n                        sb.append(\\\";\\\");\\n                    }\\n                    sb.append(nil(customerAccount.getCode()) + \\\";\\\");\\n                    sb.append(nil(customerAccount.getDescriptionOrCode()) + \\\";\\\\n\\\");\\n\\n                    \\n                }\\n            }\\n              String strFilename = String.valueOf(initContext.get({{entityPrefix}}_{{index}}_RE_SCRIPT_1.FILENAME));\\n              LOGGER.debug(\\\"output={}\\\", strFilename);\\n            File file = new File(dir + File.separator + strFilename);\\n            file.createNewFile();\\n            FileWriter fileWriter = new FileWriter(file);\\n            fileWriter.write(sb.toString());\\n            fileWriter.close();\\n            \\n            LOGGER.debug(\\\"#####################Ending of script {{entityPrefix}}_{{index}}_RE_SCRIPT_1\\\");\\n        } catch (Exception e) {\\n            LOGGER.error(\\\"Exception:\\\", e);\\n            throw new BusinessException(e.getMessage());\\n        }\\n        \\n    }\\n  \\n  private String isNull(Object obj) {\\n    if(obj == null) {\\n      return \\\"\\\";\\n    } else {\\n      return obj.toString();\\n    }\\n  }\\n  \\n    private String nil(String word) {\\n        if (word == null || \\\"null\\\".equalsIgnoreCase(word)) {\\n            return \\\"\\\";\\n        } else {\\n            return word;\\n        }\\n    }\\n}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate - SQL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c4418e9-e772-4693-82fe-210fa0d02700",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RE_SQL_1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_RE_SQL_1\",\n    \"scriptType\": \"SQL\",\n    \"filenameFormat\": \"#{re.category}_accounts-[yyyy_MM_dd].csv\",\n    \"outputDir\": \"reports/accounts\",\n    \"category\": \"accounts\",\n    \"sqlQuery\": \"select code, description from account_entity where :START_DATE<>:END_DATE\",\n    \"params\": {\n        \"START_DATE\": \"31/01/2017\",\n        \"END_DATE\": \"31/12/2018\"\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/finance/reportExtracts/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"finance",
												"reportExtracts",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate - JAVA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78f2cc0e-a366-4cf5-be41-142d7ae0f254",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RE_JAVA_1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_RE_JAVA_1\",\n    \"scriptType\": \"JAVA\",\n    \"filenameFormat\": \"accounts-ops-[yyyy_MM_dd].csv\",\n    \"outputDir\": \"reports/accounts\",\n    \"category\": \"accounts\",\n    \"scriptInstanceCode\": \"org.meveo.service.script.finance.{{entityPrefix}}_{{index}}_RE_SCRIPT_1\",\n    \"params\": {\n        \"START_DATE\": \"31/01/2017\",\n        \"END_DATE\": \"31/12/2018\"\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/finance/reportExtracts/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"finance",
												"reportExtracts",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Run - SQL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "37c4eb03-55d6-4c3b-aa3d-02d26199071f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RE_SQL_1\",\n    \"params\": {\n        \"START_DATE\": \"31/01/2017\",\n        \"END_DATE\": \"31/12/2018\"\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/finance/reportExtracts/run",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"finance",
												"reportExtracts",
												"run"
											]
										}
									},
									"response": []
								},
								{
									"name": "Run - JAVA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "00897ccb-5bde-4673-8a50-69deab8110fb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RE_JAVA_1\",\n    \"params\": {\n        \"START_DATE\": \"31/01/2017\",\n        \"END_DATE\": \"31/12/2018\"\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/finance/reportExtracts/run",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"finance",
												"reportExtracts",
												"run"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find - SQL 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cb51c2c6-b720-4af5-bc03-f2f62fcf19cb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.reportExtract.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.reportExtract.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.reportExtract.params).to.deep.equal(jsonBody.params);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RE_SQL_1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_RE_SQL_1\",\n    \"params\": {\n        \"START_DATE\": \"31/01/2017\",\n        \"END_DATE\": \"31/12/2018\"\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/finance/reportExtracts?reportExtractCode={{entityPrefix}}_{{index}}_RE_SQL_1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"finance",
												"reportExtracts"
											],
											"query": [
												{
													"key": "reportExtractCode",
													"value": "{{entityPrefix}}_{{index}}_RE_SQL_1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find - JAVA 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e70492b-151c-4def-aeca-66a659314411",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.reportExtract.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.reportExtract.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.reportExtract.params).to.deep.equal(jsonBody.params);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RE_JAVA_1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_RE_JAVA_1\",\n    \"params\": {\n        \"START_DATE\": \"31/01/2017\",\n        \"END_DATE\": \"31/12/2018\"\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/finance/reportExtracts?reportExtractCode={{entityPrefix}}_{{index}}_RE_JAVA_1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"finance",
												"reportExtracts"
											],
											"query": [
												{
													"key": "reportExtractCode",
													"value": "{{entityPrefix}}_{{index}}_RE_JAVA_1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove - SQL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e8eca0f-5650-4abf-9f29-d46095c55552",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{entityPrefix}}_{{index}}_RE_SQL_1",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/finance/reportExtracts",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"finance",
												"reportExtracts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove - JAVA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "de964bee-c8b3-4018-8de7-271108bb4b6e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{entityPrefix}}_{{index}}_RE_JAVA_1",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/finance/reportExtracts",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"finance",
												"reportExtracts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find - SQL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "34190acc-6f12-4fe8-aa79-0c94f4518ec5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ReportExtract with code=\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_RE_SQL_1 does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/finance/reportExtracts?reportExtractCode={{entityPrefix}}_{{index}}_RE_SQL_1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"finance",
												"reportExtracts"
											],
											"query": [
												{
													"key": "reportExtractCode",
													"value": "{{entityPrefix}}_{{index}}_RE_SQL_1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find - JAVA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e9a3bf5-9cb1-49be-a64a-b3fc9ad9ba04",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ReportExtract with code=\"+pm.collectionVariables.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_RE_JAVA_1 does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/finance/reportExtracts?reportExtractCode={{entityPrefix}}_{{index}}_RE_JAVA_1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"finance",
												"reportExtracts"
											],
											"query": [
												{
													"key": "reportExtractCode",
													"value": "{{entityPrefix}}_{{index}}_RE_JAVA_1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Job",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4f7aec6-b8e6-404c-a0d6-2f15b243b2c1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"RE_Job\",\n    \"jobTemplate\": \"ReportExtractJob\",\n    \"timerCode\": \"Monthly\",\n    \"jobCategory\": \"DWH\",\n    \"limitToSingleNode\": \"true\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/create",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Execute Job",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef41b5ad-431e-49fc-a869-ec572117c8fa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"RE_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fcac59c8-99eb-4ccd-a6dd-face2e263a64",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/org.meveo.service.script.finance.{{entityPrefix}}_{{index}}_RE_SCRIPT_1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"org.meveo.service.script.finance.{{entityPrefix}}_{{index}}_RE_SCRIPT_1"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "fb2120ee-48c2-4c32-ad95-11f6f8caa56f",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 339);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5618361a-5439-4e3b-a2b7-401ef35bf29a",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GDPR Erasure",
					"item": [
						{
							"name": "Account operations",
							"item": [
								{
									"name": "Create BillingCycle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd3c7534-a35c-448c-a89f-4ac864f976e3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"CYC_INV_MT_GDPR_AO_{{index}}\",\n    \"description\": \"Monthly Invoice Cycle GDPR AO {{index}}\",\n    \"transactionDateDelay\": \"0\",\n    \"invoiceDateProductionDelay\": \"0\",\n    \"dueDateDelay\": \"2\",\n    \"invoiceDateDelay\": \"4\",\n    \"calendar\": \"MONTHLY\",\n    \"invoiceTypeCode\": \"COM\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2640f19-f514-43ad-8f77-16f4f285922f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"crmAccountType\": \"C_UA\",\n    \"crmParentCode\": \"SELLER_FR\",\n    \"code\": \"GDPR_{{index}}\",\n    \"description\": \"Name\",\n    \"name\": {\n        \"title\": \"MR\",\n        \"firstName\": \"Edward\",\n        \"lastName\": \"Legaspi\"\n    },\n    \"address\": {\n        \"address1\": \"14 rue Crespin du Gast\",\n        \"zipCode\": \"75011\",\n        \"city\": \"PARIS\",\n        \"state\": \"Paris Area\",\n        \"country\": \"FR\"\n    },\n    \"email\": \"edward.legaspi@opencellsoft.com\",\n    \"language\": \"FRA\",\n    \"customerCategory\": \"CLIENT\",\n    \"customerBrand\": \"DEFAULT\",\n    \"currency\": \"EUR\",\n    \"billingCycle\": \"CYC_INV_MT_GDPR_AO_{{index}}\",\n    \"country\": \"FR\",\n    \"electronicBilling\": \"true\",\n    \"contactInformation\": {\n        \"email\": \"edward.legaspi@opencellsoft.com\"\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Created sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eedcef99-a9e5-468c-8798-21d6a87da771",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_{{index}}_GDPR_AO_SUB\",\n    \"description\": \"{{baseEntityPrefix}}_{{index}}_GDPR_AO_SUB\",\n    \"userAccount\": \"GDPR_{{index}}\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\n    \"subscriptionDate\": \"2007-10-13\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate service",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5defed22-b079-4533-a950-f0977ae3ffa9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{baseEntityPrefix}}_{{index}}_GDPR_AO_SUB\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\",\n                \"subscriptionDate\": \"2007-10-13\",\n                \"quantity\": \"1\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Run RT",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "99e43f57-e159-47d8-9323-7d3fbd9cdc33",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"RT_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Previous Invoice old",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "05dcff79-e9f5-4d63-ab07-c00f6bf51969",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"targetCode\": \"GDPR_{{index}}\",\n    \"targetType\": \"BILLINGACCOUNT\",\n    \"invoicingDate\": \"2007-11-01\",\n    \"generateXML\": \"true\",\n    \"generatePDF\": \"true\",\n    \"generateAO\": \"true\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoice/generateInvoice",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoice",
												"generateInvoice"
											]
										}
									},
									"response": []
								},
								{
									"name": "Payment for Invoice old",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c744f044-df93-4823-9eed-79195aefa6a1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customerAccount\": \"GDPR_{{index}}\",\n    \"description\": \"Payment for ${#TestSuite#invoice1_number}\",\n    \"amount\": \"1017.10\",\n    \"unMatchingAmount\": \"1017.10\",\n    \"dueDate\": \"2007-09-01\",\n    \"type\": \"OCC\",\n    \"transactionDate\": \"2007-10-15\",\n    \"transactionCategory\": \"CREDIT\",\n    \"reference\": \"INV-CLASSIC-000000001\",\n    \"accountCode\": \"651100000\",\n    \"accountCodeClientSide\": \"651100000\",\n    \"code\": \"RG_PLVT\",\n    \"otherCreditAndCharge\": {\n        \"operationDate\": \"2007-10-15\"\n    },\n    \"matchingStatus\": \"O\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/accountOperation",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"accountOperation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Created sub 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e5fec271-5fbf-4795-9b16-c8128c6e6621",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_{{index}}_GDPR_AO_SUB_NEW\",\n    \"description\": \"{{baseEntityPrefix}}_{{index}}_GDPR_AO_SUB_NEW\",\n    \"userAccount\": \"GDPR_{{index}}\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\n    \"subscriptionDate\": \"2017-10-13\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate service 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee19b82a-f87e-4cf8-b3d1-db5958e0a79d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{baseEntityPrefix}}_{{index}}_GDPR_AO_SUB_NEW\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\",\n                \"subscriptionDate\": \"2017-10-13\",\n                \"quantity\": \"1\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Run RT 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "95a1f8ea-b548-4aa3-801b-d610b0126ac5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"RT_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Previous Invoice new",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c448749f-ccc3-4d10-9166-3f2f7fa6c18d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"targetCode\": \"GDPR_{{index}}\",\n    \"targetType\": \"BILLINGACCOUNT\",\n    \"invoicingDate\": \"2017-11-01\",\n    \"generateXML\": \"true\",\n    \"generatePDF\": \"true\",\n    \"generateAO\": \"true\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoice/generateInvoice",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoice",
												"generateInvoice"
											]
										}
									},
									"response": []
								},
								{
									"name": "Payment for Invoice new",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7fc3039d-3bef-467b-977b-a854feee825d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customerAccount\": \"GDPR_{{index}}\",\n    \"description\": \"Payment for ${#TestSuite#invoice1_number}\",\n    \"amount\": \"1017.10\",\n    \"unMatchingAmount\": \"1017.10\",\n    \"dueDate\": \"2017-09-01\",\n    \"type\": \"OCC\",\n    \"transactionDate\": \"2017-10-15\",\n    \"transactionCategory\": \"CREDIT\",\n    \"reference\": \"INV-CLASSIC-000000001\",\n    \"accountCode\": \"651100000\",\n    \"accountCodeClientSide\": \"651100000\",\n    \"code\": \"RG_PLVT\",\n    \"otherCreditAndCharge\": {\n        \"operationDate\": \"2017-10-15\"\n    },\n    \"matchingStatus\": \"O\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/accountOperation",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"accountOperation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Undue payment 50",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd387268-6c23-434d-8d04-95e6d00c2d01",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"    pm.globals.set(\"undueRefundId\", jsonData.message);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customerAccount\": \"GDPR_{{index}}\",\n    \"description\": \"Undue payment\",\n    \"amount\": \"50\",\n    \"unMatchingAmount\": \"50\",\n    \"type\": \"OCC\",\n    \"transactionDate\": \"2007-09-30\",\n    \"transactionCategory\": \"CREDIT\",\n    \"reference\": \"NO_REF\",\n    \"code\": \"RG_CHQ\",\n    \"otherCreditAndCharge\": {\n        \"operationDate\": \"2007-09-30\"\n    },\n    \"matchingStatus\": \"O\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/accountOperation",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"accountOperation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Refund 50",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "963455ef-4693-486e-8ca5-e8defb5ff10a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"    pm.globals.set(\"unduePaymentId\", jsonData.message);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customerAccount\": \"GDPR_{{index}}\",\n    \"description\": \"Refund undue payment\",\n    \"amount\": \"50\",\n    \"unMatchingAmount\": \"50\",\n    \"type\": \"OCC\",\n    \"transactionDate\": \"2007-10-31\",\n    \"transactionCategory\": \"DEBIT\",\n    \"reference\": \"NO_REF\",\n    \"code\": \"RG_CHQ\",\n    \"otherCreditAndCharge\": {\n        \"operationDate\": \"2007-10-31\"\n    },\n    \"matchingStatus\": \"O\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/accountOperation",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"accountOperation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Match Undue payment and Refund",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36a5cfe0-620a-4881-ac8a-8ec85f3639cc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customerAccountCode\": \"GDPR_{{index}}\",\n    \"accountOperations\": {\n        \"accountOperation\": [\n            {\n                \"id\": {{unduePaymentId}}\n            },\n            {\n                \"id\": {{undueRefundId}}\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/accountOperation/matchOperations",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"accountOperation",
												"matchOperations"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Subscription",
							"item": [
								{
									"name": "Created sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a95f0ba-bfdf-4a2e-9e5b-e611fa553516",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_CREATED\",\n    \"description\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_CREATED\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\n    \"subscriptionDate\": \"2007-10-13\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Active sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "489af807-4ea2-40c4-9024-50216b5a5175",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_ACTIVE\",\n    \"description\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_ACTIVE\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\n    \"subscriptionDate\": \"2007-10-13\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate service",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f1e7c208-36a0-4835-957d-3b0a769d03ea",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_ACTIVE\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\",\n                \"subscriptionDate\": \"2007-10-13\",\n                \"quantity\": \"1\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Suspended sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d0fc5876-b44e-41e6-b868-ba1f45e67683",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_SUSPENDED\",\n    \"description\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_SUSPENDED\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\n    \"subscriptionDate\": \"2007-10-13\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create access to suspended sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8e39b3b-8161-4cbc-972c-50046c455f29",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_SUSPENDED_ACCESS\",\n    \"subscription\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_SUSPENDED\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/access",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"access"
											]
										}
									},
									"response": []
								},
								{
									"name": "Suspend sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "777c01ce-0232-4dda-9dac-76c61882ed14",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscriptionCode\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_SUSPENDED\",\n    \"actionDate\": \"2017-10-13\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/suspend",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"suspend"
											]
										}
									},
									"response": []
								},
								{
									"name": "Resiliated sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f250a680-4912-4c82-add8-c53d891357fb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_RESILIATED\",\n    \"description\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_RESILIATED\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\n    \"subscriptionDate\": \"2007-10-13\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate service - Resiliated",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b984c393-011a-4c7e-a922-9c2fb1738a78",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_RESILIATED\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\",\n                \"subscriptionDate\": \"2007-10-13\",\n                \"quantity\": \"1\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Resiliate sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02b22f5a-7bb0-49e1-9731-ed690fb3c6dd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscriptionCode\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_RESILIATED\",\n    \"terminationReason\": \"TERM_REASON_3\",\n    \"terminationDate\": \"2017-10-13\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Order",
							"item": [
								{
									"name": "Create old order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6966b375-3506-4380-be74-ad8a86591b5e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"{{entityPrefix}}_{{index}}_ORDER_OLD\",\n    \"orderDate\": \"2007-10-13T15:50:48+08:00\",\n    \"billingCycle\": \"CYC_INV_MT_3\",\n    \"orderItem\": [\n        {\n            \"id\": \"01\",\n            \"action\": \"add\",\n            \"billingAccount\": [\n                {\n                    \"id\": \"{{baseEntityPrefix}}_UA_3\"\n                }\n            ],\n            \"productOffering\": {\n                \"id\": \"{{baseEntityPrefix}}_OFFER3\"\n            },\n            \"product\": {\n                \"productCharacteristic\": [\n                    {\n                        \"name\": \"subscriptionCode\",\n                        \"value\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_ORDER_OLD\"\n                    },\n                    {\n                        \"name\": \"subscriptionDate\",\n                        \"value\": \"2007-10-13T15:10:18Z\"\n                    }\n                ],\n                \"productRelationship\": [\n                    {\n                        \"type\": \"bundled\",\n                        \"product\": {\n                            \"productCharacteristic\": [\n                                {\n                                    \"name\": \"serviceCode\",\n                                    \"value\": \"{{baseEntityPrefix}}_SERVICE3\"\n                                },\n                                {\n                                    \"name\": \"quantity\",\n                                    \"value\": \"1\"\n                                },\n                                {\n                                    \"name\": \"subscriptionDate\",\n                                    \"value\": \"2007-10-13T15:36:18+08:00\"\n                                },\n                                {\n                                    \"name\": \"{{baseEntityPrefix}}_SERVICE_CF_STRING\",\n                                    \"value\": \"Service CF value\"\n                                }\n                            ]\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/orderManagement/productOrder",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"orderManagement",
												"productOrder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "54e1f919-a98c-4e3b-afe1-b65631a509f9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(201);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"{{entityPrefix}}_{{index}}_ORDER_OLD\",\n    \"orderDate\": \"2018-10-13T15:50:48+08:00\",\n    \"billingCycle\": \"CYC_INV_MT_3\",\n    \"orderItem\": [\n        {\n            \"id\": \"01\",\n            \"action\": \"add\",\n            \"billingAccount\": [\n                {\n                    \"id\": \"{{baseEntityPrefix}}_UA_3\"\n                }\n            ],\n            \"productOffering\": {\n                \"id\": \"{{baseEntityPrefix}}_OFFER3\"\n            },\n            \"product\": {\n                \"productCharacteristic\": [\n                    {\n                        \"name\": \"subscriptionCode\",\n                        \"value\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_ORDER_NEW\"\n                    },\n                    {\n                        \"name\": \"subscriptionDate\",\n                        \"value\": \"2007-10-13T15:10:18Z\"\n                    }\n                ],\n                \"productRelationship\": [\n                    {\n                        \"type\": \"bundled\",\n                        \"product\": {\n                            \"productCharacteristic\": [\n                                {\n                                    \"name\": \"serviceCode\",\n                                    \"value\": \"{{baseEntityPrefix}}_SERVICE3\"\n                                },\n                                {\n                                    \"name\": \"quantity\",\n                                    \"value\": \"1\"\n                                },\n                                {\n                                    \"name\": \"subscriptionDate\",\n                                    \"value\": \"2018-10-13T15:36:18+08:00\"\n                                },\n                                {\n                                    \"name\": \"{{baseEntityPrefix}}_SERVICE_CF_STRING\",\n                                    \"value\": \"Service CF value\"\n                                }\n                            ]\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/orderManagement/productOrder",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"orderManagement",
												"productOrder"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Invoice",
							"item": [
								{
									"name": "Create BillingCycle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a93bf7c6-ac3c-4040-838b-6edf3f73eb1d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"CYC_INV_MT_GDPR_{{index}}\",\n    \"description\": \"Monthly Invoice Cycle GDPR_{{index}}\",\n    \"transactionDateDelay\": \"0\",\n    \"invoiceDateProductionDelay\": \"0\",\n    \"dueDateDelay\": \"2\",\n    \"invoiceDateDelay\": \"4\",\n    \"calendar\": \"MONTHLY\",\n    \"invoiceTypeCode\": \"COM\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create InvoiceType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b3f0484-9462-4057-b4b0-4eed3ea2cffc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_GDPR\",\n    \"description\": \"{{entityPrefix}}_{{index}}_GDPR\",\n    \"occTemplateCode\": \"INV_STD\",\n    \"occTemplateNegativeCode\": \"PAY_TIP\",\n    \"sequenceDto\": {\n        \"prefixEL\": \"Fact_\",\n        \"sequenceSize\": \"9\",\n        \"currentInvoiceNb\": \"5000\"\n    },\n    \"appliesTo\": [\n        \"COM\"\n    ],\n    \"useSelfSequence\": \"true\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "504da7b6-bee5-4903-98f6-0a44a2021b27",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_BA_GDPR\",\n    \"description\": \"{{entityPrefix}}_{{index}}_BA_GDPR\",\n    \"name\": {\n        \"title\": \"MR\",\n        \"firstName\": \"Edward\",\n        \"lastName\": \"Legaspi\"\n    },\n    \"address\": {\n        \"address1\": \"adress1\",\n        \"address2\": \"address2\",\n        \"address3\": \"adress3\",\n        \"zipCode\": \"21000\",\n        \"city\": \"Dijon\",\n        \"country\": \"France\"\n    },\n    \"customerAccount\": \"{{baseEntityPrefix}}_CA_3\",\n    \"billingCycle\": \"CYC_INV_MT_GDPR_{{index}}\",\n    \"country\": \"FR\",\n    \"language\": \"FRA\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7106be4-2398-4ade-835f-c5da10391b7a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_UA_GDPR\",\n    \"description\": \"{{entityPrefix}}_{{index}}_UA_GDPR\",\n    \"billingAccount\": \"{{entityPrefix}}_{{index}}_BA_GDPR\",\n    \"name\": {\n        \"title\": \"MR\",\n        \"firstName\": \"Edward\",\n        \"lastName\": \"Legaspi\"\n    },\n    \"address\": {\n        \"address1\": \"adress1\",\n        \"address3\": \"adress3\",\n        \"zipCode\": \"21000\",\n        \"city\": \"Dijon\",\n        \"country\": \"France\"\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Created sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a8000623-ae14-4e88-86ae-9e0b73f31e94",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_GDPR_SUB\",\n    \"description\": \"{{entityPrefix}}_{{index}}_GDPR_SUB\",\n    \"userAccount\": \"{{entityPrefix}}_{{index}}_UA_GDPR\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\n    \"subscriptionDate\": \"2018-08-13\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Apply one shot",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c3e39b72-e29b-4f42-9f99-282a0463ee3b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"oneShotCharge\": \"{{baseEntityPrefix}}_OS_OTHER\",\n    \"subscription\": \"{{entityPrefix}}_{{index}}_GDPR_SUB\",\n    \"operationDate\": \"2018-08-13\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/applyOneShotChargeInstance",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"applyOneShotChargeInstance"
											]
										}
									},
									"response": []
								},
								{
									"name": "Run RT",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2ac554b-9a2e-4cfe-93f3-9bfce56abcd4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"RT_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create BR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5b45b8e8-2589-45c5-99ce-3638ff4a9300",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"    pm.globals.set(\"billingRunId\", jsonData.message);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"billingCycleCode\": \"CYC_INV_MT_GDPR_{{index}}\",\n    \"billingRunTypeEnum\": \"AUTOMATIC\",\n    \"lastTransactionDate\": \"2018-08-31\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/invoicing/createBillingRun",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"invoicing",
												"createBillingRun"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invoicing Job",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "40ea7391-af3d-4d9f-aa4e-f761c2f069c9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"Inv_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate BR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44902418-03af-4348-a8b2-8d5f6b411a40",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:validateBillingRun\": { \"billingRunId\": \"1\" }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create invoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d4a461fa-452d-4f1a-ae13-d73402475b06",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"invoiceType\": \"{{entityPrefix}}_{{index}}_GDPR\",\n    \"billingAccountCode\": \"{{entityPrefix}}_{{index}}_BA_GDPR\",\n    \"dueDate\": \"2007-10-13\",\n    \"invoiceDate\": \"2007-10-13\",\n    \"invoiceMode\": \"AGGREGATED\",\n    \"categoryInvoiceAgregate\": [\n        {\n            \"categoryInvoiceCode\": \"SUBSCRIPTION\",\n            \"description\": \"SUBSCRIPTION\",\n            \"subCategoryInvoiceAgregateDto\": [\n                {\n                    \"description\": \"SUB_DATA\",\n                    \"invoiceSubCategoryCode\": \"SUB_DATA\",\n                    \"amountWithoutTax\": \"100\",\n                    \"amountTax\": \"20\",\n                    \"amountWithTax\": \"120\",\n                    \"ratedTransaction\": [\n                        {\n                            \"code\": \"WS_BASE_OS_OTHER\",\n                            \"unitAmountWithoutTax\": \"100\",\n                            \"amountWithoutTax\": \"100\",\n                            \"quantity\": \"1\",\n                            \"description\": \"API\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoice",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoice"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "GDPR",
							"item": [
								{
									"name": "Create GDPR Job",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23cd28df-2944-4754-9786-fb2b9a1355a3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"GDPR_Job\",\n    \"description\": \"GDPR_Job\",\n    \"jobTemplate\": \"GDPRJob\",\n    \"timerCode\": \"Monthly\",\n    \"jobCategory\": \"DWH\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Run GDPR Job",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73da1d2d-d2fe-47b1-b2ae-78ed4001f580",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"GDPR_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Remove base data",
					"item": [
						{
							"name": "Remove Administration",
							"item": [
								{
									"name": "find BarChart",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d451a49-847c-4d24-bd47-055d3e55a40d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.chartDto.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_BC1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/chart?chartCode={{baseEntityPrefix}}_BC1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"chart"
											],
											"query": [
												{
													"key": "chartCode",
													"value": "{{baseEntityPrefix}}_BC1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "find PieChart",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "992450c4-724d-4e71-aac8-fb88304f7064",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.chartDto.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_PC1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/chart?chartCode={{baseEntityPrefix}}_PC1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"chart"
											],
											"query": [
												{
													"key": "chartCode",
													"value": "{{baseEntityPrefix}}_PC1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "find LineChart",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "62d4dcb4-3796-4a88-9744-cdfca23d597c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.chartDto.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_LC1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/chart?chartCode={{baseEntityPrefix}}_LC1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"chart"
											],
											"query": [
												{
													"key": "chartCode",
													"value": "{{baseEntityPrefix}}_LC1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "find ScriptInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa43c282-af57-4a7c-8334-cc05e7436e41",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.scriptInstance.code).to.eql(\"org.meveo.service.script.\"+pm.collectionVariables.get(\"baseEntityPrefix\")+\"_Script\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance?scriptInstanceCode=org.meveo.service.script.{{baseEntityPrefix}}_Script",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance"
											],
											"query": [
												{
													"key": "scriptInstanceCode",
													"value": "org.meveo.service.script.{{baseEntityPrefix}}_Script"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "find Notification",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0252c850-8c0c-49e1-90fd-aa7e779cfa3b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.notificationDto.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_Notification1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification?notificationCode={{baseEntityPrefix}}_Notification1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification"
											],
											"query": [
												{
													"key": "notificationCode",
													"value": "{{baseEntityPrefix}}_Notification1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "find WebHookNotification",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f84141f-530e-4666-a44e-55e60c762291",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.webhookDto.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_WebHook1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/webhook?notificationCode={{baseEntityPrefix}}_WebHook1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"webhook"
											],
											"query": [
												{
													"key": "notificationCode",
													"value": "{{baseEntityPrefix}}_WebHook1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "find EmailNotifications",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a0c1afd3-56be-46e2-bc1a-bd60549becd9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.emailNotificationDto.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_EmailNotif1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findEmailNotification\": {\n        \"notificationCode\": \"{{baseEntityPrefix}}_EmailNotif1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/email?notificationCode={{baseEntityPrefix}}_EmailNotif1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"email"
											],
											"query": [
												{
													"key": "notificationCode",
													"value": "{{baseEntityPrefix}}_EmailNotif1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "find Timer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d74235af-0cd0-4e08-8c98-b8a3a02c766d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.timerEntity.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_Timer1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/timer?timerCode={{baseEntityPrefix}}_Timer1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"timer"
											],
											"query": [
												{
													"key": "timerCode",
													"value": "{{baseEntityPrefix}}_Timer1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "find JobInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc6edb53-8b3c-40b8-92be-6a6c60db8814",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.jobInstanceDto.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_ImpExp-Job1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findJobInstance\": {\n        \"jobInstanceCode\": \"{{baseEntityPrefix}}_ImpExp-Job1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance?jobInstanceCode={{baseEntityPrefix}}_ImpExp-Job1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance"
											],
											"query": [
												{
													"key": "jobInstanceCode",
													"value": "{{baseEntityPrefix}}_ImpExp-Job1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "remove BarChart",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e88e47d-f625-41af-b133-b9f5f4ac627f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/chart?chartCode={{baseEntityPrefix}}_BC1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"chart"
											],
											"query": [
												{
													"key": "chartCode",
													"value": "{{baseEntityPrefix}}_BC1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "remove PieChart",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2d0c329b-08ed-422a-bf1e-15a9f8dc05ea",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/chart?chartCode={{baseEntityPrefix}}_PC1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"chart"
											],
											"query": [
												{
													"key": "chartCode",
													"value": "{{baseEntityPrefix}}_PC1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "remove LineChart",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0963d98d-4c52-426d-9fea-84c899c5d785",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/chart?chartCode={{baseEntityPrefix}}_LC1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"chart"
											],
											"query": [
												{
													"key": "chartCode",
													"value": "{{baseEntityPrefix}}_LC1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "remove Notification",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6b52bf15-d6e6-48bb-b1bd-a4534b2c1447",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/{{baseEntityPrefix}}_Notification1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"{{baseEntityPrefix}}_Notification1"
											]
										}
									},
									"response": []
								},
								{
									"name": "remove WebHookNotification",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d54cc614-bd85-443a-a16d-3b0b5cf4ad1b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/webhook/{{baseEntityPrefix}}_WebHook1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"webhook",
												"{{baseEntityPrefix}}_WebHook1"
											]
										}
									},
									"response": []
								},
								{
									"name": "remove EmailNotifications",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b05031ee-a6dd-42d4-92f2-c495e0fd4606",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/email/{{baseEntityPrefix}}_EmailNotif1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"email",
												"{{baseEntityPrefix}}_EmailNotif1"
											]
										}
									},
									"response": []
								},
								{
									"name": "remove JobInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9c59cfb1-a1d3-4878-b837-2a2523b97a3c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/{{baseEntityPrefix}}_ImpExp-Job1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"{{baseEntityPrefix}}_ImpExp-Job1"
											]
										}
									},
									"response": []
								},
								{
									"name": "remove Timer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "30bc6cfe-e65a-4d8a-8a69-ac7aba5cd93b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:removeTimer\": {\n        \"timerCode\": \"{{baseEntityPrefix}}_Timer1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/timer/{{baseEntityPrefix}}_Timer1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"timer",
												"{{baseEntityPrefix}}_Timer1"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Remove Catalog",
							"item": [
								{
									"name": "findRecurringChargeTemplate",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3045b31b-c791-4928-ba4a-41d15a5901a2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.recurringChargeTemplate.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_REC1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate?recurringChargeTemplateCode={{baseEntityPrefix}}_REC1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate"
											],
											"query": [
												{
													"key": "recurringChargeTemplateCode",
													"value": "{{baseEntityPrefix}}_REC1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "find RecurringCHargeTemplate with Calendar",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8cb9fce-1aef-4dc7-8d6e-9431864ea00f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.recurringChargeTemplate.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_REC1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate?recurringChargeTemplateCode={{baseEntityPrefix}}_REC1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate"
											],
											"query": [
												{
													"key": "recurringChargeTemplateCode",
													"value": "{{baseEntityPrefix}}_REC1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "findOneShotChargeTemplate",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c408c51c-9312-433f-af43-809025853bfa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.oneShotChargeTemplate.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_OS1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate?oneShotChargeTemplateCode={{baseEntityPrefix}}_OS1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"oneShotChargeTemplate"
											],
											"query": [
												{
													"key": "oneShotChargeTemplateCode",
													"value": "{{baseEntityPrefix}}_OS1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "findUsageChargeTemplate",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b808fc27-54af-4efa-b292-7f2241524218",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.usageChargeTemplate.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_USAGE1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findOneShotChargeTemplate\": {\n        \"oneShotChargeTemplateCode\": \"{{baseEntityPrefix}}_OS1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/usageChargeTemplate?usageChargeTemplateCode={{baseEntityPrefix}}_USAGE1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"usageChargeTemplate"
											],
											"query": [
												{
													"key": "usageChargeTemplateCode",
													"value": "{{baseEntityPrefix}}_USAGE1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "findServiceTemplate",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f39d2093-3f10-4b4c-89e1-3597352f7ee5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceTemplate.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findServiceTemplate\": {\n        \"serviceTemplateCode\": \"{{baseEntityPrefix}}_SERVICE1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate?serviceTemplateCode={{baseEntityPrefix}}_SERVICE1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate"
											],
											"query": [
												{
													"key": "serviceTemplateCode",
													"value": "{{baseEntityPrefix}}_SERVICE1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "findOfferTemplate",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "df0a8848-6750-4db2-9215-bd071542d98b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.offerTemplate.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_OFFER1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{baseEntityPrefix}}_OFFER1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{baseEntityPrefix}}_OFFER1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "findPricePlanRec",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c9ba63d4-4f7e-4c7d-9f0a-5afdf2fdf7f4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pricePlan.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_REC1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan?pricePlanCode={{baseEntityPrefix}}_REC1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan"
											],
											"query": [
												{
													"key": "pricePlanCode",
													"value": "{{baseEntityPrefix}}_REC1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "findPricePlanOS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0752cc7a-e1a1-49f2-926f-dc63a3398aa9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pricePlan.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_OS1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findPricePlan\": {\n        \"pricePlanCode\": \"{{baseEntityPrefix}}_OS1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan?pricePlanCode={{baseEntityPrefix}}_OS1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan"
											],
											"query": [
												{
													"key": "pricePlanCode",
													"value": "{{baseEntityPrefix}}_OS1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "findPricePlanUC",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba0ead35-a4b9-4a22-a161-9a84243a5b4e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pricePlan.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_USAGE1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan?pricePlanCode={{baseEntityPrefix}}_USAGE1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan"
											],
											"query": [
												{
													"key": "pricePlanCode",
													"value": "{{baseEntityPrefix}}_USAGE1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "removeRecurringChargeTemplate 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6715c18-2ff4-4716-94a8-f1d5c9f2922f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/{{baseEntityPrefix}}_REC2",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"{{baseEntityPrefix}}_REC2"
											]
										}
									},
									"response": []
								},
								{
									"name": "removeOneShotChargeTemplate 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f2d36b92-3529-4e93-a974-48978893f36f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/{{baseEntityPrefix}}_OS2",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"oneShotChargeTemplate",
												"{{baseEntityPrefix}}_OS2"
											]
										}
									},
									"response": []
								},
								{
									"name": "removeUsageChargeTemplate 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2448fce3-f8f2-4b77-b8a4-4b3b570562d6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/usageChargeTemplate/{{baseEntityPrefix}}_USAGE2",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"usageChargeTemplate",
												"{{baseEntityPrefix}}_USAGE2"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Remove Customer accounts, subsription, access",
							"item": [
								{
									"name": "find Customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b410e65-afa8-4ff0-8dfa-62412678dff6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_CUST\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{baseEntityPrefix}}_CUST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{baseEntityPrefix}}_CUST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "find CustomerAccount",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7d451841-f277-4aba-8586-a555cbe55b42",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerAccount.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_CA\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{baseEntityPrefix}}_CA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{baseEntityPrefix}}_CA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "find BillingAccount",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b0d7569-c3d4-4e99-920c-7177baca1612",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingAccount.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_BA\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{baseEntityPrefix}}_BA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{baseEntityPrefix}}_BA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "find UserAccount",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "99082697-1179-4086-85d7-1bb0808d1c89",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.userAccount.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_UA\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findUserAccount\": {\n        \"userAccountCode\": \"{{baseEntityPrefix}}_UA\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{baseEntityPrefix}}_UA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{baseEntityPrefix}}_UA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "find Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d8b288c-30d2-4970-a8a5-fcbcf0b2c77d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_SUB\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{baseEntityPrefix}}_SUB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{baseEntityPrefix}}_SUB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "find Access",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0991766d-89db-4de6-8145-3a633cfdc25b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.accessDto.code).to.eql(pm.collectionVariables.get(\"baseEntityPrefix\")+\"_ACCP\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"accessCode\": \"{{baseEntityPrefix}}_ACCP\",\n    \"subscriptionCode\": \"{{baseEntityPrefix}}_SUB\",\n    \"startDate\": \"2016-06-01\",\n    \"endDate\": \"2016-06-30\"\n}\n{\n    \"accessCode\": \"{{baseEntityPrefix}}_ACCP\",\n    \"subscription\": \"{{baseEntityPrefix}}_SUB\",\n    \"startDate\": \"2016-06-01\",\n    \"endDate\": \"2016-06-30\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/access?accessCode={{baseEntityPrefix}}_ACCP&subscriptionCode={{baseEntityPrefix}}_SUB&startDate=2016-06-01&endDate=2016-06-30",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"access"
											],
											"query": [
												{
													"key": "accessCode",
													"value": "{{baseEntityPrefix}}_ACCP"
												},
												{
													"key": "subscriptionCode",
													"value": "{{baseEntityPrefix}}_SUB"
												},
												{
													"key": "startDate",
													"value": "2016-06-01"
												},
												{
													"key": "endDate",
													"value": "2016-06-30"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "remove Access",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "79bc05c9-3199-4a33-8e47-b143ede7d452",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:removeAccess\": {\n        \"accessCode\": \"{{baseEntityPrefix}}_ACCP\",\n        \"subscriptionCode\": \"{{baseEntityPrefix}}_SUB\",\n        \"startDate\": \"2016-06-01\",\n        \"endDate\": \"2016-06-30\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/access/{{baseEntityPrefix}}_ACCP/{{baseEntityPrefix}}_SUB/2016-06-01/2016-06-30",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"access",
												"{{baseEntityPrefix}}_ACCP",
												"{{baseEntityPrefix}}_SUB",
												"2016-06-01",
												"2016-06-30"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Remove Script BOM, BSM, BAM",
							"item": [],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Banking Calendar and Date status",
					"item": [
						{
							"name": "Create 2017 Banking Calendar",
							"item": [
								{
									"name": "Create 2017 Banking Calendar with All Vals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b790c3e-1d3d-4fd4-a93f-d8b555bdd648",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"FR_2017_BANKING_CALENDAR\",\n    \"description\": \"France Banking Calendar for 2017\",\n    \"calendarType\": \"BANKING\",\n    \"startDate\": \"2017-01-01\",\n    \"endDate\": \"2017-12-31\",\n    \"weekendBegin\": \"6\",\n    \"weekendEnd\": \"7\",\n    \"holidays\": [\n        {\n            \"holidayBegin\": \"101\",\n            \"holidayEnd\": \"101\"\n        },\n        {\n            \"holidayBegin\": \"414\",\n            \"holidayEnd\": \"414\"\n        },\n        {\n            \"holidayBegin\": \"417\",\n            \"holidayEnd\": \"417\"\n        },\n        {\n            \"holidayBegin\": \"501\",\n            \"holidayEnd\": \"501\"\n        },\n        {\n            \"holidayBegin\": \"1225\",\n            \"holidayEnd\": \"1226\"\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Date status",
							"item": [
								{
									"name": "Saturday Date Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ab5ff0a-bb39-4bbb-9053-a259193920d2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.bankingDateStatus.date).to.contains(\"2017-01-07T\");",
													"    pm.expect(jsonData.bankingDateStatus.isWorkingDate).to.eql(false);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/bankingDateStatus?date=2017-01-07",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"bankingDateStatus"
											],
											"query": [
												{
													"key": "date",
													"value": "2017-01-07"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Sunday Date Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3d41e67-eb22-45c6-8760-4902d6cf2e04",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.bankingDateStatus.date).to.contains(\"2017-01-08T\");",
													"    pm.expect(jsonData.bankingDateStatus.isWorkingDate).to.eql(false);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/bankingDateStatus?date=2017-01-08",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"bankingDateStatus"
											],
											"query": [
												{
													"key": "date",
													"value": "2017-01-08"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Monday Date Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96d6d5f6-1494-4e06-a834-5bbd88aba620",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.bankingDateStatus.date).to.contains(\"2017-01-09T\");",
													"    pm.expect(jsonData.bankingDateStatus.isWorkingDate).to.eql(true);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/bankingDateStatus?date=2017-01-09",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"bankingDateStatus"
											],
											"query": [
												{
													"key": "date",
													"value": "2017-01-09"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "New Year's Day Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "814c7cce-f96a-4df0-85c3-534830d0ccb1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.bankingDateStatus.date).to.contains(\"2017-01-01T\");",
													"    pm.expect(jsonData.bankingDateStatus.isWorkingDate).to.eql(false);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/bankingDateStatus?date=2017-01-01",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"bankingDateStatus"
											],
											"query": [
												{
													"key": "date",
													"value": "2017-01-01"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Labor Day Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0d416e89-735a-4447-8e7d-186626035a3f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.bankingDateStatus.date).to.contains(\"2017-05-01T\");",
													"    pm.expect(jsonData.bankingDateStatus.isWorkingDate).to.eql(false);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/bankingDateStatus?date=2017-05-01",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"bankingDateStatus"
											],
											"query": [
												{
													"key": "date",
													"value": "2017-05-01"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Simple Working Date Status",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "df636938-f429-444e-8381-1c831131e85f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.bankingDateStatus.date).to.contains(\"2017-02-14T\");",
													"    pm.expect(jsonData.bankingDateStatus.isWorkingDate).to.eql(true);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:getBankingDateStatus\": { \"date\": \"2017-02-14\" }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/bankingDateStatus?date=2017-02-14",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"bankingDateStatus"
											],
											"query": [
												{
													"key": "date",
													"value": "2017-02-14"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "# FullCRUD\r\n\r\nHere are migrated scenarios from Soap FullCRUD.\r\n\r\n## Table\r\n\r\n| Scenarios                        | State       |\r\n|----------------------------------|-------------|\r\n| Setup base data                  | OK          |\r\n| Service workflow                 | OK          |\r\n| Subscription workflow            | OK          |\r\n| Subscription with Inherited CF   | OK          |\r\n| EL expression tests              | OK          |\r\n| Custom Fields in Filters         | todo        |\r\n| Entity Customization             | OK          |\r\n| Entity Security                  | OK          |\r\n| Workflow executions              | OK          |\r\n| Filter search and invoicing      | todo        |\r\n| Inbound Request Tests            | todo        |\r\n| Jobs                             | todo        |\r\n| Reporting                        | todo        |\r\n| GDPR Erasure                     | todo        |\r\n| Remove base data                 | todo        |\r\n| Banking Calendar and Date status | todo        |",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "a33ceaf3-d758-4654-a23c-dd00e9a077cd",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "91ffe078-3466-4ca4-8e51-f31600acb9f2",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Ticket",
			"item": [
				{
					"name": "#5284 - [WF] A workflow is applied to CE not related to it",
					"item": [
						{
							"name": "Setup",
							"item": [
								{
									"name": "Settings",
									"item": [
										{
											"name": "Provider/Seller/Account",
											"item": [
												{
													"name": "Update Provider",
													"request": {
														"method": "POST",
														"header": [
															{
																"value": "application/json",
																"key": "Content-Type"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\n    \"code\": \"{{provider.code}}\",\n    \"description\": \"{{template.label}}\",\n    \"enterprise\": \"true\",\n    \"rounding\": 6,\n    \"roundingMode\": \"NEAREST\",\n    \"invoiceRounding\": 2,\n    \"invoiceRoundingMode\": \"NEAREST\",\n    \"invoiceConfiguration\": {\n        \"displaySubscriptions\": \"true\",\n        \"displayServices\": \"true\",\n        \"displayOffers\": \"true\",\n        \"displayEdrs\": \"true\",\n        \"displayProvider\": \"true\",\n        \"displayCfAsXML\": \"true\",\n        \"displayPricePlans\": \"true\",\n        \"displayDetail\": \"true\",\n        \"displayChargesPeriods\": \"true\",\n        \"displayFreeTransacInInvoice\": \"true\",\n        \"displayBillingCycle\": \"true\",\n        \"displayOrders\": \"true\"\n    }\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{opencell.url}}/provider/createOrUpdate",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"provider",
																"createOrUpdate"
															]
														}
													},
													"response": []
												},
												{
													"name": "CF_PROV_PROJECT_VERSION",
													"event": [
														{
															"script": {
																"type": "text/javascript",
																"id": "b4c67cbc-0e14-484a-9cf8-aa7af55c62da",
																"exec": [
																	""
																]
															},
															"listen": "prerequest"
														}
													],
													"request": {
														"method": "POST",
														"header": [
															{
																"value": "application/json",
																"key": "Content-Type"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"code\": \"{{request.label}}_{{$timestamp}}\",\r\n    \"description\": \"{{project.code}} {{project.type}} {{project.version}}\",\r\n    \"fieldType\": \"STRING\",\r\n    \"appliesTo\": \"Provider\",\r\n    \"defaultValue\": \"{{timestamp.iso}}\",\r\n    \"storageType\": \"SINGLE\",\r\n    \"valueRequired\": false,\r\n    \"versionable\": false,\r\n    \"allowEdit\": false,\r\n    \"hideOnNew\": false,\r\n    \"cacheValue\": false,\r\n    \"guiPosition\": \"tab:Project versions:999\"\r\n}\r\n",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{opencell.url}}/customFieldTemplate/createOrUpdate",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"customFieldTemplate",
																"createOrUpdate"
															]
														}
													},
													"response": []
												},
												{
													"name": "S|MAIN_SELLER|Opencell",
													"request": {
														"method": "POST",
														"header": [
															{
																"value": "application/json",
																"key": "Content-Type"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n\t\"code\" : \"{{request.label.1}}\",\r\n\t\"description\" : \"{{request.label.2}}\",\r\n    \"currencyCode\": \"EUR\",\r\n    \"countryCode\": \"FR\",\r\n    \"languageCode\": \"ENG\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": \"Esc. A\",\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": null\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"billing@opencellsoft.com\",\r\n        \"phone\": \"0123456789\",\r\n        \"mobile\": \"0678912345\",\r\n        \"fax\": null\r\n    }\r\n}",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{opencell.url}}/seller/createOrUpdate",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"seller",
																"createOrUpdate"
															]
														}
													},
													"response": []
												}
											],
											"event": [
												{
													"script": {
														"type": "text/javascript",
														"id": "44cbbf38-992f-4638-8e5c-f66934e2af46",
														"exec": [
															""
														]
													},
													"listen": "prerequest"
												},
												{
													"script": {
														"type": "text/javascript",
														"id": "8071ed84-b063-4c55-ae1f-e47d4aeef364",
														"exec": [
															""
														]
													},
													"listen": "test"
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Taxes",
											"item": [
												{
													"name": "Tax rates",
													"item": [
														{
															"name": "tax|code=TAX_20|desc=VAT 20%|percentage=20|accCode=445710000",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"type": "text/javascript",
																		"id": "c550c470-bd39-4d19-b61e-005343d4fb53",
																		"exec": [
																			""
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"code\": \"{{code}}\",\n  \"description\": \"{{desc}}\",\n  \"percent\": \"{{percentage}}\",\n  \"accountingCode\": \"{{accCode}}\",\n  \"languageDescriptions\": [\n  {\n    \"languageCode\": \"FRA\",\n    \"description\": \"{{desc}}\"\n  }\n  ]\n}",
																	"options": {
																		"raw": {}
																	}
																},
																"url": {
																	"raw": "{{opencell.url}}/tax/createOrUpdate",
																	"host": [
																		"{{opencell.url}}"
																	],
																	"path": [
																		"tax",
																		"createOrUpdate"
																	]
																}
															},
															"response": []
														},
														{
															"name": "tax|code=TAX_10|desc=VAT 10%|percentage=10|accCode=445710000",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"type": "text/javascript",
																		"id": "13ef5477-1291-4959-b6a3-c6caf9919080",
																		"exec": [
																			""
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"code\": \"{{code}}\",\n  \"description\": \"{{desc}}\",\n  \"percent\": \"{{percentage}}\",\n  \"accountingCode\": \"{{accCode}}\",\n  \"languageDescriptions\": [\n  {\n    \"languageCode\": \"FRA\",\n    \"description\": \"{{desc}}\"\n  }\n  ]\n}",
																	"options": {
																		"raw": {}
																	}
																},
																"url": {
																	"raw": "{{opencell.url}}/tax/createOrUpdate",
																	"host": [
																		"{{opencell.url}}"
																	],
																	"path": [
																		"tax",
																		"createOrUpdate"
																	]
																},
																"description": "Taux à 16% pour la Polynésie Française (taux nominal)"
															},
															"response": []
														},
														{
															"name": "tax|code=NO_TAX|desc=No tax|percentage=0|accCode=445710000",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"type": "text/javascript",
																		"id": "86cc823b-4d66-48d6-bc04-a8a334b22a88",
																		"exec": [
																			""
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n  \"code\": \"{{code}}\",\n  \"description\": \"{{desc}}\",\n  \"percent\": \"{{percentage}}\",\n  \"accountingCode\": \"{{accCode}}\",\n  \"languageDescriptions\": [\n  {\n    \"languageCode\": \"FRA\",\n    \"description\": \"{{desc}}\"\n  }\n  ]\n}",
																	"options": {
																		"raw": {}
																	}
																},
																"url": {
																	"raw": "{{opencell.url}}/tax/createOrUpdate",
																	"host": [
																		"{{opencell.url}}"
																	],
																	"path": [
																		"tax",
																		"createOrUpdate"
																	]
																},
																"description": "Permettra d'identifier qu'il faut enlever les lignes de taxe (différent d'une ligne avec Taxe à 0)"
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Tax categories (account)",
													"item": [
														{
															"name": "taxCat|code=STANDARD|desc=Standard accounts",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"type": "text/javascript",
																		"id": "db0694f6-ad85-4640-bafa-21783ab4aad2",
																		"exec": [
																			""
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"descriptionI18n\": [\n        {\n            \"languageCode\": \"FRA\",\n            \"description\": \"{{desc}}\"\n        }\n    ]\n}",
																	"options": {
																		"raw": {}
																	}
																},
																"url": {
																	"raw": "{{opencell.url}}/taxCategory/createOrUpdate",
																	"host": [
																		"{{opencell.url}}"
																	],
																	"path": [
																		"taxCategory",
																		"createOrUpdate"
																	]
																}
															},
															"response": []
														},
														{
															"name": "taxCat|code=NO_TAX|desc=Exempted accounts",
															"event": [
																{
																	"listen": "prerequest",
																	"script": {
																		"type": "text/javascript",
																		"id": "7972183a-1205-48da-8ab3-9e08de1b6c80",
																		"exec": [
																			""
																		]
																	}
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"key": "Content-Type",
																		"value": "application/json"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"descriptionI18n\": [\n        {\n            \"languageCode\": \"FRA\",\n            \"description\": \"{{desc}}\"\n        }\n    ]\n}",
																	"options": {
																		"raw": {}
																	}
																},
																"url": {
																	"raw": "{{opencell.url}}/taxCategory/createOrUpdate",
																	"host": [
																		"{{opencell.url}}"
																	],
																	"path": [
																		"taxCategory",
																		"createOrUpdate"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Tax classes (charge)",
													"item": [
														{
															"name": "taxClass|code=REGULAR|desc=Regular products",
															"event": [
																{
																	"script": {
																		"type": "text/javascript",
																		"id": "f2028b22-a131-44f7-8bfa-affc817c46c2",
																		"exec": [
																			""
																		]
																	},
																	"listen": "prerequest"
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"value": "application/json",
																		"key": "Content-Type"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"descriptionI18n\": [\n        {\n            \"languageCode\": \"FRA\",\n            \"description\": \"{{desc}}\"\n        }\n    ]\n}",
																	"options": {
																		"raw": {}
																	}
																},
																"url": {
																	"raw": "{{opencell.url}}/taxClass/createOrUpdate",
																	"host": [
																		"{{opencell.url}}"
																	],
																	"path": [
																		"taxClass",
																		"createOrUpdate"
																	]
																}
															},
															"response": []
														},
														{
															"name": "taxClass|code=REDUCED|desc=Products with reduced tax",
															"event": [
																{
																	"script": {
																		"type": "text/javascript",
																		"id": "5728c018-fd67-4448-8763-8d484311ac85",
																		"exec": [
																			""
																		]
																	},
																	"listen": "prerequest"
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"value": "application/json",
																		"key": "Content-Type"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"descriptionI18n\": [\n        {\n            \"languageCode\": \"FRA\",\n            \"description\": \"{{desc}}\"\n        }\n    ]\n}",
																	"options": {
																		"raw": {}
																	}
																},
																"url": {
																	"raw": "{{opencell.url}}/taxClass/createOrUpdate",
																	"host": [
																		"{{opencell.url}}"
																	],
																	"path": [
																		"taxClass",
																		"createOrUpdate"
																	]
																}
															},
															"response": []
														},
														{
															"name": "taxClass|code=NO_TAX|desc=Products with no VAT",
															"event": [
																{
																	"script": {
																		"type": "text/javascript",
																		"id": "e1c2f30a-a553-4f9e-92ba-1add781de9f8",
																		"exec": [
																			""
																		]
																	},
																	"listen": "prerequest"
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"value": "application/json",
																		"key": "Content-Type"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"descriptionI18n\": [\n        {\n            \"languageCode\": \"FRA\",\n            \"description\": \"{{desc}}\"\n        }\n    ]\n}",
																	"options": {
																		"raw": {}
																	}
																},
																"url": {
																	"raw": "{{opencell.url}}/taxClass/createOrUpdate",
																	"host": [
																		"{{opencell.url}}"
																	],
																	"path": [
																		"taxClass",
																		"createOrUpdate"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												},
												{
													"name": "Tax mapping",
													"item": [
														{
															"name": "taxMapping|priority=100|taxCat=NO_TAX|taxClass=|buyer=|tax=NO_TAX",
															"event": [
																{
																	"script": {
																		"type": "text/javascript",
																		"id": "8cedafae-eb4a-4c45-8ea5-8f34c74dd503",
																		"exec": [
																			""
																		]
																	},
																	"listen": "prerequest"
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"value": "application/json",
																		"key": "Content-Type"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"accountTaxCategoryCode\": \"{{taxCat}}\",\n    \"chargeTaxClassCode\": \"{{taxClass}}\",\n    \"buyerCountryCode\": \"{{buyer}}\",\n    \"taxCode\": \"{{tax}}\",\n    \"priority\": {{priority}}\n}",
																	"options": {
																		"raw": {}
																	}
																},
																"url": {
																	"raw": "{{opencell.url}}/taxMapping",
																	"host": [
																		"{{opencell.url}}"
																	],
																	"path": [
																		"taxMapping"
																	]
																}
															},
															"response": []
														},
														{
															"name": "taxMapping|priority=20|taxCat=STANDARD|taxClass=NO_TAX|buyer=|tax=NO_TAX",
															"event": [
																{
																	"script": {
																		"type": "text/javascript",
																		"id": "836119c2-608a-46fd-b836-dd53076ee251",
																		"exec": [
																			""
																		]
																	},
																	"listen": "prerequest"
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"value": "application/json",
																		"key": "Content-Type"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"accountTaxCategoryCode\": \"{{taxCat}}\",\n    \"chargeTaxClassCode\": \"{{taxClass}}\",\n    \"buyerCountryCode\": \"{{buyer}}\",\n    \"taxCode\": \"{{tax}}\",\n    \"priority\": {{priority}}\n}",
																	"options": {
																		"raw": {}
																	}
																},
																"url": {
																	"raw": "{{opencell.url}}/taxMapping",
																	"host": [
																		"{{opencell.url}}"
																	],
																	"path": [
																		"taxMapping"
																	]
																}
															},
															"response": []
														},
														{
															"name": "taxMapping|priority=1|taxCat=STANDARD|taxClass=REGULAR|buyer=|tax=TAX_20",
															"event": [
																{
																	"script": {
																		"type": "text/javascript",
																		"id": "426bc0b5-9e1b-4137-ba8e-c0ad7c20628e",
																		"exec": [
																			""
																		]
																	},
																	"listen": "prerequest"
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"value": "application/json",
																		"key": "Content-Type"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"accountTaxCategoryCode\": \"{{taxCat}}\",\n    \"chargeTaxClassCode\": \"{{taxClass}}\",\n    \"buyerCountryCode\": \"{{buyer}}\",\n    \"taxCode\": \"{{tax}}\",\n    \"priority\": {{priority}}\n}",
																	"options": {
																		"raw": {}
																	}
																},
																"url": {
																	"raw": "{{opencell.url}}/taxMapping",
																	"host": [
																		"{{opencell.url}}"
																	],
																	"path": [
																		"taxMapping"
																	]
																}
															},
															"response": []
														},
														{
															"name": "taxMapping|priority=2|taxCat=STANDARD|taxClass=REDUCED|buyer=|tax=TAX_10",
															"event": [
																{
																	"script": {
																		"type": "text/javascript",
																		"id": "c44cc145-38aa-4bd2-9eb6-27e04f921c5c",
																		"exec": [
																			""
																		]
																	},
																	"listen": "prerequest"
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"value": "application/json",
																		"key": "Content-Type"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"accountTaxCategoryCode\": \"{{taxCat}}\",\n    \"chargeTaxClassCode\": \"{{taxClass}}\",\n    \"buyerCountryCode\": \"{{buyer}}\",\n    \"taxCode\": \"{{tax}}\",\n    \"priority\": {{priority}}\n}",
																	"options": {
																		"raw": {}
																	}
																},
																"url": {
																	"raw": "{{opencell.url}}/taxMapping",
																	"host": [
																		"{{opencell.url}}"
																	],
																	"path": [
																		"taxMapping"
																	]
																}
															},
															"response": []
														},
														{
															"name": "taxMapping|priority=10|taxCat=STANDARD|taxClass=REGULAR|buyer=US|tax=TAX_10",
															"event": [
																{
																	"script": {
																		"type": "text/javascript",
																		"id": "168c16a6-44b6-41e0-8298-e5816572cd1a",
																		"exec": [
																			""
																		]
																	},
																	"listen": "prerequest"
																}
															],
															"request": {
																"method": "POST",
																"header": [
																	{
																		"value": "application/json",
																		"key": "Content-Type"
																	}
																],
																"body": {
																	"mode": "raw",
																	"raw": "{\n    \"accountTaxCategoryCode\": \"{{taxCat}}\",\n    \"chargeTaxClassCode\": \"{{taxClass}}\",\n    \"buyerCountryCode\": \"{{buyer}}\",\n    \"taxCode\": \"{{tax}}\",\n    \"priority\": {{priority}}\n}",
																	"options": {
																		"raw": {}
																	}
																},
																"url": {
																	"raw": "{{opencell.url}}/taxMapping",
																	"host": [
																		"{{opencell.url}}"
																	],
																	"path": [
																		"taxMapping"
																	]
																}
															},
															"response": []
														}
													],
													"protocolProfileBehavior": {},
													"_postman_isSubFolder": true
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										},
										{
											"name": "Account",
											"item": [
												{
													"name": "custCat|code=CLIENT|taxCat=STANDARD",
													"request": {
														"method": "POST",
														"header": [
															{
																"value": "application/json",
																"key": "Content-Type"
															}
														],
														"body": {
															"mode": "raw",
															"raw": "{\r\n    \"code\": \"{{code}}\",\r\n    \"description\": \"Client\",\r\n    \"taxCategoryCode\": \"STANDARD\"\r\n}\r\n",
															"options": {
																"raw": {}
															}
														},
														"url": {
															"raw": "{{opencell.url}}/account/customer/createOrUpdateCategory",
															"host": [
																"{{opencell.url}}"
															],
															"path": [
																"account",
																"customer",
																"createOrUpdateCategory"
															]
														}
													},
													"response": []
												}
											],
											"protocolProfileBehavior": {},
											"_postman_isSubFolder": true
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "Catalog",
									"item": [
										{
											"name": "script|rating.LogWalletOperation|Logs the WalletOperation",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7e887f56-bb78-45a6-9826-ebad52cf8d5e",
														"exec": [
															"if( pm.response.code == 200 ) { tests[\"is.compiled\"] = JSON.parse(responseBody).compilationErrors.length === 0; }"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"value": "application/xml",
														"type": "text",
														"name": "Content-Type",
														"key": "Content-Type"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "<ScriptInstance>\r\n        <code>org.meveo.service.script.{{request.label.1}}</code>\r\n        <description>{{request.label.2}} {{$timestamp}}</description>\r\n        <type>JAVA</type>\r\n        <script><![CDATA[\r\npackage org.meveo.service.script.rating;\r\n\r\nimport org.meveo.service.script.Script;\r\n\r\nimport java.math.BigDecimal;\r\nimport java.util.Map;\r\n\r\nimport org.slf4j.Logger;\r\nimport org.slf4j.LoggerFactory;\r\n\r\nimport org.meveo.admin.exception.BusinessException;\r\nimport org.meveo.api.dto.billing.WalletOperationDto;\r\nimport org.meveo.model.billing.WalletOperation;\r\nimport org.meveo.model.billing.Tax;\r\n\r\nimport org.meveo.service.catalog.impl.TaxService;\r\nimport org.meveo.service.billing.impl.RatingService;\r\n\r\n/**\r\n * Logs the WalletOperation\r\n * @author schambrin\r\n */\r\npublic class LogWalletOperation extends org.meveo.service.script.Script {\r\n\r\n    private static final Logger log = LoggerFactory.getLogger(LogWalletOperation.class);\r\n\r\n    public void execute(Map<String, Object> context) throws BusinessException {\r\n        context.entrySet().stream().forEach(entry->{ log.info(\"{}={}\",entry.getKey(),entry.getValue()); });\r\n        TaxService taxService = (TaxService)getServiceInterface(\"TaxService\");\r\n        RatingService ratingService = (RatingService)getServiceInterface(\"RatingService\");\r\n        WalletOperation wo = (WalletOperation) context.get(Script.CONTEXT_ENTITY);\r\n\r\n        try {\r\n        \tlog.info(\"wo={}\",new WalletOperationDto(wo));\r\n        \tlog.info(\"wo.tax={}\", wo.getTax());\r\n\r\n        } catch(Exception e) {\r\n            log.error(\"Exception:\", e);\r\n            throw new BusinessException(e.getMessage());\r\n        }\r\n    }\r\n}\r\n]]></script>\r\n</ScriptInstance>",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"scriptInstance",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "counter|code=CN_USG_ACCUM_C|type=USAGE|target=CUST|calendar=MONTHLY|desc=Accumulates quantities on the Customer",
											"request": {
												"method": "POST",
												"header": [
													{
														"value": "application/json",
														"key": "Content-Type"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"disabled\": false,\n    \"calendar\": \"{{calendar}}\",\n    \"type\": \"{{type}}\",\n    \"ceiling\": 0,\n    \"counterLevel\": \"{{target}}\",\n    \"ceilingExpressionEl\": null,\n    \"accumulator\": true\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/counterTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"counterTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "counter|CN_USG_COUNTER|Counter",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n  \"code\" : \"{{request.label.1}}\",\r\n  \"description\" : \"{{request.label.2}}\",\r\n  \"calendar\": \"MONTHLY\",\r\n  \"unity\": null,\r\n  \"type\": \"USAGE\",\r\n  \"ceiling\": 100,\r\n  \"disabled\": false,\r\n  \"counterLevel\": \"SI\",\r\n  \"ceilingExpressionEl\": null\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/counterTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"counterTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "charge|CH_USG_UNIT|Charge unit",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{request.label.1}}\",\n    \"description\": \"{{request.label.2}}\",\n    \"invoiceSubCategory\": \"CMP_DATA\",\n    \"taxClassCode\": \"REDUCED\",\n    \"disabled\": false,\n    \"amountEditable\": true,\n    \"inputUnitDescription\": \"unit\",\n    \"ratingUnitDescription\": \"unit\",\n    \"unitMultiplicator\": 1,\n    \"unitNbDecimal\": 6,\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"filterParam1\": \"UNIT\",\n    \"priority\": 10,\n    \"triggerNextCharge\": false\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"usageChargeTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "pp|code=PP_USG_UNIT|charge=CH_USG_UNIT",
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"eventCode\": \"{{charge}}\",\n    \"amountWithoutTax\": 1,\n    \"amountWithTax\": 1,\n    \"amountWithoutTaxEL\": null,\n    \"woDescriptionEL\": null,\n    \"scriptInstance\": \"org.meveo.service.script.rating.LogWalletOperation\"\n}\n",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"pricePlan",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "se|code=SE_USG_UNIT|desc=Unit usage service",
											"event": [
												{
													"script": {
														"id": "680effb4-47fd-4f64-a0bc-1cfa3afdb46d",
														"exec": [
															""
														],
														"type": "text/javascript"
													},
													"listen": "prerequest"
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"value": "application/json",
														"key": "Content-Type"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{desc}}\",\n    \"customFields\": {\n        \"customField\": []\n    },\n    \"imageBase64\": null,\n    \"imagePath\": null,\n    \"invoicingCalendar\": null,\n    \"longDescription\": null,\n    \"mandatory\": true,\n    \"serviceChargeTemplateUsages\": {\n        \"serviceChargeTemplateUsage\": [\n            {\n                \"code\": \"CH_USG_UNIT\",\n                \"wallets\": null,\n                \"counterTemplate\": null,\n                \"accumulatorCounterTemplates\": {\n                \t\"counterTemplate\": [\n                \t\t\"CN_USG_ACCUM_C\"\n                \t]\n                }\n            }\n        ]\n    },\n    \"serviceChargeTemplateRecurrings\": null,\n    \"serviceChargeTemplateSubscriptions\": null,\n    \"serviceChargeTemplateTerminations\": null,\n    \"somCode\": null\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"serviceTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "of|code=OF",
											"request": {
												"method": "POST",
												"header": [
													{
														"value": "application/json",
														"key": "Content-Type"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"code\": \"{{code}}\",\n    \"description\": \"{{template.label}} offer {{$timestamp}}\",\n    \"disabled\": false,\n    \"lifeCycleStatus\": \"ACTIVE\",\n    \"bomCode\": null,\n    \"offerTemplateCategoryCode\": null,\n    \"offerServiceTemplate\": [\n        {\n            \"serviceTemplate\": {\n                \"code\": \"SE_USG_UNIT\",\n                \"customFields\": null\n            },\n            \"mandatory\": false,\n            \"incompatibleServiceTemplate\": []\n        }\n    ],\n    \"customFields\": null\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"catalog",
														"offerTemplate",
														"createOrUpdate"
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Account",
							"item": [
								{
									"name": "C|Jean|Bonnot",
									"event": [
										{
											"script": {
												"id": "aabf11b9-9a99-4295-bfb4-0df0470dcbd3",
												"exec": [
													"var parts = pm.variables.get(\"request.label\").split(\"|\");",
													"var index = pm.globals.get(\"index\");",
													"",
													"if (typeof index === 'undefined') {",
													"    console.log(\"index global variable is undefined -> setting to \\\"00\\\"\");",
													"    pm.globals.set(\"index\", \"00\");",
													"    index = \"00\";",
													"}",
													"",
													"var prefix = pm.variables.get(\"template.code\") + \"-\";",
													"var suffix = \" \" + prefix + index;",
													"",
													"switch (parts.length) {",
													"    case 1:",
													"        pm.globals.set(\"account.code\", prefix + parts[0] + index);",
													"        pm.globals.set(\"account.description\", parts[0] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 2:",
													"        pm.globals.set(\"account.code\", prefix + parts[0] + index);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", \"\");",
													"        pm.globals.set(\"account.lastname\", \"\");",
													"        break;",
													"    case 3:",
													"        pm.globals.set(\"account.code\", prefix + parts[0] + index);",
													"        pm.globals.set(\"account.description\", parts[1] + \" \" + parts[2] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[1]);",
													"        pm.globals.set(\"account.lastname\", parts[2]);",
													"        break;",
													"    case 4:",
													"        pm.globals.set(\"account.code\", prefix + parts[0] + index);",
													"        pm.globals.set(\"account.description\", parts[1] + suffix);",
													"        pm.globals.set(\"account.firstname\", parts[2]);",
													"        pm.globals.set(\"account.lastname\", parts[3]);",
													"        break;",
													"}",
													"",
													""
												],
												"type": "text/javascript"
											},
											"listen": "prerequest"
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"value": "application/json",
												"key": "Content-Type"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"crmAccountType\" : \"C_UA\",\r\n  \"crmParentCode\" : \"{{seller.code}}\",\r\n  \"code\" : \"{{account.code}}\",\r\n  \"description\": \"{{account.description}}\",\r\n  \"name\" : {\r\n    \"title\" : \"MR\",\r\n    \"firstName\" : \"{{account.firstname}}\",\r\n    \"lastName\" : \"{{account.lastname}}\"\r\n  },\r\n  \"subscriptionDate\": \"2018-01-10\",\r\n  \"jobTitle\": \"Ruler of the known Universe\",\r\n  \"vatNo\": \"FR12345678901234\",\r\n  \"registrationNo\": \"12354678901234\",\r\n  \"address\" : {\r\n    \"address1\" : \"3 rue passante\",\r\n    \"address2\" : \"Bâtiment A\",\r\n    \"address3\" : \"Bureau D42\",\r\n    \"zipCode\" : \"99999\",\r\n    \"city\" : \"METROVILLE\",\r\n    \"country\" : \"FR\"\r\n  },\r\n  \"contactInformation\" : {\r\n    \"email\" : \"stephane.chambrin@opencellsoft.com\",\r\n    \"mobile\" : \"+33123546789\",\r\n    \"phone\":\"+33123546789\"\r\n  },\r\n  \"email\" : \"stephane.chambrin@opencellsoft.com\",\r\n  \"language\" : \"FRA\",\r\n  \"paymentMethod\" : \"CHECK\",\r\n  \"customerCategory\" : \"CLIENT\",\r\n  \"currency\" : \"EUR\",\r\n  \"billingCycle\" : \"CYC_INV_MT_1\",\r\n  \"country\" : \"FR\",\r\n  \"electronicBilling\" : \"true\",\r\n  \"customFields\": null\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "workflow",
							"item": [
								{
									"name": "CE",
									"item": [
										{
											"name": "CE CE_TEST_1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "755d9c71-1e37-4b19-bb7e-0e1757d0d46b",
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n     \"code\": \"CE_TEST_1\",\r\n        \"description\": \"Entité personnalisé TEST\",\r\n        \"disabled\": false,\r\n        \"name\": \" TEST_1\",\r\n        \"field\": [\r\n            {\r\n                \"code\": \"test1\",\r\n                \"description\": \"Description\",\r\n                \"disabled\": false,\r\n                \"fieldType\": \"STRING\",\r\n                \"useInheritedAsDefaultValue\": false,\r\n                \"storageType\": \"SINGLE\",\r\n                \"valueRequired\": false,\r\n                \"uniqueConstraint\": false,\r\n                \"versionable\": false,\r\n                \"triggerEndPeriodEvent\": false,\r\n                \"allowEdit\": true,\r\n                \"hideOnNew\": false,\r\n                \"maxValue\": 100,\r\n                \"indexType\": \"STORE_ONLY\"\r\n            },\r\n\t\t\t {\r\n              \r\n                \"code\": \"test2\",\r\n                \"description\": \"Destinataire\",\r\n                \"disabled\": false,\r\n                \"fieldType\": \"STRING\",\r\n                \"useInheritedAsDefaultValue\": false,\r\n                \"storageType\": \"SINGLE\",\r\n                \"valueRequired\": true,\r\n                \"uniqueConstraint\": false,\r\n                \"versionable\": false,\r\n                \"triggerEndPeriodEvent\": false,\r\n                \"allowEdit\": true,\r\n                \"hideOnNew\": false,\r\n                \"maxValue\": 50,\r\n                \"indexType\": \"INDEX\"\r\n            },\r\n            {\r\n                \"code\": \"test3\",\r\n                \"description\": \"Réinitailiser les Nb d'essai\",\r\n                \"disabled\": false,\r\n                \"languageDescriptions\": [],\r\n                \"fieldType\": \"BOOLEAN\",\r\n                \"accountLevel\": \"CE_CE_TICKET_ZENDESK\",\r\n                \"appliesTo\": \"CE_CE_TICKET_ZENDESK\",\r\n                \"useInheritedAsDefaultValue\": false,\r\n                \"storageType\": \"SINGLE\",\r\n                \"valueRequired\": false,\r\n                \"uniqueConstraint\": false,\r\n                \"versionable\": false,\r\n                \"triggerEndPeriodEvent\": false,\r\n                \"allowEdit\": true,\r\n                \"hideOnNew\": false,\r\n                \"defaultValue\": true,\r\n                \"indexType\": \"STORE_ONLY\"\r\n            }\r\n           \r\n        ],\r\n        \"action\": []\r\n    }",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/entityCustomization/entity/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"entityCustomization",
														"entity",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "FILL|CE_TEST_1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "15c73179-61a6-4d71-bd8a-5ea3101fd7fd",
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"cetCode\": \"CE_TEST_1\",\n    \"code\":\"test_1\",\n    \"description\":\"Test 1\",\n    \"customFields\": {\n    \t\"customField\":[\n        {\n                \"code\": \"test1\",\n                \"description\":\"description\",\n                \"stringValue\": \"Bonjour, Un ticket de teste \"\n             \n        },{\n                \"code\": \"test2\",\n                \"stringValue\": \"4\"\n             \n        },{\n                \"code\": \"test3\",\n                \"stringValue\": \"Subject\"\n             \n        }\n        \n    ]\n}\n}\n",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/customEntityInstance/{{request.label.1}}/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"customEntityInstance",
														"{{request.label.1}}",
														"createOrUpdate"
													]
												},
												"description": "Injection des codes articles dans la base"
											},
											"response": []
										},
										{
											"name": "CE CE_TEST_2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "2b05baa3-f7dc-4495-b9bd-2c2d62fd91ec",
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n     \"code\": \"CE_TEST_2\",\r\n        \"description\": \"Entité personnalisé TEST\",\r\n        \"disabled\": false,\r\n        \"name\": \" TEST_2\",\r\n        \"field\": [\r\n            {\r\n                \"code\": \"test1\",\r\n                \"description\": \"Description\",\r\n                \"disabled\": false,\r\n                \"fieldType\": \"STRING\",\r\n                \"useInheritedAsDefaultValue\": false,\r\n                \"storageType\": \"SINGLE\",\r\n                \"valueRequired\": false,\r\n                \"uniqueConstraint\": false,\r\n                \"versionable\": false,\r\n                \"triggerEndPeriodEvent\": false,\r\n                \"allowEdit\": true,\r\n                \"hideOnNew\": false,\r\n                \"maxValue\": 100,\r\n                \"indexType\": \"STORE_ONLY\"\r\n            },\r\n\t\t\t {\r\n              \r\n                \"code\": \"test2\",\r\n                \"description\": \"Destinataire\",\r\n                \"disabled\": false,\r\n                \"fieldType\": \"STRING\",\r\n                \"useInheritedAsDefaultValue\": false,\r\n                \"storageType\": \"SINGLE\",\r\n                \"valueRequired\": true,\r\n                \"uniqueConstraint\": false,\r\n                \"versionable\": false,\r\n                \"triggerEndPeriodEvent\": false,\r\n                \"allowEdit\": true,\r\n                \"hideOnNew\": false,\r\n                \"maxValue\": 50,\r\n                \"indexType\": \"INDEX\"\r\n            },\r\n            {\r\n                \"code\": \"test3\",\r\n                \"description\": \"Réinitailiser les Nb d'essai\",\r\n                \"disabled\": false,\r\n                \"languageDescriptions\": [],\r\n                \"fieldType\": \"BOOLEAN\",\r\n                \"accountLevel\": \"CE_CE_TICKET_ZENDESK\",\r\n                \"appliesTo\": \"CE_CE_TICKET_ZENDESK\",\r\n                \"useInheritedAsDefaultValue\": false,\r\n                \"storageType\": \"SINGLE\",\r\n                \"valueRequired\": false,\r\n                \"uniqueConstraint\": false,\r\n                \"versionable\": false,\r\n                \"triggerEndPeriodEvent\": false,\r\n                \"allowEdit\": true,\r\n                \"hideOnNew\": false,\r\n                \"defaultValue\": true,\r\n                \"indexType\": \"STORE_ONLY\"\r\n            }\r\n           \r\n        ],\r\n        \"action\": []\r\n    }",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/entityCustomization/entity/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"entityCustomization",
														"entity",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "FILL|CE_TEST_2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "de57d430-0f5c-428b-ae5b-9c15bd46695e",
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"name": "Content-Type",
														"type": "text",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"cetCode\": \"CE_TEST_2\",\n    \"code\":\"test_2\",\n    \"description\":\"Test 2\",\n    \"customFields\": {\n    \t\"customField\":[\n        {\n                \"code\": \"test1\",\n                \"description\":\"description\",\n                \"stringValue\": \"Bonjour, Un ticket de teste \"\n             \n        },{\n                \"code\": \"test2\",\n                \"stringValue\": \"4\"\n             \n        },{\n                \"code\": \"test3\",\n                \"stringValue\": \"Subject\"\n             \n        }\n        \n    ]\n}\n}\n",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/customEntityInstance/{{request.label.1}}/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"customEntityInstance",
														"{{request.label.1}}",
														"createOrUpdate"
													]
												},
												"description": "Injection des codes articles dans la base"
											},
											"response": []
										},
										{
											"name": "Create Workflow|WF_TEST_1",
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{opencell.username}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{opencell.password}}",
															"type": "string"
														},
														{
															"key": "saveHelperData",
															"value": true,
															"type": "boolean"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"targetEntityClass\": \"org.meveo.model.customEntities.CustomEntityInstance\",\r\n    \"targetCetCode\": \"CE_TEST_1\",\r\n    \"code\": \"{{request.label.1}}\",\r\n    \"description\": \"workflow Customer TEST 1\",\r\n    \"status\": [ \r\n    \t{ \"code\": \"A\", \"description\": \"A\" },\r\n    \t{ \"code\": \"B\", \"description\": \"B\" },\r\n    \t{ \"code\": \"C\", \"description\": \"C\" },\r\n    \t{ \"code\": \"D\", \"description\": \"D\" },\r\n    \t{ \"code\": \"E\", \"description\": \"E\" },\r\n    \t{ \"code\": \"F\", \"description\": \"F\" },\r\n    \t{ \"code\": \"G\", \"description\": \"G\" },\r\n    \t{ \"code\": \"H\", \"description\": \"H\" }\r\n    ],\r\n    \"initStatus\": \"A\",\r\n    \"transition\": [\r\n    \t\t{ \"fromStatus\": \"A\", \"toStatus\": \"B\", \"description\": \"T1\", \"conditionEl\": \"#{true}\", \"actionScriptCode\": \"\"},\r\n    \t\t{ \"fromStatus\": \"B\", \"toStatus\": \"C\", \"description\": \"T2\", \"conditionEl\": \"#{true}\", \"actionScriptCode\": \"\" },\r\n    \t{ \"fromStatus\": \"C\", \"toStatus\": \"D\", \"description\": \"T3\", \"conditionEl\": \"#{false}\", \"actionScriptCode\": \"\" },\r\n    \t{ \"fromStatus\": \"D\", \"toStatus\": \"E\", \"description\": \"T4\", \"conditionEl\": \"#{true}\", \"actionScriptCode\": \"\" },\r\n    \t{ \"fromStatus\": \"E\", \"toStatus\": \"F\", \"description\": \"T5\", \"conditionEl\": \"#{true}\", \"actionScriptCode\": \"\" }\r\n    \t\r\n    \t\t\r\n    \r\n    \r\n    \r\n    ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/admin/genericWorkflow/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"admin",
														"genericWorkflow",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Workflow Job|WF_TEST_1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "ef47316a-d029-4d9b-ae6d-c2f76ce5bf74",
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{opencell.username}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{opencell.password}}",
															"type": "string"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\r\n    \"active\": \"false\",\r\n    \"code\": \"{{request.label.1}}\",\r\n    \"description\": \"Customer Workflow Job\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"gwfJob_generic_wf\",\r\n                \"entityReferenceValue\": { \"code\" : \"{{request.label.1}}\", \"classname\": \"org.meveo.model.generic.wf.GenericWorkflow\" }\r\n            }\r\n        ]\r\n    },\r\n    \"timerCode\": \"Daily-midnight\",\r\n    \"jobCategory\": \"MISC\",\r\n    \"jobTemplate\": \"GenericWorkflowJob\"\r\n    \r\n}\r\n",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"jobInstance",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Run Job|WF_TEST_1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "adba3978-1fc8-4cf2-8082-48474f076974",
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"tests[\"is.success\"] = jsonData.actionStatus.status === \"SUCCESS\";",
															"",
															"postman.setGlobalVariable(\"jobRun.id\", jsonData.actionStatus.message);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "4d195656-7fa2-4cb5-911e-e81ae74b5867",
														"exec": [
															"pm.globals.set(\"task.code\", pm.variables.get(\"request.label.1\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{opencell.username}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{opencell.password}}",
															"type": "string"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"code\":\"{{request.label.1}}\"\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/job/execute",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"job",
														"execute"
													]
												}
											},
											"response": []
										},
										{
											"name": "Job Report|WF_TEST_1|wait=5",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "359df5fe-d3b3-495a-98a0-f7d5e732e81b",
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"tests[\"is.success\"] = jsonData.actionStatus.status === \"SUCCESS\";",
															"var task=pm.variables.get(\"task.code\");",
															"",
															"if( typeof jsonData.jobExecutionResultDto.endDate !== \"undefined\" && jsonData.jobExecutionResultDto.done === true ){",
															"    tests[\"is.done.\"+task] = true;",
															"    tests[\"is.jobNoWarning\"] = jsonData.jobExecutionResultDto.nbItemsProcessedWithWarning === 0;",
															"    tests[\"is.jobNoError\"] = jsonData.jobExecutionResultDto.nbItemsProcessedWithError === 0;",
															"    if( ! (tests[\"is.jobNoWarning\"] && tests[\"is.jobNoError\"]) ){",
															"        console.log(\"Errors have occured, check job \"+task+\" report.\");",
															"    }",
															"} else {",
															"    postman.setNextRequest(pm.variables.get(\"task.wait\"));",
															"    tests[\"is.not.done.yet.\"+task] = true;",
															"    console.log(\"Not done yet (\"+task+\").\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "6adfc1fb-3d37-406e-8392-c7fa806e1acb",
														"exec": [
															"pm.globals.set(\"task.wait\", pm.variables.get(\"request.label\"));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{opencell.username}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{opencell.password}}",
															"type": "string"
														},
														{
															"key": "saveHelperData",
															"value": true,
															"type": "boolean"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
													}
												],
												"url": {
													"raw": "{{opencell.url}}/job/jobReport?id={{jobRun.id}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"job",
														"jobReport"
													],
													"query": [
														{
															"key": "id",
															"value": "{{jobRun.id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "find History Workflow|WF_TEST_1",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "f6e4ef49-c956-4075-b99e-792a63963288",
														"exec": [
															"\r",
															"pm.test(\"check workflow\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.workflowHistory[0].transitionName).to.eql(\"T1\");\r",
															"    pm.expect(jsonData.workflowHistory[1].transitionName).to.eql(\"T2\");\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/admin/genericWorkflow/history?entityInstanceCode=test_1&workflowCode=WF_TEST_1",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"admin",
														"genericWorkflow",
														"history"
													],
													"query": [
														{
															"key": "entityInstanceCode",
															"value": "test_1"
														},
														{
															"key": "workflowCode",
															"value": "WF_TEST_1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "find History Workflow|WF_TEST_2",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "7995b06d-a632-4343-84ad-b65077754526",
														"exec": [
															"\r",
															"pm.test(\"check workflow\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.workflowHistory.length).to.eql(0);\r",
															"\r",
															"\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/admin/genericWorkflow/history?entityInstanceCode=test_2&workflowCode={{request.label.1}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"admin",
														"genericWorkflow",
														"history"
													],
													"query": [
														{
															"key": "entityInstanceCode",
															"value": "test_2"
														},
														{
															"key": "workflowCode",
															"value": "{{request.label.1}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "565a0e91-1a63-482b-aa06-2bbbd28aee4b",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "90cbfd7d-c181-430f-93fc-86279178d302",
												"type": "text/javascript",
												"exec": [
													""
												]
											}
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								},
								{
									"name": "T1-T3-T8",
									"item": [
										{
											"name": "Create Workflow|WF_T1_T3_T8",
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{opencell.username}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{opencell.password}}",
															"type": "string"
														},
														{
															"key": "saveHelperData",
															"value": true,
															"type": "boolean"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"targetEntityClass\": \"org.meveo.model.crm.Customer\",\r\n    \"code\": \"{{request.label.1}}\",\r\n    \"description\": \"workflow Customer\",\r\n    \"status\": [ \r\n    \t{ \"code\": \"A\", \"description\": \"A\" },\r\n    \t{ \"code\": \"B\", \"description\": \"B\" },\r\n    \t{ \"code\": \"C\", \"description\": \"C\" },\r\n    \t{ \"code\": \"D\", \"description\": \"D\" },\r\n    \t{ \"code\": \"E\", \"description\": \"E\" },\r\n    \t{ \"code\": \"F\", \"description\": \"F\" },\r\n    \t{ \"code\": \"G\", \"description\": \"G\" },\r\n    \t{ \"code\": \"H\", \"description\": \"H\" }\r\n    ],\r\n    \"initStatus\": \"A\",\r\n    \"transition\": [\r\n    \t\t{ \"fromStatus\": \"A\", \"toStatus\": \"B\", \"description\": \"T1\", \"conditionEl\": \"#{true}\", \"actionScriptCode\": \"\"},\r\n    \t\t{ \"fromStatus\": \"A\", \"toStatus\": \"C\", \"description\": \"T2\", \"conditionEl\": \"#{false}\", \"actionScriptCode\": \"com.opencellsoft.script.ActionScriptExample1\" },\r\n    \t{ \"fromStatus\": \"B\", \"toStatus\": \"F\", \"description\": \"T3\", \"conditionEl\": \"#{false}\", \"actionScriptCode\": \"\" },\r\n    \t{ \"fromStatus\": \"B\", \"toStatus\": \"E\", \"description\": \"T4\", \"conditionEl\": \"#{false}\", \"actionScriptCode\": \"\" },\r\n    \t{ \"fromStatus\": \"C\", \"toStatus\": \"D\", \"description\": \"T5\", \"conditionEl\": \"#{true}\", \"actionScriptCode\": \"\" },\r\n    \t{ \"fromStatus\": \"D\", \"toStatus\": \"G\", \"description\": \"T7\", \"conditionEl\": \"#{true}\", \"actionScriptCode\": \"\" },\r\n    \t{ \"fromStatus\": \"E\", \"toStatus\": \"G\", \"description\": \"T6\", \"conditionEl\": \"#{false}\", \"actionScriptCode\": \"\" },\r\n    \t{ \"fromStatus\": \"F\", \"toStatus\": \"H\", \"description\": \"T8\", \"conditionEl\": \"#{true}\", \"actionScriptCode\": \"\" },\r\n    \t{ \"fromStatus\": \"G\", \"toStatus\": \"H\", \"description\": \"T9\", \"conditionEl\": \"#{true}\", \"actionScriptCode\": \"\" }\r\n    \t\r\n    \t\r\n    \t\t\r\n    \r\n    \r\n    \r\n    ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/admin/genericWorkflow/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"admin",
														"genericWorkflow",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create Workflow Job|WF_T1_T3_T8",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "4d1d6e4b-8629-4bf0-a7dd-821617ea132d",
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"tests[\"is.success\"] = jsonData.status === \"SUCCESS\";"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{opencell.username}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{opencell.password}}",
															"type": "string"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n\r\n    \"active\": \"false\",\r\n    \"code\": \"{{request.label.1}}\",\r\n    \"description\": \"Customer Workflow Job\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"gwfJob_generic_wf\",\r\n                \"entityReferenceValue\": { \"code\" : \"{{request.label.1}}\", \"classname\": \"org.meveo.model.generic.wf.GenericWorkflow\" }\r\n            }\r\n        ]\r\n    },\r\n    \"timerCode\": \"Daily-midnight\",\r\n    \"jobCategory\": \"MISC\",\r\n    \"jobTemplate\": \"GenericWorkflowJob\"\r\n    \r\n}\r\n",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"jobInstance",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Run Job|WF_T1_T3_T8",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "666234ff-2b49-4a5c-949d-56f11099c45e",
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"tests[\"is.success\"] = jsonData.actionStatus.status === \"SUCCESS\";",
															"",
															"postman.setGlobalVariable(\"jobRun.id\", jsonData.actionStatus.message);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "91d41a48-3c2f-440b-97a7-55d500f00dcc",
														"exec": [
															"pm.globals.set(\"task.code\", pm.variables.get(\"request.label.1\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{opencell.username}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{opencell.password}}",
															"type": "string"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"code\":\"{{request.label.1}}\"\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/job/execute",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"job",
														"execute"
													]
												}
											},
											"response": []
										},
										{
											"name": "Job Report|WF_T1_T3_T8|wait=5",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "031ad623-25d2-4838-8022-e6e2fdf2d956",
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"tests[\"is.success\"] = jsonData.actionStatus.status === \"SUCCESS\";",
															"var task=pm.variables.get(\"task.code\");",
															"",
															"if( typeof jsonData.jobExecutionResultDto.endDate !== \"undefined\" && jsonData.jobExecutionResultDto.done === true ){",
															"    tests[\"is.done.\"+task] = true;",
															"    tests[\"is.jobNoWarning\"] = jsonData.jobExecutionResultDto.nbItemsProcessedWithWarning === 0;",
															"    tests[\"is.jobNoError\"] = jsonData.jobExecutionResultDto.nbItemsProcessedWithError === 0;",
															"    if( ! (tests[\"is.jobNoWarning\"] && tests[\"is.jobNoError\"]) ){",
															"        console.log(\"Errors have occured, check job \"+task+\" report.\");",
															"    }",
															"} else {",
															"    postman.setNextRequest(pm.variables.get(\"task.wait\"));",
															"    tests[\"is.not.done.yet.\"+task] = true;",
															"    console.log(\"Not done yet (\"+task+\").\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "1e3accc2-1ab8-4048-9e96-718cb780f455",
														"exec": [
															"pm.globals.set(\"task.wait\", pm.variables.get(\"request.label\"));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{opencell.username}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{opencell.password}}",
															"type": "string"
														},
														{
															"key": "saveHelperData",
															"value": true,
															"type": "boolean"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
													}
												],
												"url": {
													"raw": "{{opencell.url}}/job/jobReport?id={{jobRun.id}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"job",
														"jobReport"
													],
													"query": [
														{
															"key": "id",
															"value": "{{jobRun.id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "find History Workflow|WF_T1_T3_T8",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "451493c0-2851-48aa-a0e5-7cfe9786fbae",
														"exec": [
															"\r",
															"pm.test(\"check workflow\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.workflowHistory[0].transitionName).to.eql(\"T1\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/admin/genericWorkflow/history?entityInstanceCode={{account.code}}&workflowCode={{request.label.1}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"admin",
														"genericWorkflow",
														"history"
													],
													"query": [
														{
															"key": "entityInstanceCode",
															"value": "{{account.code}}"
														},
														{
															"key": "workflowCode",
															"value": "{{request.label.1}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "Run Job - Again|WF_T1_T3_T8",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bf3babe1-28b7-43b5-ae90-e78b3d599df0",
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"tests[\"is.success\"] = jsonData.actionStatus.status === \"SUCCESS\";",
															"",
															"postman.setGlobalVariable(\"jobRun.id\", jsonData.actionStatus.message);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "937f2652-bcbc-4f64-a422-9abd94234bb1",
														"exec": [
															"pm.globals.set(\"task.code\", pm.variables.get(\"request.label.1\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{opencell.username}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{opencell.password}}",
															"type": "string"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"code\":\"{{request.label.1}}\"\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/job/execute",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"job",
														"execute"
													]
												}
											},
											"response": []
										},
										{
											"name": "Job Report  - Again|WF_T1_T3_T8|wait=5",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "bf17e25d-a3cf-47fe-8764-172c5c701233",
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"tests[\"is.success\"] = jsonData.actionStatus.status === \"SUCCESS\";",
															"var task=pm.variables.get(\"task.code\");",
															"",
															"if( typeof jsonData.jobExecutionResultDto.endDate !== \"undefined\" && jsonData.jobExecutionResultDto.done === true ){",
															"    tests[\"is.done.\"+task] = true;",
															"    tests[\"is.jobNoWarning\"] = jsonData.jobExecutionResultDto.nbItemsProcessedWithWarning === 0;",
															"    tests[\"is.jobNoError\"] = jsonData.jobExecutionResultDto.nbItemsProcessedWithError === 0;",
															"    if( ! (tests[\"is.jobNoWarning\"] && tests[\"is.jobNoError\"]) ){",
															"        console.log(\"Errors have occured, check job \"+task+\" report.\");",
															"    }",
															"} else {",
															"    postman.setNextRequest(pm.variables.get(\"task.wait\"));",
															"    tests[\"is.not.done.yet.\"+task] = true;",
															"    console.log(\"Not done yet (\"+task+\").\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "377034de-3ba6-4490-8b3d-8f062643a652",
														"exec": [
															"pm.globals.set(\"task.wait\", pm.variables.get(\"request.label\"));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{opencell.username}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{opencell.password}}",
															"type": "string"
														},
														{
															"key": "saveHelperData",
															"value": true,
															"type": "boolean"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
													}
												],
												"url": {
													"raw": "{{opencell.url}}/job/jobReport?id={{jobRun.id}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"job",
														"jobReport"
													],
													"query": [
														{
															"key": "id",
															"value": "{{jobRun.id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "find History Workflow - Again|WF_T1_T3_T8",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0771c3aa-4380-4113-aa14-e0773a287795",
														"exec": [
															"\r",
															"pm.test(\"check workflow\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.workflowHistory[0].transitionName).to.eql(\"T1\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/admin/genericWorkflow/history?entityInstanceCode={{account.code}}&workflowCode={{request.label.1}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"admin",
														"genericWorkflow",
														"history"
													],
													"query": [
														{
															"key": "entityInstanceCode",
															"value": "{{account.code}}"
														},
														{
															"key": "workflowCode",
															"value": "{{request.label.1}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "update Workflow|WF_T1_T3_T8",
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{opencell.username}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{opencell.password}}",
															"type": "string"
														},
														{
															"key": "saveHelperData",
															"value": true,
															"type": "boolean"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\r\n    \"targetEntityClass\": \"org.meveo.model.crm.Customer\",\r\n    \"code\": \"{{request.label.1}}\",\r\n    \"description\": \"workflow Customer\",\r\n    \"status\": [ \r\n    \t{ \"code\": \"A\", \"description\": \"A\" },\r\n    \t{ \"code\": \"B\", \"description\": \"B\" },\r\n    \t{ \"code\": \"C\", \"description\": \"C\" },\r\n    \t{ \"code\": \"D\", \"description\": \"D\" },\r\n    \t{ \"code\": \"E\", \"description\": \"E\" },\r\n    \t{ \"code\": \"F\", \"description\": \"F\" },\r\n    \t{ \"code\": \"G\", \"description\": \"G\" },\r\n    \t{ \"code\": \"H\", \"description\": \"H\" }\r\n    ],\r\n    \"initStatus\": \"A\",\r\n    \"transition\": [\r\n    \t\t{ \"fromStatus\": \"A\", \"toStatus\": \"B\", \"description\": \"T1\", \"conditionEl\": \"#{true}\", \"actionScriptCode\": \"\"},\r\n    \t\t{ \"fromStatus\": \"A\", \"toStatus\": \"C\", \"description\": \"T2\", \"conditionEl\": \"#{false}\", \"actionScriptCode\": \"com.opencellsoft.script.ActionScriptExample1\" },\r\n    \t{ \"fromStatus\": \"B\", \"toStatus\": \"F\", \"description\": \"T3\", \"conditionEl\": \"#{true}\", \"actionScriptCode\": \"\" },\r\n    \t{ \"fromStatus\": \"B\", \"toStatus\": \"E\", \"description\": \"T4\", \"conditionEl\": \"#{false}\", \"actionScriptCode\": \"\" },\r\n    \t{ \"fromStatus\": \"C\", \"toStatus\": \"D\", \"description\": \"T5\", \"conditionEl\": \"#{true}\", \"actionScriptCode\": \"\" },\r\n    \t{ \"fromStatus\": \"D\", \"toStatus\": \"G\", \"description\": \"T7\", \"conditionEl\": \"#{true}\", \"actionScriptCode\": \"\" },\r\n    \t{ \"fromStatus\": \"E\", \"toStatus\": \"G\", \"description\": \"T6\", \"conditionEl\": \"#{false}\", \"actionScriptCode\": \"\" },\r\n    \t{ \"fromStatus\": \"F\", \"toStatus\": \"H\", \"description\": \"T8\", \"conditionEl\": \"#{true}\", \"actionScriptCode\": \"\" },\r\n    \t{ \"fromStatus\": \"G\", \"toStatus\": \"H\", \"description\": \"T9\", \"conditionEl\": \"#{true}\", \"actionScriptCode\": \"\" }\r\n    \t\r\n    \t\r\n    \t\t\r\n    \r\n    \r\n    \r\n    ]\r\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/admin/genericWorkflow/createOrUpdate",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"admin",
														"genericWorkflow",
														"createOrUpdate"
													]
												}
											},
											"response": []
										},
										{
											"name": "Run|WF_T1_T3_T8",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "e8c1ae3c-b4cd-4e17-9cd7-72fe984aea93",
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"tests[\"is.success\"] = jsonData.actionStatus.status === \"SUCCESS\";",
															"",
															"postman.setGlobalVariable(\"jobRun.id\", jsonData.actionStatus.message);"
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "62d742b6-83d9-4b5a-be4e-493ce8bf5de7",
														"exec": [
															"pm.globals.set(\"task.code\", pm.variables.get(\"request.label.1\"));"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{opencell.username}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{opencell.password}}",
															"type": "string"
														},
														{
															"key": "saveHelperData",
															"type": "any"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n  \"code\":\"{{request.label.1}}\"\n}",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/job/execute",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"job",
														"execute"
													]
												}
											},
											"response": []
										},
										{
											"name": "Job Report|WF_T1_T3_T8|wait=5",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "9c1b8bd3-751c-41f1-9e2d-ca5dfd836233",
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"tests[\"is.success\"] = jsonData.actionStatus.status === \"SUCCESS\";",
															"var task=pm.variables.get(\"task.code\");",
															"",
															"if( typeof jsonData.jobExecutionResultDto.endDate !== \"undefined\" && jsonData.jobExecutionResultDto.done === true ){",
															"    tests[\"is.done.\"+task] = true;",
															"    tests[\"is.jobNoWarning\"] = jsonData.jobExecutionResultDto.nbItemsProcessedWithWarning === 0;",
															"    tests[\"is.jobNoError\"] = jsonData.jobExecutionResultDto.nbItemsProcessedWithError === 0;",
															"    if( ! (tests[\"is.jobNoWarning\"] && tests[\"is.jobNoError\"]) ){",
															"        console.log(\"Errors have occured, check job \"+task+\" report.\");",
															"    }",
															"} else {",
															"    postman.setNextRequest(pm.variables.get(\"task.wait\"));",
															"    tests[\"is.not.done.yet.\"+task] = true;",
															"    console.log(\"Not done yet (\"+task+\").\");",
															"}",
															""
														],
														"type": "text/javascript"
													}
												},
												{
													"listen": "prerequest",
													"script": {
														"id": "a8c4e5e0-495e-4535-b35d-5bacd9f01520",
														"exec": [
															"pm.globals.set(\"task.wait\", pm.variables.get(\"request.label\"));",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"auth": {
													"type": "basic",
													"basic": [
														{
															"key": "username",
															"value": "{{opencell.username}}",
															"type": "string"
														},
														{
															"key": "password",
															"value": "{{opencell.password}}",
															"type": "string"
														},
														{
															"key": "saveHelperData",
															"value": true,
															"type": "boolean"
														},
														{
															"key": "showPassword",
															"value": false,
															"type": "boolean"
														}
													]
												},
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
													}
												],
												"url": {
													"raw": "{{opencell.url}}/job/jobReport?id={{jobRun.id}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"job",
														"jobReport"
													],
													"query": [
														{
															"key": "id",
															"value": "{{jobRun.id}}"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "find History Workflow|WF_T1_T3_T8",
											"event": [
												{
													"listen": "test",
													"script": {
														"id": "0ffda5c4-2231-476f-86c8-8ac01d79d664",
														"exec": [
															"\r",
															"pm.test(\"check workflow\", function () {\r",
															"    var jsonData = pm.response.json();\r",
															"    pm.expect(jsonData.workflowHistory[0].transitionName).to.eql(\"T1\");\r",
															"    pm.expect(jsonData.workflowHistory[1].transitionName).to.eql(\"T3\");\r",
															"    pm.expect(jsonData.workflowHistory[2].transitionName).to.eql(\"T8\");\r",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"protocolProfileBehavior": {
												"disableBodyPruning": true
											},
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
													}
												],
												"body": {
													"mode": "raw",
													"raw": "",
													"options": {
														"raw": {}
													}
												},
												"url": {
													"raw": "{{opencell.url}}/admin/genericWorkflow/history?entityInstanceCode={{account.code}}&workflowCode={{request.label.1}}",
													"host": [
														"{{opencell.url}}"
													],
													"path": [
														"admin",
														"genericWorkflow",
														"history"
													],
													"query": [
														{
															"key": "entityInstanceCode",
															"value": "{{account.code}}"
														},
														{
															"key": "workflowCode",
															"value": "{{request.label.1}}"
														}
													]
												}
											},
											"response": []
										}
									],
									"protocolProfileBehavior": {},
									"_postman_isSubFolder": true
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"auth": {
						"type": "basic",
						"basic": [
							{
								"key": "password",
								"value": "{{opencell.password}}",
								"type": "string"
							},
							{
								"key": "username",
								"value": "{{opencell.username}}",
								"type": "string"
							}
						]
					},
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "d1ee8296-387f-49e0-a7d1-bcfcc247b716",
								"type": "text/javascript",
								"exec": [
									"var now = new Date();",
									"pm.globals.set(\"timestamp.iso\", now.toISOString());",
									"pm.globals.set(\"request.label\", pm.info.requestName);",
									"",
									"var parts = pm.info.requestName.split(\"|\");",
									"",
									"for (let i = 0; i < parts.length; i++) {",
									"    pm.globals.set(\"wait\", 0);",
									"    pm.globals.set(\"request.label.\" + i, parts[i]);",
									"",
									"    if (parts[i].indexOf(\"=\") != -1) {",
									"        propName = parts[i].split(\"=\")[0].trim();",
									"        propValue = parts[i].split(\"=\")[1];",
									"        pm.globals.set(propName, propValue);",
									"    }",
									"}",
									"",
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6a3a6adf-743e-432e-a3b2-f9bb916536fc",
								"type": "text/javascript",
								"exec": [
									"var wait = pm.variables.get(\"wait\");",
									"",
									"if (wait > 0) {",
									"    console.log(\"Waiting for \" + pm.variables.get(\"request.label.0\") + \" for \" + wait + \" seconds...\");",
									"    setTimeout(function () { }, wait * 1000);",
									"}",
									"",
									"if (pm.response.code == 401) {",
									"    console.log(\"Unauthorized[401] : access_token may be invalid -> deleting token. Please retry...\");",
									"    pm.variables.unset(\"access_token\");",
									"    console.log(\"Jumping to \" + pm.info.requestName);",
									"    postman.setNextRequest(pm.info.requestName);",
									"} else {",
									"    tests[\"is.success\"] = (pm.response.code == 200 || pm.response.code == 204);",
									"}",
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "#4895 - Create a fixed date calendar ",
					"item": [
						{
							"name": "FIXED_CALENDAR",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "96a0a3bd-ff89-403b-bca2-683d906974b3",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "opencell.admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "opencell.admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"FIXED_CALENDAR_2020\",\n    \"description\":\"FIXED_CALENDAR_2020\",\n    \"calendarType\": \"FIXED\",\n     \"fixedDates\": [\n            \"01/01/2020 15:15 - 31/05/2020 15:15\"\n        ]\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/calendar/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"calendar",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "DELETE_FIXED_CALENDAR",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "4382f124-7697-40d5-9d62-3f1e2f1d4b8f",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(request.name + \" - Check Status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");\r",
											"});\r",
											"\r",
											"pm.test(request.name + \" - Check ErrorCode\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errorCode).to.eql();\r",
											"});\r",
											"\r",
											"pm.test(request.name + \" - Check Message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "opencell.admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "opencell.admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{opencell.url}}/calendar/FIXED_CALENDAR_2020",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"calendar",
										"FIXED_CALENDAR_2020"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "#5064 - Add fileFormat attribute (CF) to FlatFile job and finish fileFormat Rest api",
					"item": [
						{
							"name": "File Format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "8c3e6b63-e2b8-4379-a51c-a48c2031c281",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(request.name + \" - Check Status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");\r",
											"});\r",
											"\r",
											"pm.test(request.name + \" - Check ErrorCode\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errorCode).to.eql();\r",
											"});\r",
											"\r",
											"pm.test(request.name + \" - Check Message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "opencell.admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "opencell.admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"test\",\n    \"fileTypes\": [\n        \"csv\"\n    ],\n    \"configurationTemplate\": \"test1\",\n    \"recordName\": \"record\",\n    \"inputDirectory\": \"imports/catalog/input\",\n    \"outputDirectory\": \"imports/catalog/output\",\n    \"rejectDirectory\": \"imports/catalog/reject\",\n    \"archiveDirectory\": \"imports/test\",\n    \"jobCode\": \"Catalog import job\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/admin/fileFormat/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"admin",
										"fileFormat",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find file format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c652b012-2a41-4ac0-b48a-d4d1e1d6e7cd",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check File Format code\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.dto.code).to.eql(\"test\");\r",
											"    });\r",
											"pm.test(\"Check File Format type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.dto.fileTypes).to.eql([ 'csv' ] );\r",
											"    });\r",
											"\r",
											"    pm.test(\"Check configurationTemplate\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.dto.configurationTemplate).to.eql(\"test1\");\r",
											"    });\r",
											"    \r",
											"     pm.test(\"Check recordName\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.dto.recordName).to.eql(\"record\");\r",
											"    });\r",
											"    \r",
											"      pm.test(\"Check input Directory\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.dto.inputDirectory).to.eql(\"imports/catalog/input\");\r",
											"    });\r",
											"\r",
											"       pm.test(\"Check output Directory\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.dto.outputDirectory).to.eql(\"imports/catalog/output\");\r",
											"    });\r",
											"       pm.test(\"Check reject Directory\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.dto.rejectDirectory).to.eql(\"imports/catalog/reject\");\r",
											"    });\r",
											"    \r",
											"     pm.test(\"Check archive Directory\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.dto.archiveDirectory).to.eql(\"imports/test\");\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "opencell.admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "opencell.admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{opencell.url}}/admin/fileFormat?code=test",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"admin",
										"fileFormat"
									],
									"query": [
										{
											"key": "code",
											"value": "test"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update fileFormat",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c23cd08a-dcea-411b-b7b6-3b3fb9ea0ed3",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(request.name + \" - Check Status\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
											"});",
											"",
											"pm.test(request.name + \" - Check ErrorCode\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.errorCode).to.eql();",
											"});",
											"",
											"pm.test(request.name + \" - Check Message\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.expect(jsonData.message).to.eql(\"\");",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "username",
											"value": "{{opencell.username}}",
											"type": "string"
										},
										{
											"key": "password",
											"value": "{{opencell.password}}",
											"type": "string"
										},
										{
											"key": "saveHelperData",
											"value": true,
											"type": "boolean"
										},
										{
											"key": "showPassword",
											"value": false,
											"type": "boolean"
										}
									]
								},
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Authorization",
										"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"test\",\n    \"fileTypes\": [\n        \"txt\"\n    ],\n    \"configurationTemplate\": \"test2\",\n    \"recordName\": \"record\",\n    \"inputDirectory\": \"imports/catalog/input\",\n    \"outputDirectory\": \"imports/catalog/output\",\n    \"rejectDirectory\": \"imports/catalog/reject\",\n    \"archiveDirectory\": \"imports/test\",\n    \"jobCode\": \"Catalog import job\"\n}",
									"options": {
										"raw": {}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/admin/fileFormat",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"admin",
										"fileFormat"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find file format after update",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "3879b039-f515-4d08-a615-43dda2f354d6",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(request.name + \" - Check Status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");\r",
											"});\r",
											"\r",
											"pm.test(request.name + \" - Check ErrorCode\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();\r",
											"});\r",
											"\r",
											"pm.test(request.name + \" - Check Message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.actionStatus.message).to.eql();\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "opencell.admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "opencell.admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{opencell.url}}/admin/fileFormat?code=test",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"admin",
										"fileFormat"
									],
									"query": [
										{
											"key": "code",
											"value": "test"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "List file formats",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "44dc1f91-bc60-499f-9191-beacf046a2c9",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(request.name + \" - Check Status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");\r",
											"});\r",
											"\r",
											"pm.test(request.name + \" - Check ErrorCode\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.actionStatus.errorCode).to.eql();\r",
											"});\r",
											"\r",
											"pm.test(request.name + \" - Check Message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.actionStatus.message).to.eql();\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "opencell.admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "opencell.admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{opencell.url}}/admin/fileFormat/list",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"admin",
										"fileFormat",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete file format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "e5bcf28f-3ec5-4596-9771-b04985ffb82c",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(request.name + \" - Check Status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");\r",
											"});\r",
											"\r",
											"pm.test(request.name + \" - Check ErrorCode\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errorCode).to.eql();\r",
											"});\r",
											"\r",
											"pm.test(request.name + \" - Check Message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "opencell.admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "opencell.admin",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{opencell.url}}/admin/fileFormat/test",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"admin",
										"fileFormat",
										"test"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find file format after delete",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "b0e1834c-f42b-42ee-8238-29878bb8dae5",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"pm.test(request.name + \" - Check Status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"FAIL\");\r",
											"});\r",
											"\r",
											"pm.test(request.name + \" - Check ErrorCode\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");\r",
											"});\r",
											"\r",
											"pm.test(request.name + \" - Check Message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"FileFormat with code=test does not exists.\");\r",
											"\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "opencell.admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "opencell.admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "",
										"type": "text",
										"value": ""
									}
								],
								"url": {
									"raw": "{{opencell.url}}/admin/fileFormat?code=test",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"admin",
										"fileFormat"
									],
									"query": [
										{
											"key": "code",
											"value": "test"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "File Format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "80972122-74eb-4c88-a874-a188a29f119b",
										"exec": [
											"pm.test(request.name + \" - Check Code\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(request.name + \" - Check Status\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");\r",
											"});\r",
											"\r",
											"pm.test(request.name + \" - Check ErrorCode\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.errorCode).to.eql();\r",
											"});\r",
											"\r",
											"pm.test(request.name + \" - Check Message\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.message).to.eql(\"\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "opencell.admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "opencell.admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"code\": \"test\",\n    \"fileTypes\": [\n        \"csv\"\n    ],\n    \"configurationTemplate\": \"test1\",\n    \"recordName\": \"record\",\n    \"inputDirectory\": \"imports/catalog/input\",\n    \"outputDirectory\": \"imports/catalog/output\",\n    \"rejectDirectory\": \"imports/catalog/reject\",\n    \"archiveDirectory\": \"imports/test\",\n    \"jobCode\": \"Catalog import job\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/admin/fileFormat/createOrUpdate",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"admin",
										"fileFormat",
										"createOrUpdate"
									]
								}
							},
							"response": []
						},
						{
							"name": "Find file format",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "fa49be01-af1d-4894-9a7d-0b02aba11e14",
										"exec": [
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"pm.test(\"Check File Format code\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.dto.code).to.eql(\"test\");\r",
											"    });\r",
											"pm.test(\"Check File Format type\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.dto.fileTypes).to.eql([ 'csv' ] );\r",
											"    });\r",
											"\r",
											"    pm.test(\"Check configurationTemplate\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.dto.configurationTemplate).to.eql(\"test1\");\r",
											"    });\r",
											"    \r",
											"     pm.test(\"Check recordName\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.dto.recordName).to.eql(\"record\");\r",
											"    });\r",
											"    \r",
											"      pm.test(\"Check input Directory\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.dto.inputDirectory).to.eql(\"imports/catalog/input\");\r",
											"    });\r",
											"\r",
											"       pm.test(\"Check output Directory\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.dto.outputDirectory).to.eql(\"imports/catalog/output\");\r",
											"    });\r",
											"       pm.test(\"Check reject Directory\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.dto.rejectDirectory).to.eql(\"imports/catalog/reject\");\r",
											"    });\r",
											"    \r",
											"     pm.test(\"Check archive Directory\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.dto.archiveDirectory).to.eql(\"imports/test\");\r",
											"    });"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "opencell.admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "opencell.admin",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{opencell.url}}/admin/fileFormat?code=test",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"admin",
										"fileFormat"
									],
									"query": [
										{
											"key": "code",
											"value": "test"
										}
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "#CORE-5291 - [API] Missing List APIs",
					"item": [
						{
							"name": "Filter on UsageChargeTemplate",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5922fe77-8545-43a4-8c37-432623fe6351",
										"exec": [
											"pm.test(\"Check total Number Of Records\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.paging.totalNumberOfRecords).to.eql(10);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Check Invoice invoiceSubCategory for the 1rst template\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.usageChargeTemplates.usageChargeTemplates[0].invoiceSubCategory).to.eql(\"CLASSIC_USAGE_TIER\");\r",
											"});\r",
											"\r",
											"pm.test(\"Check Invoice invoiceSubCategory for the 2nd template \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.usageChargeTemplates.usageChargeTemplates[1].invoiceSubCategory).to.eql(\"CLASSIC_USAGE_TIER\");\r",
											"});\r",
											"pm.test(\"Check Invoice invoiceSubCategory for the 3rd template \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.usageChargeTemplates.usageChargeTemplates[2].invoiceSubCategory).to.eql(\"CLASSIC_USAGE_TIER\");\r",
											"});\r",
											"pm.test(\"Check Invoice invoiceSubCategory for the 4rd template \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.usageChargeTemplates.usageChargeTemplates[3].invoiceSubCategory).to.eql(\"CLASSIC_USAGE_TIER\");\r",
											"});\r",
											"pm.test(\"Check Invoice invoiceSubCategory for the 5th template \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.usageChargeTemplates.usageChargeTemplates[4].invoiceSubCategory).to.eql(\"CLASSIC_USAGE_TIER\");\r",
											"});\r",
											"pm.test(\"Check Invoice invoiceSubCategory for the 6th template \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.usageChargeTemplates.usageChargeTemplates[5].invoiceSubCategory).to.eql(\"CLASSIC_USAGE_TIER\");\r",
											"});\r",
											"pm.test(\"Check Invoice invoiceSubCategory for the 7th template \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.usageChargeTemplates.usageChargeTemplates[6].invoiceSubCategory).to.eql(\"CLASSIC_USAGE_TIER\");\r",
											"});\r",
											"pm.test(\"Check Invoice invoiceSubCategory for the 8th template \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.usageChargeTemplates.usageChargeTemplates[7].invoiceSubCategory).to.eql(\"CLASSIC_USAGE_TIER\");\r",
											"});\r",
											"pm.test(\"Check Invoice invoiceSubCategory for the 9th template \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.usageChargeTemplates.usageChargeTemplates[8].invoiceSubCategory).to.eql(\"CLASSIC_USAGE_TIER\");\r",
											"});\r",
											"pm.test(\"Check Invoice invoiceSubCategory for the 10th template \", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.usageChargeTemplates.usageChargeTemplates[9].invoiceSubCategory).to.eql(\"CLASSIC_USAGE_TIER\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "opencell.admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "opencell.admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"fullTextFilter\" : null,\r\n\t\"filters\" : {\r\n\t\t\"invoiceSubCategory.code\": \"CLASSIC_USAGE_TIER\"\r\n\t},\r\n\t\"fields\" : null,\r\n\t\"offset\" : null,\r\n\t\"limit\" : null,\r\n\t\"sortBy\" : \"code\",\r\n\t\"sortOrder\" : \"DESCENDING\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/catalog/usageChargeTemplate/list",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"catalog",
										"usageChargeTemplate",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Filter on InvoiceSubCategory",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c42247b3-6843-4b10-9649-86da81ad86c9",
										"exec": [
											"pm.test(\"Check total Number Of Records\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.paging.totalNumberOfRecords).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Check invoiceSubCategory's description\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.invoiceSubCategories.invoiceSubCategory[0].description).to.eql(\"Commission\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "opencell.admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "opencell.admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"fullTextFilter\" : null,\r\n\t\"filters\" : {\r\n\t\t\"invoiceCategory.description\": \"Commission\"\r\n\t},\r\n\t\"fields\" : null,\r\n\t\"offset\" : null,\r\n\t\"limit\" : null,\r\n\t\"sortBy\" : \"code\",\r\n\t\"sortOrder\" : \"DESCENDING\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceSubCategory/list",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceSubCategory",
										"list"
									]
								}
							},
							"response": []
						},
						{
							"name": "Filter on InvoiceCategory",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "9e732e0b-e184-4cdc-9fcf-bebef2c578a6",
										"exec": [
											"pm.test(\"Check total Number Of Records\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.paging.totalNumberOfRecords).to.eql(1);\r",
											"});\r",
											"\r",
											"pm.test(\"Check invoiceSubCategory's description\", function () {\r",
											"    var jsonData = pm.response.json();\r",
											"    pm.expect(jsonData.invoiceCategories.invoiceCategory[0].code).to.eql(\"CLASSIC_COMMISSION\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "basic",
									"basic": [
										{
											"key": "password",
											"value": "opencell.admin",
											"type": "string"
										},
										{
											"key": "username",
											"value": "opencell.admin",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n\t\"fullTextFilter\" : null,\r\n\t\"filters\" : {\r\n\t\t\"code\": \"CLASSIC_COMMISSION\"\r\n\t},\r\n\t\"fields\" : null,\r\n\t\"offset\" : null,\r\n\t\"limit\" : null,\r\n\t\"sortBy\" : \"code\",\r\n\t\"sortOrder\" : \"DESCENDING\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{opencell.url}}/invoiceCategory/list",
									"host": [
										"{{opencell.url}}"
									],
									"path": [
										"invoiceCategory",
										"list"
									]
								}
							},
							"response": []
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "9de0bf8e-ae6a-4623-8592-d4d7b5487d83",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "b396e74b-cd18-4448-bafd-caeb48d7983a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "e1d15576-69f3-4135-9db0-dcb972324da2",
			"key": "opencell.base",
			"value": "http://localhost:8080/opencell"
		},
		{
			"id": "a5af6618-649e-4000-af47-e1f63309f419",
			"key": "opencell.url",
			"value": "{{opencell.base}}/api/rest"
		},
		{
			"id": "6ddeaea4-347d-455d-b073-0b6cce7698b0",
			"key": "opencell.username",
			"value": "opencell.admin"
		},
		{
			"id": "4fee6a1b-a17d-4431-b1b8-07365a5390aa",
			"key": "opencell.password",
			"value": "opencell.admin"
		},
		{
			"id": "bb87e4ab-c035-49f8-8c9c-be70f9cd043b",
			"key": "opencell.superusername",
			"value": "opencell.superadmin"
		},
		{
			"id": "27f20f9c-6192-493d-9b05-6edd4194faef",
			"key": "opencell.superpassword",
			"value": "opencell.superadmin"
		},
		{
			"id": "b848442c-754c-4743-a2ed-0e616d784569",
			"key": "entityPrefix",
			"value": "RS_FULL"
		},
		{
			"id": "8260044f-301b-4afb-b159-5394dbb9b2cc",
			"key": "baseEntityPrefix",
			"value": "RS_BASE"
		},
		{
			"id": "b89b6f19-69b7-46b6-ab2c-465fc863df79",
			"key": "testCode",
			"value": "TEST"
		},
		{
			"id": "ba7e99e3-33d4-47b5-a9a8-c33dc9ea6fa5",
			"key": "testDescription",
			"value": "This is a test description"
		},
		{
			"id": "618b7c16-5b3e-4ebb-b51a-514aad91e0a4",
			"key": "timezone",
			"value": "CET"
		},
		{
			"id": "924b7879-dc9d-407e-9f86-b8f031cc1880",
			"key": "provider.code",
			"value": "DEMO"
		},
		{
			"id": "92a222e1-36d8-4b8f-a862-555e69ede1c8",
			"key": "seller.code",
			"value": "MAIN_SELLER"
		},
		{
			"id": "32283dbf-4881-4436-b79f-8aca3c21b7f2",
			"key": "template.code",
			"value": "SIMPLE"
		},
		{
			"id": "5f3979e1-06b1-441e-bb2a-bd220e714bde",
			"key": "template.label",
			"value": "Simple usage"
		},
		{
			"id": "f84d3c07-7cf2-40fc-895a-7e44b345ab85",
			"key": "project.code",
			"value": "SimpleUsage-001"
		},
		{
			"id": "854af5aa-adcf-4fdf-95d2-1a7455385d45",
			"key": "project.description",
			"value": "Simple usage offer"
		},
		{
			"id": "99624ef6-2617-4bed-950b-d17a3890bfb8",
			"key": "project.type",
			"value": "Setup"
		},
		{
			"id": "6e734d30-449d-44e0-b7db-edcc204e31ba",
			"key": "project.version",
			"value": "9.2+"
		}
	],
	"protocolProfileBehavior": {}
}
{
	"info": {
		"_postman_id": "5fbf3c5d-7919-47a6-8df8-e16173ea12ca",
		"name": "Opencell",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "API",
			"item": [
				{
					"name": "Accounting",
					"item": [
						{
							"name": "Account Code",
							"item": [
								{
									"name": "CreateOrUpdate Accounting Code SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aed6e04a-8b04-4e7d-ba44-f38cdb813d62",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULAR\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Accounting Code SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c7de863a-d2cf-46b9-ac7c-71356803c11f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.accountingCode.code).to.eql(pm.environment.get(\"testCode\"));",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.accountingCode.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode?accountingCode={{testCode}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode"
											],
											"query": [
												{
													"key": "accountingCode",
													"value": "{{testCode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Accounting Code ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "82d80291-1398-4578-8500-48c5f85e9bd1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"AccountingCode with code=\"+pm.environment.get(\"testCode\")+\" already exists.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULAR\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Accounting Code ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88773ac9-b191-4665-9d32-ad68252aa1b2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"AccountingCode with code=NOT_EXIST does not exists.\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"chartOfAccountTypeEnum\": \"ASSETS\",\r\n    \"chartOfAccountViewTypeEnum\": \"REGULAR\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Accounting Code SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bce0b611-51c2-4426-9867-c0dbe506662f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n\t\"description\": \"{{testDescription}} updated\",\r\n\t\"disabled\": false,\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULAR\",\r\n\t\"migrated\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Accounting Code SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b31a5b86-d7ce-4254-a09e-698ae9929caf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n\t\"description\": \"{{testDescription}} updated\",\r\n\t\"disabled\": false,\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULAR\",\r\n\t\"migrated\": false\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Accounting Code SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "079988b9-84c0-444c-ab79-cc4a008490cf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.accountingCode.code).to.eql(pm.environment.get(\"testCode\"));",
													"});",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.accountingCode.description).to.eql(pm.environment.get(\"testDescription\")+ \" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode?accountingCode={{testCode}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode"
											],
											"query": [
												{
													"key": "accountingCode",
													"value": "{{testCode}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Accounting Code MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "059058ef-9a46-4fdf-a1db-30df7e7b64ed",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"The following parameters are required or contain invalid values\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Accounting Code INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1afc97eb-9579-43c0-9089-68ca04edbf2b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `org.meveo.model.billing.ChartOfAccountViewTypeEnum`\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULARXX\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "OCC Template",
							"item": [
								{
									"name": "CreateOrUpdate OCC Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f048946b-afb2-483e-81ec-4839f40a7fb0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}\",\r\n  \"accountingCode\": \"{{testCode}}\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"occCategory\": \"DEBIT\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create OCC Template ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dbd1a27b-9fcb-46c2-8cee-80c318e7fbac",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"OCCTemplate with code=\"+pm.environment.get(\"testCode\")+\" already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}\",\r\n  \"accountingCode\": \"{{testCode}}\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"occCategory\": \"DEBIT\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update OCC Template ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d56834ab-96ac-4ee4-8002-f0fe5a784b4e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"OCCTemplate with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"NOT_EXIST\",\r\n  \"accountingCode\": \"{{testCode}}\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"occCategory\": \"DEBIT\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update OCC Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a6eec726-173e-4966-b228-8bb14e253d12",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}\",\r\n  \"accountingCode\": \"{{testCode}}\",\r\n  \"description\": \"{{testDescription}} updated\",\r\n  \"occCategory\": \"DEBIT\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate OCC Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba46b623-9beb-4681-b62e-2de149d4a938",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}\",\r\n  \"accountingCode\": \"{{testCode}}\",\r\n  \"description\": \"{{testDescription}} updated\",\r\n  \"occCategory\": \"DEBIT\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate OCC Template MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "32ed5c9d-5354-47d8-ac9a-050cf80f783b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: accountCode / accountingCode.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_Missing\",\r\n  \"description\": \"{{testDescription}} missing\",\r\n  \"occCategory\": \"DEBIT\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate OCC Template INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ce0c6e0a-75bc-43f7-b550-7fdf431d69ec",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `org.meveo.model.payments.OperationCategoryEnum` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}\",\r\n  \"description\": \"{{testDescription}} invalid\",\r\n  \"occCategory\": \"INVALID\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Clear Data",
							"item": [
								{
									"name": "Delete Accounting Code GENERIC_API_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8d487cb-5859-4906-a7c2-b6cfaafb76bc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"GENERIC_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"is still referenced from table\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"description\": \"123\",\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULARXX\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode/TEST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode",
												"TEST"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete OCC Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e2091918-d3b9-4809-9e45-5ae20a4b9805",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}\",\r\n  \"description\": \"{{testDescription}} invalid\",\r\n  \"occCategory\": \"INVALID\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate/{{testCode}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate",
												"{{testCode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete OCC Template FAIL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d61797d-7577-4f5c-9990-f305786a5909",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"OCCTemplate with code=\"+pm.environment.get(\"testCode\")+\" does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}\",\r\n  \"description\": \"{{testDescription}} invalid\",\r\n  \"occCategory\": \"INVALID\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/occTemplate/{{testCode}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"occTemplate",
												"{{testCode}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Accounting Code SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "07dc7be7-d638-42e8-8ae1-d8ece72bc0e4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"description\": \"123\",\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULARXX\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode/TEST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode",
												"TEST"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Accounting Code FAIL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "03f13afa-f1a4-47b5-ad07-02d9ebce4e89",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"AccountingCode with code=\"+pm.environment.get(\"testCode\")+\" does not exists.\");",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"description\": \"123\",\r\n\t\"chartOfAccountTypeEnum\": \"ASSETS\",\r\n\t\"chartOfAccountViewTypeEnum\": \"REGULARXX\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/accountingCode/TEST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"accountingCode",
												"TEST"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Accounts",
					"item": [
						{
							"name": "BillingCycle",
							"item": [
								{
									"name": "CreateOrUpdate Billing Cylcle SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "77ee5ca2-3307-422a-bc58-6079fa4cbcda",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_BC\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"billingTemplateName\": \"{{testCode}}_BTN\",\r\n  \"invoiceDateDelay\": \"0\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"transactionDateDelay\": \"0\",\r\n  \"invoicingThreshold\": 0.01,\r\n  \"calendar\": \"MONTHLY\",\r\n  \"invoiceTypeCode\": \"ADJ\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Cycle ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b8fabab-5f8c-4131-996d-869d7c7d66d0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"BillingCycle with code=\"+pm.environment.get(\"testCode\")+\"_BC already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_BC\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"billingTemplateName\": \"{{testCode}}_BTN\",\r\n  \"invoiceDateDelay\": \"0\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"transactionDateDelay\": \"0\",\r\n  \"invoicingThreshold\": 0.01,\r\n  \"calendar\": \"MONTHLY\",\r\n  \"invoiceTypeCode\": \"ADJ\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Cycle SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e592b5d-8375-42c5-bce4-ee8262e55b29",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingCycle.code).to.eql(pm.environment.get(\"testCode\")+\"_BC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingCycle.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle?billingCycleCode={{testCode}}_BC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle"
											],
											"query": [
												{
													"key": "billingCycleCode",
													"value": "{{testCode}}_BC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Cycle ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b2cd4f8-0957-4d7b-a622-b5baf691a4e1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"BillingCycle with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"NOT_EXIST\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"billingTemplateName\": \"{{testCode}}_BtN\",\r\n  \"invoiceDateDelay\": \"0\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"transactionDateDelay\": \"0\",\r\n  \"invoicingThreshold\": 0.01,\r\n  \"calendar\": \"MONTHLY\",\r\n  \"invoiceTypeCode\": \"ADJ\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Cycle SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "785ec469-e481-499d-bdac-0b8860faf638",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_BC\",\r\n  \"description\": \"{{testDescription}} updated\",\r\n  \"billingTemplateName\": \"TEST\",\r\n  \"invoiceDateDelay\": \"0\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"transactionDateDelay\": \"0\",\r\n  \"invoicingThreshold\": 0.01,\r\n  \"calendar\": \"MONTHLY\",\r\n  \"invoiceTypeCode\": \"ADJ\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Billing Cycle SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b49c0dbf-047f-4486-963c-921a243bb863",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_BC\",\r\n  \"description\": \"{{testDescription}} updated\",\r\n  \"billingTemplateName\": \"TEST\",\r\n  \"invoiceDateDelay\": \"0\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"transactionDateDelay\": \"0\",\r\n  \"invoicingThreshold\": 0.01,\r\n  \"calendar\": \"MONTHLY\",\r\n  \"invoiceTypeCode\": \"ADJ\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Cycle SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "941ed499-8c67-41e8-87ea-8ff7cfa854e0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingCycle.code).to.eql(pm.environment.get(\"testCode\")+\"_BC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingCycle.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle?billingCycleCode={{testCode}}_BC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle"
											],
											"query": [
												{
													"key": "billingCycleCode",
													"value": "{{testCode}}_BC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Billing Cycle MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "53d14393-f061-46f4-bfdc-d47ff3eddc13",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: invoiceDateDelay.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"MISSING\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"calendar\": \"MONTHLY\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Billing Cycle ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5e400a19-1269-4830-94e8-a8a989b0e7d5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Calendar with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_BC\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"invoiceDateDelay\": \"0\",\r\n  \"dueDateDelay\": \"30\",\r\n  \"invoiceDateProductionDelay\": \"0\",\r\n  \"calendar\": \"NOT_EXIST\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Seller",
							"item": [
								{
									"name": "CreateOrUpdate Seller SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cc2344ec-8804-45d1-9a8a-1212540bd8f0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"code\":\"{{testCode}}_SELLER\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"parentSeller\":\"SELLER_FR\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Seller SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "393278d7-3d99-4a38-abea-9fdb903ee4de",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Seller with code=\"+pm.environment.get(\"testCode\")+\"_SELLER already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"code\":\"{{testCode}}_SELLER\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"parentSeller\":\"SELLER_FR\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Seller SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d1b8db82-60af-4434-8e78-be96ce7f82ff",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.seller.code).to.eql(pm.environment.get(\"testCode\")+\"_SELLER\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.seller.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{testCode}}_SELLER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{testCode}}_SELLER"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Seller ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b6230a68-36cc-42bd-ab74-2fa5cb87836f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Seller with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"code\":\"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"parentSeller\":\"SELLER_FR\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Seller SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d88b76c-b3da-4fcf-adec-c48a1d589fb2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"code\":\"{{testCode}}_SELLER\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"parentSeller\":\"SELLER_FR\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Seller SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d6739ee-4894-47b2-9f8d-97e1be1fb2e1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{   \r\n    \"code\":\"{{testCode}}_SELLER\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"parentSeller\":\"SELLER_FR\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Seller SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83718a40-d3cd-4757-8940-40453c53734f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.seller.code).to.eql(pm.environment.get(\"testCode\")+\"_SELLER\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.seller.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{testCode}}_SELLER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{testCode}}_SELLER"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Seller ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "90725c08-a871-4a78-8f1b-80819572cf0e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Seller with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_SELLER\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"parentSeller\": \"NOT_EXIST\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CustomerBrand",
							"item": [
								{
									"name": "CreateOrUpdate CustomerBrand SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0cc20d11-07ff-4eef-98bf-457371cf1b39",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CB\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateBrand",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateBrand"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CustomerBrand ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "45c0fa16-c0b2-4561-9630-3b105c11e5a1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerBrand with code=\"+pm.environment.get(\"testCode\")+\"_CB already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CB\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createBrand",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createBrand"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CustomerBrand ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "167b3570-03c0-4803-b84c-8d143f537a84",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerBrand with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/updateBrand",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"updateBrand"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CustomerBrand SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "876e2de6-de98-44fd-90d9-e503664c67b3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CB\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/updateBrand",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"updateBrand"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CustomerBrand SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6436d78a-c70a-4862-8346-5595102f4182",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CB\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateBrand",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateBrand"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CustomerBrand MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c83c6b9-542a-42af-abc5-78b3e91fc1b3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateBrand",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateBrand"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Customer Category",
							"item": [
								{
									"name": "CreateOrUpdate Customer Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b792c1cf-cc94-4831-8d3e-6a62641ae7d2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read  Customer Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2ebeaf5-bdb4-4f7b-85d8-25bcb9bb1f31",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerCategory.code).to.eql(pm.environment.get(\"testCode\")+\"_CC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerCategory.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/category/{{testCode}}_CC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"category",
												"{{testCode}}_CC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Customer Category ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cc091039-546e-45f9-ba84-a0f45c431af3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerCategory with code=\"+pm.environment.get(\"testCode\")+\"_CC already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Customer Category ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d983f2e-2040-4505-b374-f3b1fc8af832",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerCategory with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/updateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"updateCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Customer Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a0d2ce80-25b0-42f6-81a4-9d2ab2944a09",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CC\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/updateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"updateCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7172814e-2c03-4230-97b8-6637ea2baa26",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CC\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Customer Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6971df5d-1926-4bdd-98f5-ed15779bc30e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerCategory.code).to.eql(pm.environment.get(\"testCode\")+\"_CC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerCategory.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/category/{{testCode}}_CC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"category",
												"{{testCode}}_CC"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer Category MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4e9fae2-4647-4d86-b6fa-e0cab0daada9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testCode}}\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer Category ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bb20db19-ded6-4663-aef6-789cef2ae2c5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"AccountingCode with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"exoneratedFromTaxes\": \"true\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\",\r\n    \"accountingCode\": \"NOT_EXIST\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer Category INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e0122efd-c8eb-49c9-8bec-38056ff2cb83",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Boolean` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"exoneratedFromTaxes\": \"INVALID\",\r\n    \"exonerationTaxEl\": \"exoneration Tax El\",\r\n    \"exonerationTaxElSpark\": \"exoneration Tax El Spark\",\r\n    \"exonerationReason\": \"exoneration Reason\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdateCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdateCategory"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Customer",
							"item": [
								{
									"name": "CreateOrUpdate Customer SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a0ce094-05c1-497d-b088-53699184b59f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Customer SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "12cb7d9e-859e-4414-baf0-4048a82231f4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.code).to.eql(pm.environment.get(\"testCode\")+\"_C\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{testCode}}_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{testCode}}_C"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Customer ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a8815f88-d2bd-4c46-9627-5a9f91262dba",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Customer with code=\"+pm.environment.get(\"testCode\")+\"_C already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Customer ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47f4277d-fe86-4f2d-ac1d-dcc6ca137fdc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Customer with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Customer SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88c89c4d-4784-4587-818b-15a1dacbd05d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "39811756-1595-41d1-b162-e05713ce738a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Customer SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6508a48a-940f-421b-b45a-862456be6b8e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.code).to.eql(pm.environment.get(\"testCode\")+\"_C\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{testCode}}_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{testCode}}_C"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22f45ff0-c649-4407-bdcb-5f4abbb204ef",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: customerCategory.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c01e3075-bd78-489d-bad7-b025ccfb5b03",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.util.Date` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateDate\": \"INVALID\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer ENTITY_DOES_NOT_EXISTS_EXCEPTION 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50a040cf-c3d2-4a1a-83f3-2c49c19a66b0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Seller with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"NOT_EXIST\",\r\n    \"mandateIdentification\": \"\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer ENTITY_DOES_NOT_EXISTS_EXCEPTION 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "19b05b14-b35b-45ed-ab0b-f8303c8279a3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerCategory with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"NOT_EXIST\",\r\n    \"customerBrand\": \"{{testCode}}_CB\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Customer ENTITY_DOES_NOT_EXISTS_EXCEPTION 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fe8a3e7a-d9f7-4bc9-9850-94f65e85eb38",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerBrand with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"{{testCode}}_CC\",\r\n    \"customerBrand\": \"NOT_EXIST\",\r\n    \"seller\": \"{{testCode}}_SELLER\",\r\n    \"mandateIdentification\": \"\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CustomerAccount",
							"item": [
								{
									"name": "CreateOrUpdate CustomerAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75ef45a7-858c-4892-869b-c1a126e97405",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CA\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read CustomerAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "593a089a-6d3e-4545-8558-9c70fba2d87e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerAccount.code).to.eql(pm.environment.get(\"testCode\")+\"_CA\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerAccount.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{testCode}}_CA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{testCode}}_CA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CustomerAccount ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9888a89-1bcd-4caf-81b0-a815334ddfbc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerAccount with code=\"+pm.environment.get(\"testCode\")+\"_CA already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CA\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CustomerAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5a72c0d6-00ab-48d9-b12a-5e9900638e0b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerAccount with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CustomerAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "448987ba-2d2c-42c5-a0f6-d5c9bbe19fc3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CA\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CustomerAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "67b05171-0131-4938-83fc-5d9852b80927",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CA\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read CustomerAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cb845600-850a-4eed-80b6-8f3899468b40",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerAccount.code).to.eql(pm.environment.get(\"testCode\")+\"_CA\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerAccount.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{testCode}}_CA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{testCode}}_CA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CustomerAccount MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3588c3d-c59a-484d-9cc6-2d89efd3c010",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: currency, language.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CA\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CustomerAccount INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e2ffb863-8495-4768-b9af-d6b5cb7a0e31",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.util.Date` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CA\",\r\n    \"customer\": \"{{testCode}}_C\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"mandateDate\": \"INVALID\"\r\n}\r\n\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CustomerAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8587fe40-90af-466f-a276-67977e860c42",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Customer with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_C\",\r\n    \"customer\": \"NOT_EXIST\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "BillingAccount",
							"item": [
								{
									"name": "CreateOrUpdate BillingAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5234d6d7-e87b-48ea-bea4-e7841174ed0a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_BA\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read BillingAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "41b4b309-bdff-46a9-b5d8-4388d26c9e68",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingAccount.code).to.eql(pm.environment.get(\"testCode\")+\"_BA\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingAccount.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{testCode}}_BA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{testCode}}_BA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create BillingAccount ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ccd6aed0-9107-4519-9a2f-6b26bbb41ef4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"BillingAccount with code=\"+pm.environment.get(\"testCode\")+\"_BA already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_BA\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update BillingAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c21d5f2-2a16-426c-a7ae-8c1b282e0636",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"BillingAccount with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update BillingAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d4aa11ad-8429-465e-adc7-123b697262d2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_BA\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update BillingAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "df14e72a-2c1c-4b14-b3de-33565d68d145",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_BA\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read BillingAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf13f40c-dc64-4720-b253-73c7a6510db5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingAccount.code).to.eql(pm.environment.get(\"testCode\")+\"_BA\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingAccount.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{testCode}}_BA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{testCode}}_BA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate BillingAccount MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e81901c6-d75e-4361-92e6-0d4400ac1722",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: country, language.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"MISSING\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate BillingAccount INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "279a4b7b-0e9a-4a30-90ea-a8adef4b3832",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.util.Date` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_BA\",\r\n    \"customerAccount\": \"{{testCode}}_CA\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\",\r\n    \"subscriptionDate\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate BillingAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f3c90088-5389-4cf5-90e9-08a679afa59d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerAccount with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_BA\",\r\n    \"customerAccount\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"billingCycle\": \"{{testCode}}_BC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "UserAccount",
							"item": [
								{
									"name": "CreateOrUpdate UserAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8608b475-3b19-473e-b16a-b29caa204998",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{testCode}}_UA\",\r\n\t\"description\" : \"{{testDescription}}\",\r\n\t\"billingAccount\": \"{{testCode}}_BA\",\r\n\t\"terminationReason\": \"TR_NONE\",\r\n\t\"terminationDate\": \"2018-09-14\",\r\n\t\"status\": \"ACTIVE\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read UserAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "03068449-a402-4b1a-93fb-8e8a1ba79a99",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.userAccount.code).to.eql(pm.environment.get(\"testCode\")+\"_UA\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.userAccount.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{testCode}}_UA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{testCode}}_UA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create UserAccount ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1ca9750a-58a5-463d-8cc4-2e0b671d2521",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"UserAccount with code=\"+pm.environment.get(\"testCode\")+\"_UA already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{testCode}}_UA\",\r\n\t\"description\" : \"{{testDescription}}\",\r\n\t\"billingAccount\": \"{{testCode}}_BA\",\r\n\t\"terminationReason\": \"TR_NONE\",\r\n\t\"terminationDate\": \"2018-09-14\",\r\n\t\"status\": \"ACTIVE\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update UserAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d092c3cc-2ded-4247-8240-875df98713cf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"UserAccount with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"NOT_EXIST\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"billingAccount\": \"{{testCode}}_BA\",\r\n\t\"terminationReason\": \"TR_NONE\",\r\n\t\"terminationDate\": \"2018-09-14\",\r\n\t\"status\": \"ACTIVE\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update UserAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "118564c6-e3c5-43c0-9a8a-e3a8152e7825",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{testCode}}_UA\",\r\n\t\"description\": \"{{testDescription}} updated\",\r\n\t\"billingAccount\": \"{{testCode}}_BA\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate UserAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1cc184d7-ef72-442f-b81f-6a1020ab2056",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{testCode}}_UA\",\r\n\t\"description\": \"{{testDescription}} updated\",\r\n\t\"billingAccount\": \"{{testCode}}_BA\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read UserAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "45f0d4a6-7bb5-422c-82ab-5a62fe077c13",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.userAccount.code).to.eql(pm.environment.get(\"testCode\")+\"_UA\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.userAccount.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{testCode}}_UA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{testCode}}_UA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate UserAccount MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fcdcf9fc-b39c-4cb4-ae42-e464ec09a1c4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: billingAccount.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n\t\"code\": \"MISSING\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate UserAccount INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6da398f6-c1d2-4be8-9e78-18d591724609",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `org.meveo.model.billing.AccountStatusEnum` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n\t\"code\": \"{{testCode}}_UA\", \r\n\t\"billingAccount\":\"{{testCode}}_BA\",\r\n\t\"terminationReason\":\"TR\",\r\n\t\"terminationDate\":\"2018-09-14\",\r\n\t\"status\" : \"INVALID\" \r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate UserAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f6dd1842-b760-4813-b9f7-970df47cfadd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"BillingAccount with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n\t\"code\": \"{{testCode}}_UA\", \r\n\t\"billingAccount\":\"NOT_EXIST\",\r\n\t\"terminationReason\":\"TR\",\r\n\t\"terminationDate\":\"2018-09-14\",\r\n\t\"status\" : \"ACTIVE\" \r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Provider Contact",
							"item": [
								{
									"name": "CreateOrUpdate Provider Contact SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9bba1be7-bda1-44f4-aeca-b4646bab371d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Provider Contact SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b4d58dd3-c092-4a4c-afef-516cf6de189d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.providerContact.code).to.eql(pm.environment.get(\"testCode\")+\"_PC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.providerContact.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact?providerContactCode={{testCode}}_PC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact"
											],
											"query": [
												{
													"key": "providerContactCode",
													"value": "{{testCode}}_PC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Provider Contact ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9408619b-cf45-44fb-b2be-0ed6950fdd32",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ProviderContact with code=\"+pm.environment.get(\"testCode\")+\"_PC already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Provider Contact ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f129674f-0214-4bc5-b12d-ee5c3ec69c3c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ProviderContact with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Provider Contact SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e5e51ec4-0c91-47b2-a227-ac7323f8b713",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Provider Contact SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "588980b3-bc9f-42cf-8a06-dc39f88a554f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Provider Contact SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "43d8ab11-d009-4c36-b455-2f2ae2b4e0ef",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.providerContact.code).to.eql(pm.environment.get(\"testCode\")+\"_PC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.providerContact.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact?providerContactCode={{testCode}}_PC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact"
											],
											"query": [
												{
													"key": "providerContactCode",
													"value": "{{testCode}}_PC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Provider Contact MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a276505a-36a3-452b-bbc8-8b8c95cbd770",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: description.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Provider Contact INTERNAL_SERVER_ERROR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31985756-fb55-4b7e-b986-049977ad70fa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"At least 1 of the field in Contact Information tab is required [email, genericEmail, phone, mobile].\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Provider Contact INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a29fd791-08f9-4bcf-8a61-4304c1a1e427",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot construct instance of `org.meveo.api.dto.account.AddressDto`\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"firstName\": \"Ben\",\r\n    \"lastName\": \"Ohara\",\r\n    \"phone\": \"0123456789\",\r\n    \"mobile\": \"0123456789\",\r\n    \"fax\": \"0123456789\",\r\n    \"email\": \"ben.ohara@opencellsoft.com\",\r\n    \"genericMail\": \"ben.ohara@opencellsoft.com\",\r\n    \"addressDto\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Provider Contact SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e203a622-32fa-4909-a63a-bbfe4ae4ddd4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact/{{testCode}}_PC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact",
												"{{testCode}}_PC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Provider Contact ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6115bb06-7472-4e76-b504-50796a1d4c45",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ProviderContact with code=\"+pm.environment.get(\"testCode\")+\"_PC does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/providerContact/{{testCode}}_PC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"providerContact",
												"{{testCode}}_PC"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Account Hierarchy",
							"item": [
								{
									"name": "CreateOrUpdate Account Hierarchy SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e44211aa-9851-481c-a936-8a849a3d022c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"email\": \"test@test.com\",\r\n\t\"customerCode\": \"{{testCode}}_CH\",\r\n\t\"sellerCode\": \"{{testCode}}_SELLER\",\r\n\t\"customerBrandCode\": \"{{testCode}}_CB\",\r\n\t\"customerCategoryCode\": \"{{testCode}}_CC\",\r\n\t\"currencyCode\": \"USD\",\r\n\t\"countryCode\": \"US\",\r\n\t\"languageCode\": \"ENG\",\r\n\t\"billingCycleCode\": \"{{testCode}}_BC\",\r\n\t\"titleCode\": \"MR\",\r\n\t\"firstName\": \"created\",\r\n\t\"lastName\": \"TEST\",\r\n\t\"phoneNumber\": \"+102354749\",\r\n\t\"address1\": \"Address1\",\r\n\t\"address2\": \"Address2\",\r\n\t\"zipCode\": \"4050\",\r\n\t\"city\": \"Los Banos\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Account Hierarchy SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ffb5fe8d-fadc-4176-a25a-0cd5c246be68",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.code).to.eql(pm.environment.get(\"testCode\")+\"_CH\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.name.firstName).to.eql(\"created\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{testCode}}_CH",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{testCode}}_CH"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Account Hierarchy ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5fbe5ab-dd96-4415-be18-0ed867c2134e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Customer with code=\"+pm.environment.get(\"testCode\")+\"_CH already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"email\": \"test@test.com\",\r\n\t\"customerCode\": \"{{testCode}}_CH\",\r\n\t\"sellerCode\": \"{{testCode}}_SELLER\",\r\n\t\"customerBrandCode\": \"{{testCode}}_CB\",\r\n\t\"customerCategoryCode\": \"{{testCode}}_CC\",\r\n\t\"currencyCode\": \"USD\",\r\n\t\"countryCode\": \"US\",\r\n\t\"languageCode\": \"ENG\",\r\n\t\"billingCycleCode\": \"{{testCode}}_BC\",\r\n\t\"titleCode\": \"MR\",\r\n\t\"firstName\": \"created\",\r\n\t\"lastName\": \"TEST\",\r\n\t\"phoneNumber\": \"+102354749\",\r\n\t\"address1\": \"Address1\",\r\n\t\"address2\": \"Address2\",\r\n\t\"zipCode\": \"4050\",\r\n\t\"city\": \"Los Banos\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Account Hierarchy ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "11401459-116b-4e9b-a8c1-b7dbdcbd9e50",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Customer with code='NOT_EXIST' does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"customerCode\": \"NOT_EXIST\",\r\n    \"sellerCode\": \"{{testCode}}_SELLER\",\r\n    \"customerBrandCode\": \"{{testCode}}_CB\",\r\n    \"customerCategoryCode\": \"{{testCode}}_CC\",\r\n    \"currencyCode\": \"USD\",\r\n    \"countryCode\": \"US\",\r\n    \"languageCode\": \"ENG\",\r\n    \"billingCycleCode\": \"{{testCode}}_BC\",\r\n    \"titleCode\": \"MR\",\r\n    \"firstName\": \"updated\",\r\n    \"lastName\": \"TEST\",\r\n    \"phoneNumber\": \"+102354749\",\r\n    \"address1\": \"Address1\",\r\n    \"address2\": \"Address2\",\r\n    \"zipCode\": \"4050\",\r\n    \"city\": \"Los Banos\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Account Hierarchy SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "df865173-af3f-4588-9f22-a61c5c43da26",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"customerCode\": \"{{testCode}}_CH\",\r\n    \"sellerCode\": \"{{testCode}}_SELLER\",\r\n    \"customerBrandCode\": \"{{testCode}}_CB\",\r\n    \"customerCategoryCode\": \"{{testCode}}_CC\",\r\n    \"currencyCode\": \"USD\",\r\n    \"countryCode\": \"US\",\r\n    \"languageCode\": \"ENG\",\r\n    \"billingCycleCode\": \"{{testCode}}_BC\",\r\n    \"titleCode\": \"MR\",\r\n    \"firstName\": \"updated\",\r\n    \"lastName\": \"TEST\",\r\n    \"phoneNumber\": \"+102354749\",\r\n    \"address1\": \"Address1\",\r\n    \"address2\": \"Address2\",\r\n    \"zipCode\": \"4050\",\r\n    \"city\": \"Los Banos\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Account Hierarchy SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d6acf483-7765-4f9e-91c4-1ef252f6ac24",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"customerCode\": \"{{testCode}}_CH\",\r\n    \"sellerCode\": \"SELLER_US\",\r\n    \"customerBrandCode\": \"{{testCode}}_CB\",\r\n    \"customerCategoryCode\": \"{{testCode}}_CC\",\r\n    \"currencyCode\": \"USD\",\r\n    \"countryCode\": \"US\",\r\n    \"languageCode\": \"ENG\",\r\n    \"billingCycleCode\": \"{{testCode}}_BC\",\r\n    \"titleCode\": \"MR\",\r\n    \"firstName\": \"updated\",\r\n    \"lastName\": \"TEST\",\r\n    \"phoneNumber\": \"+102354749\",\r\n    \"address1\": \"Address1\",\r\n    \"address2\": \"Address2\",\r\n    \"zipCode\": \"4050\",\r\n    \"city\": \"Los Banos\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Account Hierarchy SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd6f177d-7e1c-4304-8d8c-2209d7eee0e8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.code).to.eql(pm.environment.get(\"testCode\")+\"_CH\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customer.name.firstName).to.eql(\"updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{testCode}}_CH",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{testCode}}_CH"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Account Hierarchy MISSING_PARAMETER 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "17882d13-a625-4711-9564-ec97311f1511",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: customerCode, customerCategoryCode, sellerCode, currencyCode, countryCode, billingCycleCode, languageCode, email.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Account Hierarchy MISSING_PARAMETER 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ee3f2b9-4078-40b2-83ec-6ff32d5ba4de",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: customerCategoryCode, sellerCode, currencyCode, countryCode, billingCycleCode, languageCode, email.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"customerCode\": \"{{testCode}}_CH\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Account Hierarchy ENTITY_DOES_NOT_EXISTS_EXCEPTION 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ddb58bd-3a2b-4d61-a53a-c8d1e49a7979",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Currency with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"customerCode\": \"{{testCode}}_CH\",\r\n    \"sellerCode\": \"{{testCode}}_SELLER\",\r\n    \"customerBrandCode\": \"{{testCode}}_CB\",\r\n    \"customerCategoryCode\": \"{{testCode}}_CC\",\r\n    \"currencyCode\": \"NOT_EXIST\",\r\n    \"countryCode\": \"US\",\r\n    \"languageCode\": \"ENG\",\r\n    \"billingCycleCode\": \"{{testCode}}_BC\",\r\n    \"titleCode\": \"MR\",\r\n    \"firstName\": \"created\",\r\n    \"lastName\": \"TEST\",\r\n    \"phoneNumber\": \"+102354749\",\r\n    \"address1\": \"Address1\",\r\n    \"address2\": \"Address2\",\r\n    \"zipCode\": \"4050\",\r\n    \"city\": \"Los Banos\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Account Hierarchy ENTITY_DOES_NOT_EXISTS_EXCEPTION 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5736d804-8e4c-496c-94c7-0d3a831f7eb9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Seller with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"customerCode\": \"{{testCode}}_CH\",\r\n    \"sellerCode\": \"NOT_EXIST\",\r\n    \"customerBrandCode\": \"{{testCode}}_CB\",\r\n    \"customerCategoryCode\": \"{{testCode}}_CC\",\r\n    \"currencyCode\": \"USD\",\r\n    \"countryCode\": \"US\",\r\n    \"languageCode\": \"ENG\",\r\n    \"billingCycleCode\": \"{{testCode}}_BC\",\r\n    \"titleCode\": \"MR\",\r\n    \"firstName\": \"created\",\r\n    \"lastName\": \"TEST\",\r\n    \"phoneNumber\": \"+102354749\",\r\n    \"address1\": \"Address1\",\r\n    \"address2\": \"Address2\",\r\n    \"zipCode\": \"4050\",\r\n    \"city\": \"Los Banos\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Account Hierarchy INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f03eb979-ae9b-4540-9f2a-2651d3955e52",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.util.Date` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"email\": \"test@test.com\",\r\n    \"customerCode\": \"{{testCode}}_CH\",\r\n    \"sellerCode\": \"{{testCode}}_SELLER\",\r\n    \"customerBrandCode\": \"{{testCode}}_BC\",\r\n    \"customerCategoryCode\": \"{{testCode}}_CC\",\r\n    \"currencyCode\": \"USD\",\r\n    \"countryCode\": \"US\",\r\n    \"languageCode\": \"ENG\",\r\n    \"billingCycleCode\": \"{{testCode}}_BC\",\r\n    \"titleCode\": \"MR\",\r\n    \"firstName\": \"created\",\r\n    \"lastName\": \"TEST\",\r\n    \"phoneNumber\": \"+102354749\",\r\n    \"address1\": \"Address1\",\r\n    \"address2\": \"Address2\",\r\n    \"zipCode\": \"4050\",\r\n    \"city\": \"Los Banos\",\r\n    \"birthDate\": \"INVALID\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Account Hierarchy SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0c06c236-d880-452d-b645-6ebba692068e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/{{testCode}}_CH",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"{{testCode}}_CH"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Provider Contact ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f9f102eb-0f8e-4d3d-a9ab-168ec044b938",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Customer with code=\"+pm.environment.get(\"testCode\")+\"_CH does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/{{testCode}}_CH",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"{{testCode}}_CH"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Clear Data",
							"item": [
								{
									"name": "Delete UserAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "72c58966-d6f0-49d0-ba47-fe41abcd8c52",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/{{testCode}}_UA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"{{testCode}}_UA"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete UserAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1708fe4c-3042-4296-bfd0-105d33fb5e30",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"UserAccount with code=\"+pm.environment.get(\"testCode\")+\"_UA does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/{{testCode}}_UA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"{{testCode}}_UA"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CustomerBrand  DELETE_REFERENCED_ENTITY_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7113cb1d-52e8-497b-aafa-2763de239387",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"DELETE_REFERENCED_ENTITY_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerBrand with code=\"+pm.environment.get(\"testCode\")+\"_CB is referenced.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/removeBrand/{{testCode}}_CB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"removeBrand",
												"{{testCode}}_CB"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete BillingAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c651b43-6ea6-4e63-b315-afb9075345ef",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/{{testCode}}_BA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"{{testCode}}_BA"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete BillingAccount  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50d13946-3cdb-4e32-8db4-30002b681b1c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"BillingAccount with code=\"+pm.environment.get(\"testCode\")+\"_BA does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/{{testCode}}_BA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"{{testCode}}_BA"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CustomerAccount SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf710f96-1dd5-49cd-b26c-c945710b7382",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/{{testCode}}_CA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"{{testCode}}_CA"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CustomerAccount ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84c1cda2-efe7-4959-a0e3-8224ec272f5e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerAccount with code=\"+pm.environment.get(\"testCode\")+\"_CA does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"CLASSIC\",\r\n    \"seller\": \"CLASSIC\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/{{testCode}}_CA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"{{testCode}}_CA"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Customer SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9083df55-f3d6-4f3e-a450-3174ab546ba8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/{{testCode}}_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"{{testCode}}_C"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Customer ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56215f8c-cd25-49e5-9da8-8726b3b45faa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Customer with code=\"+pm.environment.get(\"testCode\")+\"_C does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"CLASSIC\",\r\n    \"seller\": \"CLASSIC\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/{{testCode}}_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"{{testCode}}_C"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Seller SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "40d21b07-e592-4522-a412-307fe31e85fc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/{{testCode}}_SELLER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"{{testCode}}_SELLER"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Seller ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c7773b39-1a07-4f73-bbbd-8c647f4b3fdc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Seller with code=\"+pm.environment.get(\"testCode\")+\"_SELLER does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"CLASSIC\",\r\n    \"seller\": \"CLASSIC\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/{{testCode}}_SELLER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"{{testCode}}_SELLER"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Billing Cycle SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ce369a7f-0f29-452d-b5a9-64c1e81c91e3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/{{testCode}}_BC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"{{testCode}}_BC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Billing Cycle ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9c25f96e-77d4-4987-a54e-73c8e8023952",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"BillingCycle with code=\"+pm.environment.get(\"testCode\")+\"_BC does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Ben\",\r\n        \"lastName\": \"Ohara\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"14 rue Crespin du Gast\",\r\n        \"address2\": null,\r\n        \"address3\": null,\r\n        \"zipCode\": \"75011\",\r\n        \"city\": \"PARIS\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris Area\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"ben.ohara@opencellsoft.com\",\r\n        \"phone\": null,\r\n        \"mobile\": null,\r\n        \"fax\": null\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"CLASSIC\",\r\n    \"seller\": \"CLASSIC\",\r\n    \"mandateIdentification\": \"\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/{{testCode}}_BC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"{{testCode}}_BC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CustomerBrand  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9559b866-1c37-4db8-a55f-bd6ad3ccefcb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/removeBrand/{{testCode}}_CB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"removeBrand",
												"{{testCode}}_CB"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CustomerBrand  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3284f420-cbc5-430e-a095-807a5a0aef5b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CustomerBrand with code=\"+pm.environment.get(\"testCode\")+\"_CB does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/removeBrand/{{testCode}}_CB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"removeBrand",
												"{{testCode}}_CB"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Administration",
					"item": [
						{
							"name": "Module",
							"item": [
								{
									"name": "CreateOrUpdate Module SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2945bffc-c8e1-4fed-acfc-ff254d1ee56d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{testCode}}_MOD\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"license\": \"COM\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Module SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f278e06-c52a-4b02-88b0-d5329831c1a3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.module.code).to.eql(pm.environment.get(\"testCode\")+\"_MOD\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.module.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module?code={{testCode}}_MOD",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module"
											],
											"query": [
												{
													"key": "code",
													"value": "{{testCode}}_MOD"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Module ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b8d9ec94-80ed-48ee-8296-754626f24ef2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"MeveoModule with code=\"+pm.environment.get(\"testCode\")+\"_MOD already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{testCode}}_MOD\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"license\": \"COM\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Module ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae843061-f053-4ca7-b9fc-2ec7fd4ee99b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"MeveoModule with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"NOT_EXIST\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"license\": \"COM\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Module SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3b4cbe0b-b41f-4a7d-ae46-0c4a040fe1c1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_MOD\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"license\": \"COM\",\r\n    \"moduleItems\": [\r\n        {\r\n            \"script\": {\r\n                \"code\": \"org.meveo.service.script.SaveIngenicoCardScript\",\r\n                \"description\": \"Save Ingenico Card\",\r\n                \"script\": \"package org.meveo.service.script;\\\\r\\\\n\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.Client;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.RequestHeader;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.PaymentResponse;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.CardPaymentMethodSpecificOutput;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.PaymentOutput;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.PaymentReferences;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.PaymentStatusOutput;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.token.TokenResponse;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.webhooks.WebhooksEvent;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.InMemorySecretKeyStore;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.SignatureValidationException;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.Webhooks;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.WebhooksHelper;\\\\r\\\\nimport org.apache.commons.collections4.MapUtils;\\\\r\\\\nimport org.json.simple.JSONObject;\\\\r\\\\nimport org.json.simple.parser.JSONParser;\\\\r\\\\nimport org.json.simple.parser.ParseException;\\\\r\\\\nimport org.meveo.admin.exception.BusinessException;\\\\r\\\\nimport org.meveo.commons.utils.StringUtils;\\\\r\\\\nimport org.meveo.model.notification.InboundRequest;\\\\r\\\\nimport org.meveo.model.payments.CardPaymentMethod;\\\\r\\\\nimport org.meveo.model.payments.CreditCardTypeEnum;\\\\r\\\\nimport org.meveo.model.payments.CustomerAccount;\\\\r\\\\nimport org.meveo.model.payments.PaymentGateway;\\\\r\\\\nimport org.meveo.service.payments.impl.CustomerAccountService;\\\\r\\\\nimport org.meveo.service.payments.impl.PaymentGatewayService;\\\\r\\\\nimport org.meveo.service.payments.impl.PaymentMethodService;\\\\r\\\\nimport org.slf4j.Logger;\\\\r\\\\nimport org.slf4j.LoggerFactory;\\\\r\\\\n\\\\r\\\\nimport java.util.ArrayList;\\\\r\\\\nimport java.util.HashMap;\\\\r\\\\nimport java.util.List;\\\\r\\\\nimport java.util.Map;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n *\\\\r\\\\n * @author Mounir Bahije\\\\r\\\\n *\\\\r\\\\n *         Script executed to save card enrolled with Ingenico Hosted Checkout\\\\r\\\\n *\\\\r\\\\n */\\\\r\\\\npublic class SaveIngenicoCardScript extends Script {\\\\r\\\\n\\\\r\\\\n    private final static Logger log = LoggerFactory.getLogger(SaveIngenicoCardScript.class);\\\\r\\\\n\\\\r\\\\n    private PaymentMethodService paymentMethodService = (PaymentMethodService) getServiceInterface(\\\\\\\"PaymentMethodService\\\\\\\");\\\\r\\\\n    private CustomerAccountService customerAccountService = (CustomerAccountService) getServiceInterface(\\\\\\\"CustomerAccountService\\\\\\\");\\\\r\\\\n    private PaymentGatewayService paymentGatewayService = (PaymentGatewayService) getServiceInterface(\\\\\\\"PaymentGatewayService\\\\\\\");\\\\r\\\\n\\\\r\\\\n    @Override\\\\r\\\\n    public void execute(Map<String, Object> methodContext) throws BusinessException {\\\\r\\\\n\\\\r\\\\n        String verification = \\\\\\\"\\\\\\\";\\\\r\\\\n        InboundRequest inReq = (InboundRequest) methodContext.get(\\\\\\\"event\\\\\\\");\\\\r\\\\n\\\\r\\\\n        if (\\\\\\\"GET\\\\\\\".equalsIgnoreCase(inReq.getMethod())) {\\\\r\\\\n\\\\r\\\\n            String body = inReq.getBody();\\\\r\\\\n            Map<String, String> headers = inReq.getHeaders();\\\\r\\\\n            for (String headerKey : headers.keySet()) {\\\\r\\\\n                if (\\\\\\\"X-GCS-Webhooks-Endpoint-Verification\\\\\\\".equalsIgnoreCase(headerKey)) {\\\\r\\\\n                    String headerValue = headers.get(headerKey);\\\\r\\\\n                    verification = headerValue;\\\\r\\\\n                    inReq.setResponseBody(verification);\\\\r\\\\n                }\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n\\\\r\\\\n        if (\\\\\\\"POST\\\\\\\".equalsIgnoreCase(inReq.getMethod())) {\\\\r\\\\n\\\\r\\\\n            final String reqBody = inReq.getBody();\\\\r\\\\n\\\\r\\\\n            List<RequestHeader> requestHeaders = getWebhookRequestHeaders(inReq.getHeaders());\\\\r\\\\n            String webhooksKeyId = this.getHeaderValue(requestHeaders, \\\\\\\"X-GCS-KeyId\\\\\\\");\\\\r\\\\n\\\\r\\\\n            InMemorySecretKeyStore keyStore = InMemorySecretKeyStore.INSTANCE;\\\\r\\\\n            keyStore.storeSecretKey(webhooksKeyId, getWebhookSecretKey(webhooksKeyId));\\\\r\\\\n\\\\r\\\\n            WebhooksHelper helper = Webhooks.createHelper(keyStore);\\\\r\\\\n            WebhooksEvent webhooksEvent = helper.unmarshal(reqBody, requestHeaders);\\\\r\\\\n\\\\r\\\\n            PaymentResponse payment = webhooksEvent.getPayment();\\\\r\\\\n            if (payment == null) {\\\\r\\\\n                throw new BusinessException(String.format(\\\\\\\"PaymentResponse not found on webhooksEvent : [%s]\\\\\\\", webhooksEvent));\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n            PaymentOutput paymentOutput = payment.getPaymentOutput();\\\\r\\\\n            if (paymentOutput == null) {\\\\r\\\\n                throw new BusinessException(String.format(\\\\\\\"PaymentOutput not found on webhooksEvent.payment : [%s]\\\\\\\", payment));\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n            PaymentReferences paymentReferences = paymentOutput.getReferences();\\\\r\\\\n            if (paymentReferences == null) {\\\\r\\\\n                throw new BusinessException(String.format(\\\\\\\"paymentReferences not found on webhooksEvent.payment.paymentOutput : [%s]\\\\\\\", paymentOutput));\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n            String merchantReference = paymentReferences.getMerchantReference();\\\\r\\\\n\\\\r\\\\n            if (merchantReference.lastIndexOf(\\\\\\\"_-_\\\\\\\") >= 0) {\\\\r\\\\n\\\\r\\\\n                String longIdCA = merchantReference.substring(merchantReference.lastIndexOf(\\\\\\\"_-_\\\\\\\") + 3);\\\\r\\\\n                CustomerAccount ca = customerAccountService.findById(Long.valueOf(longIdCA));\\\\r\\\\n\\\\r\\\\n                PaymentGateway paymentGateway = paymentGatewayService.getPaymentGateway(ca, null, null);\\\\r\\\\n\\\\r\\\\n                if (paymentGateway == null) {\\\\r\\\\n                    throw new BusinessException(\\\\\\\"paymentGateway is null\\\\\\\");\\\\r\\\\n                }\\\\r\\\\n\\\\r\\\\n                if (!webhooksKeyId.equals(paymentGateway.getWebhooksKeyId())) {\\\\r\\\\n                    throw new BusinessException(\\\\\\\"paymentGateway is not the good one\\\\\\\");\\\\r\\\\n                }\\\\r\\\\n\\\\r\\\\n                String status = payment.getStatus();\\\\r\\\\n                if (\\\\\\\"PENDING_CAPTURE\\\\\\\".equalsIgnoreCase(status)) {\\\\r\\\\n                    PaymentStatusOutput paymentStatusOutput = payment.getStatusOutput();\\\\r\\\\n                    if (paymentStatusOutput == null) {\\\\r\\\\n                        throw new BusinessException(String.format(\\\\\\\"paymentStatusOutput not found on webhooksEvent.payment : [%s]\\\\\\\", payment));\\\\r\\\\n                    }\\\\r\\\\n                    Boolean isAuthorized = paymentStatusOutput.getIsAuthorized();\\\\r\\\\n\\\\r\\\\n                    if (isAuthorized) {\\\\r\\\\n\\\\r\\\\n                        CardPaymentMethodSpecificOutput cardPaymentMethodSpecificOutput = paymentOutput.getCardPaymentMethodSpecificOutput();\\\\r\\\\n                        if (cardPaymentMethodSpecificOutput == null) {\\\\r\\\\n                            throw new BusinessException(String.format(\\\\\\\"cardPaymentMethodSpecificOutput not found on webhooksEvent.payment.paymentOutput : [%s]\\\\\\\", paymentOutput));\\\\r\\\\n                        }\\\\r\\\\n                        Long paymentProductId = Long.valueOf(cardPaymentMethodSpecificOutput.getPaymentProductId());\\\\r\\\\n\\\\r\\\\n                        JSONParser jsonParser = new JSONParser();\\\\r\\\\n                        JSONObject obj = null;\\\\r\\\\n                        try {\\\\r\\\\n                            obj = (JSONObject) jsonParser.parse(reqBody);\\\\r\\\\n                        } catch (ParseException e) {\\\\r\\\\n                            e.printStackTrace();\\\\r\\\\n                        }\\\\r\\\\n\\\\r\\\\n                        String tokenId = (String) ((JSONObject) ((JSONObject) ((JSONObject) obj.get(\\\\\\\"payment\\\\\\\")).get(\\\\\\\"paymentOutput\\\\\\\")).get(\\\\\\\"cardPaymentMethodSpecificOutput\\\\\\\")).get(\\\\\\\"token\\\\\\\");\\\\r\\\\n                        if (StringUtils.isBlank(tokenId)) {\\\\r\\\\n                            throw new BusinessException(String.format(\\\\\\\"tokenId not found on webhooksEvent.payment.paymentOutput.cardPaymentMethodSpecificOutput : [%s]\\\\\\\", cardPaymentMethodSpecificOutput));\\\\r\\\\n                        }\\\\r\\\\n\\\\r\\\\n                        String merchantId = webhooksEvent.getMerchantId();\\\\r\\\\n\\\\r\\\\n                        try {\\\\r\\\\n\\\\r\\\\n                            CreditCardTypeEnum cardType = fromId(Long.valueOf(paymentProductId).intValue());\\\\r\\\\n\\\\r\\\\n                            Client client = (Client) paymentMethodService.getClient(Long.valueOf(longIdCA));\\\\r\\\\n\\\\r\\\\n                            TokenResponse response = client.merchant(merchantId).tokens().get(tokenId);\\\\r\\\\n\\\\r\\\\n                            String cardNumber = response.getCard().getData().getCardWithoutCvv().getCardNumber();\\\\r\\\\n                            String expiryDate = response.getCard().getData().getCardWithoutCvv().getExpiryDate();\\\\r\\\\n                            String ownerName = response.getCard().getData().getCardWithoutCvv().getCardholderName();\\\\r\\\\n                            CardPaymentMethod paymentMethod = new CardPaymentMethod();\\\\r\\\\n                            paymentMethod.setCardNumber(cardNumber);\\\\r\\\\n                            paymentMethod.setCardType(cardType);\\\\r\\\\n                            paymentMethod.setCustomerAccount(ca);\\\\r\\\\n                            paymentMethod.setPreferred(true);\\\\r\\\\n                            paymentMethod.setMonthExpiration(new Integer(expiryDate.substring(0, 2)));\\\\r\\\\n                            paymentMethod.setYearExpiration(new Integer(expiryDate.substring(2, 4)));\\\\r\\\\n                            paymentMethod.setOwner(ownerName);\\\\r\\\\n                            paymentMethod.setTokenId(tokenId);\\\\r\\\\n                            paymentMethod.setHiddenCardNumber(CardPaymentMethod.hideCardNumber(cardNumber));\\\\r\\\\n                            if (!paymentMethodService.cardTokenExist(paymentMethod)) {\\\\r\\\\n                                paymentMethodService.create(paymentMethod);\\\\r\\\\n                            }\\\\r\\\\n                        } catch (Exception e) {\\\\r\\\\n                            throw new BusinessException(\\\\\\\"Error on SaveIngenicoCardScript : \\\\\\\" + e.getMessage());\\\\r\\\\n                        }\\\\r\\\\n                    }\\\\r\\\\n                }\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private CreditCardTypeEnum fromId(Integer id) {\\\\r\\\\n        for (CreditCardTypeEnum es : CreditCardTypeEnum.values()) {\\\\r\\\\n            if (es.getId().equals(id)) {\\\\r\\\\n                return es;\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n        throw new IllegalArgumentException();\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private List<RequestHeader> getWebhookRequestHeaders(Map<String, String> headers) {\\\\r\\\\n        List<RequestHeader> webhookHeaders = new ArrayList<>();\\\\r\\\\n        if (MapUtils.isNotEmpty(headers)) {\\\\r\\\\n            headers.forEach((key, value) -> webhookHeaders.add(new RequestHeader(key, value)) );\\\\r\\\\n        }\\\\r\\\\n        return webhookHeaders;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private String getHeaderValue(List<RequestHeader> requestHeaders, String headerName) {\\\\r\\\\n        String value = null;\\\\r\\\\n        for (RequestHeader header : requestHeaders) {\\\\r\\\\n            if (headerName.equalsIgnoreCase(header.getName())) {\\\\r\\\\n                if (value == null) {\\\\r\\\\n                    value = header.getValue();\\\\r\\\\n                } else {\\\\r\\\\n                    throw new SignatureValidationException(\\\\\\\"enocuntered multiple occurrences of header '\\\\\\\" + headerName + \\\\\\\"'\\\\\\\");\\\\r\\\\n                }\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n        if (value == null) {\\\\r\\\\n            throw new SignatureValidationException(\\\\\\\"could not find header '\\\\\\\" + headerName + \\\\\\\"'\\\\\\\");\\\\r\\\\n        }\\\\r\\\\n        return value;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private String getWebhookSecretKey(String webhooksKeyId) throws BusinessException {\\\\r\\\\n        try {\\\\r\\\\n            String query = \\\\\\\"select pg.webhooksSecretKey from PaymentGateway pg where pg.webhooksKeyId=:webhooksKeyId\\\\\\\";\\\\r\\\\n            Map<String, Object> queryParams = new HashMap<>();\\\\r\\\\n            queryParams.put(\\\\\\\"webhooksKeyId\\\\\\\", webhooksKeyId);\\\\r\\\\n            Object result = paymentGatewayService.executeSelectQuery(query, queryParams);\\\\r\\\\n            return ((List<String>)result).get(0);\\\\r\\\\n        } catch (Exception e) {\\\\r\\\\n            throw new BusinessException(String.format(\\\\\\\"Error on getWebhookSecretKey for webhooksKeyId = [%s]\\\\\\\", webhooksKeyId));\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n}\",\r\n                \"type\": \"JAVA\"\r\n            }\r\n        },\r\n        {\r\n            \"notification\": {\r\n                \"updatedCode\": null,\r\n                \"code\": \"SaveIngenicoCardInbound\",\r\n                \"classNameFilter\": \"org.meveo.model.notification.InboundRequest\",\r\n                \"eventTypeFilter\": \"INBOUND_REQ\",\r\n                \"elFilter\": \"#{event.pathInfo.endsWith(\\\\\\\"/ingenico/saveCard\\\\\\\")}\",\r\n                \"scriptInstanceCode\": \"org.meveo.service.script.SaveIngenicoCardScript\",\r\n                \"scriptParams\": {\r\n                    \"event\": \"#{event}\"\r\n                },\r\n                \"counterTemplate\": null\r\n            }\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Module SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ca1cb0e-043d-47e2-bc9a-422452a70506",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_MOD\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"license\": \"COM\",\r\n    \"moduleItems\": [\r\n        {\r\n            \"script\": {\r\n                \"code\": \"org.meveo.service.script.SaveIngenicoCardScript\",\r\n                \"description\": \"Save Ingenico Card\",\r\n                \"script\": \"package org.meveo.service.script;\\\\r\\\\n\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.Client;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.RequestHeader;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.PaymentResponse;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.CardPaymentMethodSpecificOutput;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.PaymentOutput;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.PaymentReferences;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.payment.definitions.PaymentStatusOutput;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.token.TokenResponse;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.domain.webhooks.WebhooksEvent;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.InMemorySecretKeyStore;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.SignatureValidationException;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.Webhooks;\\\\r\\\\nimport com.ingenico.connect.gateway.sdk.java.webhooks.WebhooksHelper;\\\\r\\\\nimport org.apache.commons.collections4.MapUtils;\\\\r\\\\nimport org.json.simple.JSONObject;\\\\r\\\\nimport org.json.simple.parser.JSONParser;\\\\r\\\\nimport org.json.simple.parser.ParseException;\\\\r\\\\nimport org.meveo.admin.exception.BusinessException;\\\\r\\\\nimport org.meveo.commons.utils.StringUtils;\\\\r\\\\nimport org.meveo.model.notification.InboundRequest;\\\\r\\\\nimport org.meveo.model.payments.CardPaymentMethod;\\\\r\\\\nimport org.meveo.model.payments.CreditCardTypeEnum;\\\\r\\\\nimport org.meveo.model.payments.CustomerAccount;\\\\r\\\\nimport org.meveo.model.payments.PaymentGateway;\\\\r\\\\nimport org.meveo.service.payments.impl.CustomerAccountService;\\\\r\\\\nimport org.meveo.service.payments.impl.PaymentGatewayService;\\\\r\\\\nimport org.meveo.service.payments.impl.PaymentMethodService;\\\\r\\\\nimport org.slf4j.Logger;\\\\r\\\\nimport org.slf4j.LoggerFactory;\\\\r\\\\n\\\\r\\\\nimport java.util.ArrayList;\\\\r\\\\nimport java.util.HashMap;\\\\r\\\\nimport java.util.List;\\\\r\\\\nimport java.util.Map;\\\\r\\\\n\\\\r\\\\n/**\\\\r\\\\n *\\\\r\\\\n * @author Mounir Bahije\\\\r\\\\n *\\\\r\\\\n *         Script executed to save card enrolled with Ingenico Hosted Checkout\\\\r\\\\n *\\\\r\\\\n */\\\\r\\\\npublic class SaveIngenicoCardScript extends Script {\\\\r\\\\n\\\\r\\\\n    private final static Logger log = LoggerFactory.getLogger(SaveIngenicoCardScript.class);\\\\r\\\\n\\\\r\\\\n    private PaymentMethodService paymentMethodService = (PaymentMethodService) getServiceInterface(\\\\\\\"PaymentMethodService\\\\\\\");\\\\r\\\\n    private CustomerAccountService customerAccountService = (CustomerAccountService) getServiceInterface(\\\\\\\"CustomerAccountService\\\\\\\");\\\\r\\\\n    private PaymentGatewayService paymentGatewayService = (PaymentGatewayService) getServiceInterface(\\\\\\\"PaymentGatewayService\\\\\\\");\\\\r\\\\n\\\\r\\\\n    @Override\\\\r\\\\n    public void execute(Map<String, Object> methodContext) throws BusinessException {\\\\r\\\\n\\\\r\\\\n        String verification = \\\\\\\"\\\\\\\";\\\\r\\\\n        InboundRequest inReq = (InboundRequest) methodContext.get(\\\\\\\"event\\\\\\\");\\\\r\\\\n\\\\r\\\\n        if (\\\\\\\"GET\\\\\\\".equalsIgnoreCase(inReq.getMethod())) {\\\\r\\\\n\\\\r\\\\n            String body = inReq.getBody();\\\\r\\\\n            Map<String, String> headers = inReq.getHeaders();\\\\r\\\\n            for (String headerKey : headers.keySet()) {\\\\r\\\\n                if (\\\\\\\"X-GCS-Webhooks-Endpoint-Verification\\\\\\\".equalsIgnoreCase(headerKey)) {\\\\r\\\\n                    String headerValue = headers.get(headerKey);\\\\r\\\\n                    verification = headerValue;\\\\r\\\\n                    inReq.setResponseBody(verification);\\\\r\\\\n                }\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n\\\\r\\\\n        if (\\\\\\\"POST\\\\\\\".equalsIgnoreCase(inReq.getMethod())) {\\\\r\\\\n\\\\r\\\\n            final String reqBody = inReq.getBody();\\\\r\\\\n\\\\r\\\\n            List<RequestHeader> requestHeaders = getWebhookRequestHeaders(inReq.getHeaders());\\\\r\\\\n            String webhooksKeyId = this.getHeaderValue(requestHeaders, \\\\\\\"X-GCS-KeyId\\\\\\\");\\\\r\\\\n\\\\r\\\\n            InMemorySecretKeyStore keyStore = InMemorySecretKeyStore.INSTANCE;\\\\r\\\\n            keyStore.storeSecretKey(webhooksKeyId, getWebhookSecretKey(webhooksKeyId));\\\\r\\\\n\\\\r\\\\n            WebhooksHelper helper = Webhooks.createHelper(keyStore);\\\\r\\\\n            WebhooksEvent webhooksEvent = helper.unmarshal(reqBody, requestHeaders);\\\\r\\\\n\\\\r\\\\n            PaymentResponse payment = webhooksEvent.getPayment();\\\\r\\\\n            if (payment == null) {\\\\r\\\\n                throw new BusinessException(String.format(\\\\\\\"PaymentResponse not found on webhooksEvent : [%s]\\\\\\\", webhooksEvent));\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n            PaymentOutput paymentOutput = payment.getPaymentOutput();\\\\r\\\\n            if (paymentOutput == null) {\\\\r\\\\n                throw new BusinessException(String.format(\\\\\\\"PaymentOutput not found on webhooksEvent.payment : [%s]\\\\\\\", payment));\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n            PaymentReferences paymentReferences = paymentOutput.getReferences();\\\\r\\\\n            if (paymentReferences == null) {\\\\r\\\\n                throw new BusinessException(String.format(\\\\\\\"paymentReferences not found on webhooksEvent.payment.paymentOutput : [%s]\\\\\\\", paymentOutput));\\\\r\\\\n            }\\\\r\\\\n\\\\r\\\\n            String merchantReference = paymentReferences.getMerchantReference();\\\\r\\\\n\\\\r\\\\n            if (merchantReference.lastIndexOf(\\\\\\\"_-_\\\\\\\") >= 0) {\\\\r\\\\n\\\\r\\\\n                String longIdCA = merchantReference.substring(merchantReference.lastIndexOf(\\\\\\\"_-_\\\\\\\") + 3);\\\\r\\\\n                CustomerAccount ca = customerAccountService.findById(Long.valueOf(longIdCA));\\\\r\\\\n\\\\r\\\\n                PaymentGateway paymentGateway = paymentGatewayService.getPaymentGateway(ca, null, null);\\\\r\\\\n\\\\r\\\\n                if (paymentGateway == null) {\\\\r\\\\n                    throw new BusinessException(\\\\\\\"paymentGateway is null\\\\\\\");\\\\r\\\\n                }\\\\r\\\\n\\\\r\\\\n                if (!webhooksKeyId.equals(paymentGateway.getWebhooksKeyId())) {\\\\r\\\\n                    throw new BusinessException(\\\\\\\"paymentGateway is not the good one\\\\\\\");\\\\r\\\\n                }\\\\r\\\\n\\\\r\\\\n                String status = payment.getStatus();\\\\r\\\\n                if (\\\\\\\"PENDING_CAPTURE\\\\\\\".equalsIgnoreCase(status)) {\\\\r\\\\n                    PaymentStatusOutput paymentStatusOutput = payment.getStatusOutput();\\\\r\\\\n                    if (paymentStatusOutput == null) {\\\\r\\\\n                        throw new BusinessException(String.format(\\\\\\\"paymentStatusOutput not found on webhooksEvent.payment : [%s]\\\\\\\", payment));\\\\r\\\\n                    }\\\\r\\\\n                    Boolean isAuthorized = paymentStatusOutput.getIsAuthorized();\\\\r\\\\n\\\\r\\\\n                    if (isAuthorized) {\\\\r\\\\n\\\\r\\\\n                        CardPaymentMethodSpecificOutput cardPaymentMethodSpecificOutput = paymentOutput.getCardPaymentMethodSpecificOutput();\\\\r\\\\n                        if (cardPaymentMethodSpecificOutput == null) {\\\\r\\\\n                            throw new BusinessException(String.format(\\\\\\\"cardPaymentMethodSpecificOutput not found on webhooksEvent.payment.paymentOutput : [%s]\\\\\\\", paymentOutput));\\\\r\\\\n                        }\\\\r\\\\n                        Long paymentProductId = Long.valueOf(cardPaymentMethodSpecificOutput.getPaymentProductId());\\\\r\\\\n\\\\r\\\\n                        JSONParser jsonParser = new JSONParser();\\\\r\\\\n                        JSONObject obj = null;\\\\r\\\\n                        try {\\\\r\\\\n                            obj = (JSONObject) jsonParser.parse(reqBody);\\\\r\\\\n                        } catch (ParseException e) {\\\\r\\\\n                            e.printStackTrace();\\\\r\\\\n                        }\\\\r\\\\n\\\\r\\\\n                        String tokenId = (String) ((JSONObject) ((JSONObject) ((JSONObject) obj.get(\\\\\\\"payment\\\\\\\")).get(\\\\\\\"paymentOutput\\\\\\\")).get(\\\\\\\"cardPaymentMethodSpecificOutput\\\\\\\")).get(\\\\\\\"token\\\\\\\");\\\\r\\\\n                        if (StringUtils.isBlank(tokenId)) {\\\\r\\\\n                            throw new BusinessException(String.format(\\\\\\\"tokenId not found on webhooksEvent.payment.paymentOutput.cardPaymentMethodSpecificOutput : [%s]\\\\\\\", cardPaymentMethodSpecificOutput));\\\\r\\\\n                        }\\\\r\\\\n\\\\r\\\\n                        String merchantId = webhooksEvent.getMerchantId();\\\\r\\\\n\\\\r\\\\n                        try {\\\\r\\\\n\\\\r\\\\n                            CreditCardTypeEnum cardType = fromId(Long.valueOf(paymentProductId).intValue());\\\\r\\\\n\\\\r\\\\n                            Client client = (Client) paymentMethodService.getClient(Long.valueOf(longIdCA));\\\\r\\\\n\\\\r\\\\n                            TokenResponse response = client.merchant(merchantId).tokens().get(tokenId);\\\\r\\\\n\\\\r\\\\n                            String cardNumber = response.getCard().getData().getCardWithoutCvv().getCardNumber();\\\\r\\\\n                            String expiryDate = response.getCard().getData().getCardWithoutCvv().getExpiryDate();\\\\r\\\\n                            String ownerName = response.getCard().getData().getCardWithoutCvv().getCardholderName();\\\\r\\\\n                            CardPaymentMethod paymentMethod = new CardPaymentMethod();\\\\r\\\\n                            paymentMethod.setCardNumber(cardNumber);\\\\r\\\\n                            paymentMethod.setCardType(cardType);\\\\r\\\\n                            paymentMethod.setCustomerAccount(ca);\\\\r\\\\n                            paymentMethod.setPreferred(true);\\\\r\\\\n                            paymentMethod.setMonthExpiration(new Integer(expiryDate.substring(0, 2)));\\\\r\\\\n                            paymentMethod.setYearExpiration(new Integer(expiryDate.substring(2, 4)));\\\\r\\\\n                            paymentMethod.setOwner(ownerName);\\\\r\\\\n                            paymentMethod.setTokenId(tokenId);\\\\r\\\\n                            paymentMethod.setHiddenCardNumber(CardPaymentMethod.hideCardNumber(cardNumber));\\\\r\\\\n                            if (!paymentMethodService.cardTokenExist(paymentMethod)) {\\\\r\\\\n                                paymentMethodService.create(paymentMethod);\\\\r\\\\n                            }\\\\r\\\\n                        } catch (Exception e) {\\\\r\\\\n                            throw new BusinessException(\\\\\\\"Error on SaveIngenicoCardScript : \\\\\\\" + e.getMessage());\\\\r\\\\n                        }\\\\r\\\\n                    }\\\\r\\\\n                }\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private CreditCardTypeEnum fromId(Integer id) {\\\\r\\\\n        for (CreditCardTypeEnum es : CreditCardTypeEnum.values()) {\\\\r\\\\n            if (es.getId().equals(id)) {\\\\r\\\\n                return es;\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n        throw new IllegalArgumentException();\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private List<RequestHeader> getWebhookRequestHeaders(Map<String, String> headers) {\\\\r\\\\n        List<RequestHeader> webhookHeaders = new ArrayList<>();\\\\r\\\\n        if (MapUtils.isNotEmpty(headers)) {\\\\r\\\\n            headers.forEach((key, value) -> webhookHeaders.add(new RequestHeader(key, value)) );\\\\r\\\\n        }\\\\r\\\\n        return webhookHeaders;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private String getHeaderValue(List<RequestHeader> requestHeaders, String headerName) {\\\\r\\\\n        String value = null;\\\\r\\\\n        for (RequestHeader header : requestHeaders) {\\\\r\\\\n            if (headerName.equalsIgnoreCase(header.getName())) {\\\\r\\\\n                if (value == null) {\\\\r\\\\n                    value = header.getValue();\\\\r\\\\n                } else {\\\\r\\\\n                    throw new SignatureValidationException(\\\\\\\"enocuntered multiple occurrences of header '\\\\\\\" + headerName + \\\\\\\"'\\\\\\\");\\\\r\\\\n                }\\\\r\\\\n            }\\\\r\\\\n        }\\\\r\\\\n        if (value == null) {\\\\r\\\\n            throw new SignatureValidationException(\\\\\\\"could not find header '\\\\\\\" + headerName + \\\\\\\"'\\\\\\\");\\\\r\\\\n        }\\\\r\\\\n        return value;\\\\r\\\\n    }\\\\r\\\\n\\\\r\\\\n    private String getWebhookSecretKey(String webhooksKeyId) throws BusinessException {\\\\r\\\\n        try {\\\\r\\\\n            String query = \\\\\\\"select pg.webhooksSecretKey from PaymentGateway pg where pg.webhooksKeyId=:webhooksKeyId\\\\\\\";\\\\r\\\\n            Map<String, Object> queryParams = new HashMap<>();\\\\r\\\\n            queryParams.put(\\\\\\\"webhooksKeyId\\\\\\\", webhooksKeyId);\\\\r\\\\n            Object result = paymentGatewayService.executeSelectQuery(query, queryParams);\\\\r\\\\n            return ((List<String>)result).get(0);\\\\r\\\\n        } catch (Exception e) {\\\\r\\\\n            throw new BusinessException(String.format(\\\\\\\"Error on getWebhookSecretKey for webhooksKeyId = [%s]\\\\\\\", webhooksKeyId));\\\\r\\\\n        }\\\\r\\\\n    }\\\\r\\\\n}\",\r\n                \"type\": \"JAVA\"\r\n            }\r\n        },\r\n        {\r\n            \"notification\": {\r\n                \"updatedCode\": null,\r\n                \"code\": \"SaveIngenicoCardInbound\",\r\n                \"classNameFilter\": \"org.meveo.model.notification.InboundRequest\",\r\n                \"eventTypeFilter\": \"INBOUND_REQ\",\r\n                \"elFilter\": \"#{event.pathInfo.endsWith(\\\\\\\"/ingenico/saveCard\\\\\\\")}\",\r\n                \"scriptInstanceCode\": \"org.meveo.service.script.SaveIngenicoCardScript\",\r\n                \"scriptParams\": {\r\n                    \"event\": \"#{event}\"\r\n                },\r\n                \"counterTemplate\": null\r\n            }\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Module SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e001c8dc-32c4-4891-8623-7ddcc32dd589",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.module.code).to.eql(pm.environment.get(\"testCode\")+\"_MOD\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.module.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module?code={{testCode}}_MOD",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module"
											],
											"query": [
												{
													"key": "code",
													"value": "{{testCode}}_MOD"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Module SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c1dfeb9-2219-471a-b4a9-9f6d3594ead7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module/{{testCode}}_MOD",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module",
												"{{testCode}}_MOD"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Module ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c9a8e03f-f8a0-4bcf-ba9e-efdf8dc33957",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"MeveoModule with code=\"+pm.environment.get(\"testCode\")+\"_MOD does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/module/{{testCode}}_MOD",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"module",
												"{{testCode}}_MOD"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Job Instance",
							"item": [
								{
									"name": "CreateOrUpdate Job Instance SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b7373ebb-977c-4082-9ec1-2a1b7b46fa19",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_JI\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"jobTemplate\": \"SepaDirectDebitJob\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\",\r\n                \"entityReferenceValue\": {\r\n                    \"classname\": \"org.meveo.model.payments.DDRequestBuilder\",\r\n                    \"code\": \"Sepa_STD\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Job Instance SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "daefa3e8-7e48-4409-bb67-31ac62462617",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.jobInstanceDto.code).to.eql(pm.environment.get(\"testCode\")+\"_JI\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.jobInstanceDto.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance?jobInstanceCode={{testCode}}_JI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance"
											],
											"query": [
												{
													"key": "jobInstanceCode",
													"value": "{{testCode}}_JI"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Job Instance ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1fb5c3b3-9ba1-4b03-bdfe-8a30c864c76c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"JobInstance with code=\"+pm.environment.get(\"testCode\")+\"_JI already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_JI\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"jobTemplate\": \"SepaDirectDebitJob\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\",\r\n                \"entityReferenceValue\": {\r\n                    \"classname\": \"org.meveo.model.payments.DDRequestBuilder\",\r\n                    \"code\": \"Sepa_STD\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/create",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Job Instance ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76eb09b5-aac6-462b-87ba-f2f8513273a1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"JobInstance with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"jobTemplate\": \"SepaDirectDebitJob\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\",\r\n                \"entityReferenceValue\": {\r\n                    \"classname\": \"org.meveo.model.payments.DDRequestBuilder\",\r\n                    \"code\": \"Sepa_STD\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/update",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Job Instance SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cbe24a85-9e0a-438b-bdd0-eee6001ad306",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_JI\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"jobTemplate\": \"SepaDirectDebitJob\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\",\r\n                \"entityReferenceValue\": {\r\n                    \"classname\": \"org.meveo.model.payments.DDRequestBuilder\",\r\n                    \"code\": \"Sepa_STD\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/update",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"update"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Job Instance SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "904f12e4-6e8a-47d3-8f7d-1ad30a3e27cb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_JI\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"jobTemplate\": \"SepaDirectDebitJob\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\",\r\n                \"entityReferenceValue\": {\r\n                    \"classname\": \"org.meveo.model.payments.DDRequestBuilder\",\r\n                    \"code\": \"Sepa_STD\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Job Instance SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "81d9edb3-0937-4a60-8183-f52962809b19",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.jobInstanceDto.code).to.eql(pm.environment.get(\"testCode\")+\"_JI\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.jobInstanceDto.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance?jobInstanceCode={{testCode}}_JI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance"
											],
											"query": [
												{
													"key": "jobInstanceCode",
													"value": "{{testCode}}_JI"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Job Instance MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "00f2f2ca-3c66-4126-9e06-6882961a7b21",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: SepaJob_ddRequestBuilder.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testDescription}}_JI\",\r\n    \"jobTemplate\": \"SepaDirectDebitJob\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Job Instance ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "71768bd6-1646-43aa-8df4-64eb7edc732d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"JobTemplate with code 'NOT_EXIST' doesn't exist.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"jobTemplate\": \"NOT_EXIST\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"SepaJob_ddRequestBuilder\",\r\n                \"entityReferenceValue\": {\r\n                    \"classname\": \"org.meveo.model.payments.DDRequestBuilder\",\r\n                    \"code\": \"Sepa_STD\"\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Job Instance SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "55ce979d-5924-465e-b42e-ba187222b8c7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/{{testCode}}_JI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"{{testCode}}_JI"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Job Instance ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ea408b8b-4bf4-4218-b21d-69eb88c0dd6d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"JobInstance with code=\"+pm.environment.get(\"testCode\")+\"_JI does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/{{testCode}}_JI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"{{testCode}}_JI"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Discount Plan",
							"item": [
								{
									"name": "CreateOrUpdate Discount Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e710669c-6ab2-4324-b24a-a175f3694048",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_DP\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"durationUnit\": \"1\",\r\n    \"startDate\": \"2019-03-03\",\r\n    \"endDate\": \"2019-03-04\",\r\n    \"defaultDuration\": \"1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Discount Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cba3a057-936d-4fc1-ad08-08d4f7044a45",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.discountPlanDto.code).to.eql(pm.environment.get(\"testCode\")+\"_DP\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.discountPlanDto.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan?discountPlanCode={{testCode}}_DP",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan"
											],
											"query": [
												{
													"key": "discountPlanCode",
													"value": "{{testCode}}_DP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Discount Plan ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "af6fcd06-6168-4a6a-b610-ede66e82b802",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"DiscountPlan with code=\"+pm.environment.get(\"testCode\")+\"_DP already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_DP\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"durationUnit\": \"1\",\r\n    \"startDate\": \"2019-03-03\",\r\n    \"endDate\": \"2019-03-04\",\r\n    \"defaultDuration\": \"1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Discount Plan ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e48e8204-0aa6-4aae-97b7-d2d342ea87c0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"DiscountPlan with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"TEST\",\r\n    \"durationUnit\": \"1\",\r\n    \"startDate\": \"2019-03-03\",\r\n    \"endDate\": \"2019-03-04\",\r\n    \"defaultDuration\": \"1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Discount Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d2e361ac-5c3e-4f8e-994f-2bbd381bbc0e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_DP\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"durationUnit\": \"1\",\r\n    \"startDate\": \"2019-03-03\",\r\n    \"endDate\": \"2019-03-04\",\r\n    \"defaultDuration\": \"1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Discount Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "39f2936e-f591-41e7-825d-cb6125591b00",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_DP\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"durationUnit\": \"1\",\r\n    \"startDate\": \"2019-03-03\",\r\n    \"endDate\": \"2019-03-04\",\r\n    \"defaultDuration\": \"1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Discount Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "25a04a6a-ad34-48c0-99cd-c97e868329d7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.discountPlanDto.code).to.eql(pm.environment.get(\"testCode\")+\"_DP\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.discountPlanDto.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan?discountPlanCode={{testCode}}_DP",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan"
											],
											"query": [
												{
													"key": "discountPlanCode",
													"value": "{{testCode}}_DP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Discount Plan INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "90f728fd-26c7-4f03-b133-6f997394d818",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.util.Date` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_DP\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"durationUnit\": \"1\",\r\n    \"startDate\": \"INVALID\",\r\n    \"endDate\": \"INVALID\",\r\n    \"defaultDuration\": \"1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Discount Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b0554f53-70fa-4de6-a5f1-7c54a216423a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan?discountPlanCode={{testCode}}_DP",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan"
											],
											"query": [
												{
													"key": "discountPlanCode",
													"value": "{{testCode}}_DP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Discount Plan ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2545c5f-ad9e-4804-bc5c-8f0b67c99674",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"DiscountPlan with code=\"+pm.environment.get(\"testCode\")+\"_DP does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/discountPlan?discountPlanCode={{testCode}}_DP",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"discountPlan"
											],
											"query": [
												{
													"key": "discountPlanCode",
													"value": "{{testCode}}_DP"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Offers",
					"item": [
						{
							"name": "Offer Template",
							"item": [
								{
									"name": "CreateOrUpdate  Offer Template  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7482f9a-b2bb-4b84-b4f7-dae33e78eeb1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_OT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"bomCode\": null,\r\n    \"offerTemplateCategoryCode\": null,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_USG_UNIT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read  Offer Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7bcca93-8642-4590-ae75-c86720d13f59",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.offerTemplate.code).to.eql(pm.environment.get(\"testCode\") + \"_OT\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.offerTemplate.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{testCode}}_OT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{testCode}}_OT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Offer Template  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8c188769-297f-4b26-b3d3-030da3a15cc4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceCategory with code=\" + pm.environment.get(\"testCode\") + \"_OF already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_OT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"bomCode\": null,\r\n    \"offerTemplateCategoryCode\": null,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_USG_UNIT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Offer Template  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d79c562e-fbb0-4f98-98ea-11364023025e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"OfferTemplate with code=NOT_EXIST /  /  does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"bomCode\": null,\r\n    \"offerTemplateCategoryCode\": null,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_USG_UNIT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Offer Template  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aeb4d91b-5694-496f-a514-e49fd27f41c9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_OT\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"bomCode\": null,\r\n    \"offerTemplateCategoryCode\": null,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_USG_UNIT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Offer Template  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d4c6d8f-410b-4067-8b6e-f93f7999a0ff",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_OT\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"ACTIVE\",\r\n    \"bomCode\": null,\r\n    \"offerTemplateCategoryCode\": null,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_USG_UNIT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Offer Template  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1140e71d-70e8-4f12-b53c-13c2219f3d0c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.offerTemplate.code).to.eql(pm.environment.get(\"testCode\") + \"_OT\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.offerTemplate.description).to.eql(pm.environment.get(\"testDescription\") + \" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{testCode}}_OT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{testCode}}_OT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Offer Template INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4072344c-9b81-489e-a844-82c33868c2ef",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `org.meveo.model.catalog.LifeCycleStatusEnum` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_OT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"disabled\": false,\r\n    \"lifeCycleStatus\": \"INVALID\",\r\n    \"bomCode\": null,\r\n    \"offerTemplateCategoryCode\": null,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"SE_USG_UNIT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"5_SE_CLASSIC_REC_FLAT\",\r\n                \"customFields\": null\r\n            },\r\n            \"mandatory\": false\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Offer Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b6390428-32b6-48c3-82da-72e221d1ed85",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{testCode}}_OT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{testCode}}_OT"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Offer Template ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7fd10ac1-bc68-4d47-b34e-78f16bdb2e51",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"OfferTemplate with code=\" + pm.environment.get(\"testCode\") + \"_OT /  /  does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{testCode}}_OT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{testCode}}_OT"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Tax Class",
							"item": [
								{
									"name": "CreateOrUpdate  Tax Class  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cf8ad0ef-9092-495b-873a-b58445725f06",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TC\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read  Tax Class SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f433b788-62e7-4daf-bbf9-989e14295bee",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.dto.code).to.eql(pm.environment.get(\"testCode\") + \"_TC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.dto.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass?code={{testCode}}_TC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass"
											],
											"query": [
												{
													"key": "code",
													"value": "{{testCode}}_TC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Tax Class  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "950a0ae3-562e-4aa8-87fc-64d7667e166b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"TaxClass with code=\" + pm.environment.get(\"testCode\") + \"_TC already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TC\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Tax Class  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a83f055-3b3a-487f-be80-9e4b761b9817",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"TaxClass with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testCode}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Tax Class  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b4037fc9-4664-44f6-8abc-21f717f7a2e7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TC\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Tax Class  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "266672c7-ad7e-4fc6-9417-3ed45775f6f9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TC\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Tax Class  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "18372589-147f-4bc5-8cad-b21942315625",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.dto.code).to.eql(pm.environment.get(\"testCode\") + \"_TC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.dto.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass?code={{testCode}}_TC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass"
											],
											"query": [
												{
													"key": "code",
													"value": "{{testCode}}_TC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Tax Class INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b72dcbca-b9a9-4884-9105-02d1e5d00278",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize instance of `java.util.ArrayList` out of VALUE_STRING token\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"INVALID\",\r\n    \"descriptionI18n\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "cc277efd-43d3-4980-b87c-1c3148bbb848",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "9d0e72bb-a823-4dcc-8005-e09068ac8a08",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Recurring Charge",
							"item": [
								{
									"name": "CreateOrUpdate  Recurring Charge SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b6e25795-e824-483b-ae12-87b5d6ef6ccd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_RCT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"invoiceSubCategory\": \"CLASSIC_USAGE\",\r\n    \"disabled\": false,\r\n    \"unitNbDecimal\": 4,\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\": \"{{testCode}}_TC\",\r\n    \"calendar\": \"MONTHLY\",\r\n    \"durationTermInMonth\": null,\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"triggeredEdrs\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read  Recurring Charge SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "12689940-0ddd-44b1-94ed-88360c94a081",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.recurringChargeTemplate.code).to.eql(pm.environment.get(\"testCode\") + \"_RCT\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.recurringChargeTemplate.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate?recurringChargeTemplateCode={{testCode}}_RCT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate"
											],
											"query": [
												{
													"key": "recurringChargeTemplateCode",
													"value": "{{testCode}}_RCT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Recurring Charge  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d49a6c0-d6b6-4c03-942d-2cd9c1ff143e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"RecurringChargeTemplate with code=\" + pm.environment.get(\"testCode\") + \"_RCT already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_RCT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"invoiceSubCategory\": \"CLASSIC_USAGE\",\r\n    \"disabled\": false,\r\n    \"unitNbDecimal\": 4,\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\": \"{{testCode}}_TC\",\r\n    \"calendar\": \"MONTHLY\",\r\n    \"durationTermInMonth\": null,\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"triggeredEdrs\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Recurring Charge ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f4dfd6c-ba63-47db-9740-2e37faa73437",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"RecurringChargeTemplate with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testCode}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Recurring Charge  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "21072f49-0b8c-4a81-91be-2824bbfadda6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_RCT\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"invoiceSubCategory\": \"CLASSIC_USAGE\",\r\n    \"disabled\": false,\r\n    \"unitNbDecimal\": 4,\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\": \"{{testCode}}_TC\",\r\n    \"calendar\": \"MONTHLY\",\r\n    \"durationTermInMonth\": null,\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"triggeredEdrs\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Recurring Charge SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "66272f7c-f330-46ee-9aa7-540ca00b8656",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_RCT\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"invoiceSubCategory\": \"CLASSIC_USAGE\",\r\n    \"disabled\": false,\r\n    \"unitNbDecimal\": 4,\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\": \"{{testCode}}_TC\",\r\n    \"calendar\": \"MONTHLY\",\r\n    \"durationTermInMonth\": null,\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"triggeredEdrs\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Recurring Charge SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a4918062-9930-4d2d-bb13-deac85292bc6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.recurringChargeTemplate.code).to.eql(pm.environment.get(\"testCode\") + \"_RCT\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.recurringChargeTemplate.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate?recurringChargeTemplateCode={{testCode}}_RCT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate"
											],
											"query": [
												{
													"key": "recurringChargeTemplateCode",
													"value": "{{testCode}}_RCT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Recurring Charge MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cbb0fdad-64ce-4e89-9c26-a2135192f894",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: invoiceSubCategory, calendar, taxClassCode.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"MISSING\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Recurring Charge INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b460c9f-c0cf-40cf-a5b5-dd2e31289339",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Boolean` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_RCT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"invoiceSubCategory\": \"ISCAT_REC\",\r\n    \"disabled\": \"INVAID\",\r\n    \"unitNbDecimal\": 4,\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"calendar\": \"CAL_MONTHLY_1ST\",\r\n    \"durationTermInMonth\": null,\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"triggeredEdrs\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "25faaa15-51dc-4614-8aaf-7b02c03b8e99",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "83ea8512-79f1-4ea0-aa1c-5dca90f54a60",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Price Plan",
							"item": [
								{
									"name": "CreateOrUpdate  Price Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "128fd37c-871f-4a4c-acfa-454a974a7694",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PP\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"eventCode\": \"{{testCode}}_RCT\",\r\n    \"amountWithoutTax\": 100\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read  Price Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "20ecfb35-9f6f-4b5b-96a8-fe7688b19462",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pricePlan.code).to.eql(pm.environment.get(\"testCode\") + \"_PP\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pricePlan.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan?pricePlanCode={{testCode}}_PP",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan"
											],
											"query": [
												{
													"key": "pricePlanCode",
													"value": "{{testCode}}_PP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "79bc0505-1971-4584-b587-8a99dd9fa7f3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"PricePlanMatrix with code=\" + pm.environment.get(\"testCode\") + \"_PP already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PP\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"eventCode\": \"{{testCode}}_RCT\",\r\n    \"amountWithoutTax\": 100\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Price Plan ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6079166b-f7f4-49ae-94b8-88e57164482c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"PricePlanMatrix with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"eventCode\": \"{{testCode}}_RCT\",\r\n    \"amountWithoutTax\": 100\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Price Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "833cabec-2350-4184-96ea-d2af9767887d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PP\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"eventCode\": \"{{testCode}}_RCT\",\r\n    \"amountWithoutTax\": 100\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Price Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "39f0d29f-bb09-4e15-895c-b1158ad7ae97",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PP\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"eventCode\": \"{{testCode}}_RCT\",\r\n    \"amountWithoutTax\": 100\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Price Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a5cade59-3cd2-4e85-9dbe-38d520494ef2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pricePlan.code).to.eql(pm.environment.get(\"testCode\") + \"_PP\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.pricePlan.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan?pricePlanCode={{testCode}}_PP",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan"
											],
											"query": [
												{
													"key": "pricePlanCode",
													"value": "{{testCode}}_PP"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Price Plan MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f249a50-8222-46cd-aa51-327a7dcf5e66",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: eventCode, amountWithoutTax.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"MISSING\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Price Plan INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9478628b-9f23-4ae1-8bdc-0841d771483e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.math.BigDecimal` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PP\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"eventCode\": \"{{testCode}}_RcT\",\r\n    \"amountWithoutTax\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Price Plan SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ac0b6d8-059d-4e60-99fe-dddf71fbe3c2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/{{testCode}}_PP",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"{{testCode}}_PP"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Price Plan ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2397c8d4-1846-4076-aa19-0ce5adc3e9a8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"PricePlanMatrix with code=\" + pm.environment.get(\"testCode\") + \"_PP does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/{{testCode}}_PP",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"{{testCode}}_PP"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c07bed1c-6c20-41ee-b6d3-d5325f055b09",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "60c3a4c0-1daa-4355-87e2-4fed225696f0",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Service Template",
							"item": [
								{
									"name": "CreateOrUpdate  Service Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0c196466-b3d5-4380-a3d7-32fdaaf5be79",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"customFields\": null,\r\n    \"imageBase64\": null,\r\n    \"imagePath\": null,\r\n    \"invoicingCalendar\": null,\r\n    \"longDescription\": null,\r\n    \"mandatory\": true,\r\n    \"serviceChargeTemplateUsages\": null,\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{testCode}}_RCT\",\r\n                \"wallets\": null\r\n            }\r\n        ]\r\n    },\r\n    \"serviceChargeTemplateSubscriptions\": null,\r\n    \"serviceChargeTemplateTerminations\": null,\r\n    \"somCode\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read  Service Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "527a13ee-4066-49a3-bcdd-dd0b2e5d247a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceTemplate.code).to.eql(pm.environment.get(\"testCode\") + \"_ST\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceTemplate.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate?serviceTemplateCode={{testCode}}_ST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate"
											],
											"query": [
												{
													"key": "serviceTemplateCode",
													"value": "{{testCode}}_ST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Service Template  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "74bd8663-a7cf-4076-9077-106377a4c0a9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ServiceTemplateService with code=\" + pm.environment.get(\"testCode\") + \"_ST already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"customFields\": null,\r\n    \"imageBase64\": null,\r\n    \"imagePath\": null,\r\n    \"invoicingCalendar\": null,\r\n    \"longDescription\": null,\r\n    \"mandatory\": true,\r\n    \"serviceChargeTemplateUsages\": null,\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{testCode}}_RCT\",\r\n                \"wallets\": null\r\n            }\r\n        ]\r\n    },\r\n    \"serviceChargeTemplateSubscriptions\": null,\r\n    \"serviceChargeTemplateTerminations\": null,\r\n    \"somCode\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Service Template ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "30b47253-9c9a-4575-a75b-c257aa36aeec",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ServiceTemplateService with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"customFields\": null,\r\n    \"imageBase64\": null,\r\n    \"imagePath\": null,\r\n    \"invoicingCalendar\": null,\r\n    \"longDescription\": null,\r\n    \"mandatory\": true,\r\n    \"serviceChargeTemplateUsages\": null,\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{testCode}}_RCT\",\r\n                \"wallets\": null\r\n            }\r\n        ]\r\n    },\r\n    \"serviceChargeTemplateSubscriptions\": null,\r\n    \"serviceChargeTemplateTerminations\": null,\r\n    \"somCode\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Service Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7820147-24cc-4f12-b26e-8ed644ce092b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ST\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"customFields\": null,\r\n    \"imageBase64\": null,\r\n    \"imagePath\": null,\r\n    \"invoicingCalendar\": null,\r\n    \"longDescription\": null,\r\n    \"mandatory\": true,\r\n    \"serviceChargeTemplateUsages\": null,\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{testCode}}_RCT\",\r\n                \"wallets\": null\r\n            }\r\n        ]\r\n    },\r\n    \"serviceChargeTemplateSubscriptions\": null,\r\n    \"serviceChargeTemplateTerminations\": null,\r\n    \"somCode\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Service Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "27a037de-db4c-46f5-9256-280e30cd773a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ST\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"customFields\": null,\r\n    \"imageBase64\": null,\r\n    \"imagePath\": null,\r\n    \"invoicingCalendar\": null,\r\n    \"longDescription\": null,\r\n    \"mandatory\": true,\r\n    \"serviceChargeTemplateUsages\": null,\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{testCode}}_RCT\",\r\n                \"wallets\": null\r\n            }\r\n        ]\r\n    },\r\n    \"serviceChargeTemplateSubscriptions\": null,\r\n    \"serviceChargeTemplateTerminations\": null,\r\n    \"somCode\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Service Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e6b67e0-67d3-41b2-9b97-574073857dc7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceTemplate.code).to.eql(pm.environment.get(\"testCode\") + \"_ST\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceTemplate.description).to.eql(pm.environment.get(\"testDescription\") + \" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate?serviceTemplateCode={{testCode}}_ST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate"
											],
											"query": [
												{
													"key": "serviceTemplateCode",
													"value": "{{testCode}}_ST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Service Template MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9ca6fb6e-5b25-4413-ae95-d169691ad08c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Service Template INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "37ad2168-8b20-4bd8-a5f7-96ccd7ee25be",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `boolean` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"customFields\": null,\r\n    \"imageBase64\": null,\r\n    \"imagePath\": null,\r\n    \"invoicingCalendar\": null,\r\n    \"longDescription\": null,\r\n    \"mandatory\": \"INVALID\",\r\n    \"serviceChargeTemplateUsages\": null,\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{testCode}}_RCT\",\r\n                \"wallets\": null\r\n            }\r\n        ]\r\n    },\r\n    \"serviceChargeTemplateSubscriptions\": null,\r\n    \"serviceChargeTemplateTerminations\": null,\r\n    \"somCode\": null\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d552968e-4342-4d90-b73d-f1859a2e0627",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "776e5fcc-21d4-47b9-917b-aa68bc64caf9",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Clear Data",
							"item": [
								{
									"name": "Delete Tax Class GENERIC_API_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "97141dca-518c-4494-a4da-8257e9c7fa74",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"GENERIC_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"ERROR: update or delete on table \\\"billing_tax_class\\\" violates foreign key constraint\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass/{{testCode}}_TC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass",
												"{{testCode}}_TC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Recurring Charge GENERIC_API_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fbcc514f-1036-46ef-9b2a-35dd618e8c7b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"GENERIC_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"ERROR: update or delete on table\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/{{testCode}}_RCT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"{{testCode}}_RCT"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Service Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7545ffb0-78b1-481f-94b9-5afb4c0ece4f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/{{testCode}}_ST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"{{testCode}}_ST"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Service Template ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "666fc068-7eb6-423d-ba51-1d8b485c71db",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ServiceTemplate with code=\" + pm.environment.get(\"testCode\") + \"_ST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/{{testCode}}_ST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"{{testCode}}_ST"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Recurring Charge SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "104c2c53-8c70-4835-ba95-84ac25343a07",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/{{testCode}}_RCT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"{{testCode}}_RCT"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Recurring Charge ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4cc8738f-856a-4b28-89f6-58bc0040e49a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"RecurringChargeTemplate with code=\" + pm.environment.get(\"testCode\") + \"_RCT does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/{{testCode}}_RCT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"{{testCode}}_RCT"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Tax Class SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dcead30d-79b1-426f-bc7e-6e46fd648395",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass/{{testCode}}_TC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass",
												"{{testCode}}_TC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Tax Class ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9d10f2f5-e9a5-4055-bfa5-ec18803c8762",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"TaxClass with code=\" + pm.environment.get(\"testCode\") + \"_TC does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass/{{testCode}}_TC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass",
												"{{testCode}}_TC"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Billing",
					"item": [
						{
							"name": "Invoice Category",
							"item": [
								{
									"name": "CreateOrUpdate Invoice Category  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "52896dc9-347c-47bc-9795-4683d8110c98",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IC\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Invoice Category  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3497488c-4b7d-4184-b2a9-9393ccb11264",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceCategory.code).to.eql(pm.environment.get(\"testCode\")+\"_IC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceCategory.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory?invoiceCategoryCode={{testCode}}_IC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory"
											],
											"query": [
												{
													"key": "invoiceCategoryCode",
													"value": "{{testCode}}_IC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Invoice Category  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f21d18e-7dad-490f-b513-500a09251ce7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceCategory with code=\"+pm.environment.get(\"testCode\")+\"_IC already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IC\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice Category  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "96dd42fc-d527-4984-8d0f-d80cf0b1cebe",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceCategory with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice Category  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48c9434f-0fc9-4cd2-9b21-6373f5f1454c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IC\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Category  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3d756793-5821-4acc-ae5c-762575c363af",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IC\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Invoice Category  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1f3d7deb-21dd-4e33-8045-1dd26e661e15",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceCategory.code).to.eql(pm.environment.get(\"testCode\")+\"_IC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceCategory.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory?invoiceCategoryCode={{testCode}}_IC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory"
											],
											"query": [
												{
													"key": "invoiceCategoryCode",
													"value": "{{testCode}}_IC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Category  MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2d8609e4-54dc-4aea-8aec-5bd4443b4fac",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Category INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd2d1d7f-a90a-4019-8bde-bb26f927d349",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot construct instance of `org.meveo.api.dto.CustomFieldsDto`\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"customFields\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Invoice SubCategory",
							"item": [
								{
									"name": "CreateOrUpdate Invoice SubCategory  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c072b989-b53d-4aee-99f2-b5903592c46f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_ISC\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"invoiceCategory\": \"{{testCode}}_IC\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Invoice SubCategory  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88794490-e832-4a65-ac94-a04461bfdcde",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceSubCategory.code).to.eql(pm.environment.get(\"testCode\")+\"_ISC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceSubCategory.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory?invoiceSubCategoryCode={{testCode}}_ISC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory"
											],
											"query": [
												{
													"key": "invoiceSubCategoryCode",
													"value": "{{testCode}}_ISC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Invoice SubCategory  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7667baae-ec62-4383-b238-34bf20870aec",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceSubCategory with code=\"+pm.environment.get(\"testCode\")+\"_ISC already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_ISC\",\r\n  \"description\": \"{{testDescription}}\",\r\n  \"invoiceCategory\": \"{{testCode}}_IC\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice SubCategory  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e129656-621d-4fc4-a170-aa705adb5e69",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceSubCategory with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"invoiceCategory\": \"{{testCode}}_IC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice SubCategory  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd572b19-4457-4c8c-8d62-c4a387f7e30b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ISC\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"invoiceCategory\": \"{{testCode}}_IC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice SubCategory  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a119dc8c-9958-465c-b073-b9c4a2adc665",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ISC\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"invoiceCategory\": \"{{testCode}}_IC\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Invoice Category  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "71647285-f26c-437a-92de-ebe56efb2f5d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceSubCategory.code).to.eql(pm.environment.get(\"testCode\")+\"_ISC\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceSubCategory.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory?invoiceSubCategoryCode={{testCode}}_ISC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory"
											],
											"query": [
												{
													"key": "invoiceSubCategoryCode",
													"value": "{{testCode}}_ISC"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice SubCategory  MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fbe098bd-b3ad-4757-96f1-efdf9a498bd2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: invoiceCategory.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ISC\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice SubCategory INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9d179cf2-8775-4cae-a4c8-b6e63fc0950c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot construct instance of `org.meveo.api.dto.CustomFieldsDto`\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ISC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"customFields\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice SubCategory ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "db0131e1-0e1e-4579-b382-a3e5ea9fd55e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceCategory with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_ISC\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"invoiceCategory\": \"NOT_EXIST\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Invoice Sequence",
							"item": [
								{
									"name": "CreateOrUpdate Invoice Sequence SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4dd4aa71-5c2f-4a83-9e72-cd62738214cb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IS\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"sequenceSize\": \"14\",\r\n    \"currentInvoiceNb\": \"0\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Invoice Sequence SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a757fe8-bc43-4425-a5c0-822e39658099",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceSequenceDto.code).to.eql(pm.environment.get(\"testCode\")+\"_IS\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceSequenceDto.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence?invoiceSequenceCode={{testCode}}_IS",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence"
											],
											"query": [
												{
													"key": "invoiceSequenceCode",
													"value": "{{testCode}}_IS"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Invoice Sequence ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e0149cbc-2afe-4710-8da2-f9f00c3f2964",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceSequence with code=\"+pm.environment.get(\"testCode\")+\"_IS already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IS\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"sequenceSize\": \"14\",\r\n    \"currentInvoiceNb\": \"0\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice Sequence ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b55234be-b55d-406b-b22b-0ea9a4c4f757",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceSequence with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"sequenceSize\": \"14\",\r\n    \"currentInvoiceNb\": \"0\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice Sequence SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a779443c-b815-4c7a-ba50-68e612eb51c2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IS\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"sequenceSize\": \"14\",\r\n    \"currentInvoiceNb\": \"0\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Sequence SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a63575d9-aac6-4529-b7c2-eba093b59d0f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IS\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"sequenceSize\": \"14\",\r\n    \"currentInvoiceNb\": \"0\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Invoice Sequence SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a5192d13-a29d-4842-9653-098c4dfa2018",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceSequenceDto.code).to.eql(pm.environment.get(\"testCode\")+\"_IS\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceSequenceDto.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence?invoiceSequenceCode={{testCode}}_IS",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence"
											],
											"query": [
												{
													"key": "invoiceSequenceCode",
													"value": "{{testCode}}_IS"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Sequence MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "41060c92-2d51-4779-a973-dc7c4f4d2b94",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Sequence INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c634d956-79e8-4636-902b-a8fd975aa866",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Integer` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IS\",\r\n    \"sequenceSize\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSequence/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSequence",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Clear Data",
							"item": [
								{
									"name": "Delete Invoice Category GENERIC_API_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6295f656-7688-4fa2-b310-38e07588f950",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"GENERIC_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"ERROR: update or delete on table\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory/{{testCode}}_IC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory",
												"{{testCode}}_IC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Invoice SubCategory SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e24a9c7a-b344-4096-be90-208eb109559e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory/{{testCode}}_ISC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory",
												"{{testCode}}_ISC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Invoice SubCategory ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8b391331-3317-48e9-94b8-14b1873da0d3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceSubCategory with code=\"+pm.environment.get(\"testCode\")+\"_ISC does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceSubCategory/{{testCode}}_ISC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceSubCategory",
												"{{testCode}}_ISC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Invoice Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a2a78cd-2532-4ff4-9789-e48053f1a716",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory/{{testCode}}_IC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory",
												"{{testCode}}_IC"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Invoice Category ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5a4f1bfc-778c-4e25-80b6-fe21334da8c0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceCategory with code=\"+pm.environment.get(\"testCode\")+\"_IC does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceCategory/{{testCode}}_IC",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceCategory",
												"{{testCode}}_IC"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Wallet Operation",
							"item": [
								{
									"name": "Create Wallet Operation SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0c555502-10f7-43d5-8ae2-f64b07de5ea6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_WLT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"subscription\": \"ben.ohara\",\r\n    \"chargeInstance\": \"CH_CLASSIC_REC_FLAT\",\r\n    \"currency\": \"EUR\",\r\n    \"taxCode\": \"TAX_CLASSIC_HIGH\",\r\n    \"status\": \"TREATED\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/wallet/operation",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"wallet",
												"operation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Wallet Operation ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6f817e20-226f-4f64-ba0d-5b5904f5d13a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"WalletOperation with code=\"+pm.environment.get(\"testCode\")+\"_WLT already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_WLT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"subscription\": \"ben.ohara\",\r\n    \"chargeInstance\": \"CH_CLASSIC_REC_FLAT\",\r\n    \"currency\": \"EUR\",\r\n    \"taxCode\": \"TAX_CLASSIC_HIGH\",\r\n    \"status\": \"TREATED\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/wallet/operation",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"wallet",
												"operation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Wallet Operation MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1970b7bd-cf59-44a8-be8e-079c0b3771b0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: userAccount or subscription, chargeInstance or chargeInstanceId, currency, taxCode or taxPercent.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"MISSING\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/wallet/operation",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"wallet",
												"operation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Wallet Operation INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f11e616-e8cb-4f2d-a8e0-981b981a2f48",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.util.Date` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_WLT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"subscription\": \"ben.ohara\",\r\n    \"subscriptionDate\": \"INVALID\",\r\n    \"chargeInstance\": \"PR_CLASSIC_DEFAULT\",\r\n    \"currency\": \"EUR\",\r\n    \"taxCode\": \"TAX_CLASSIC_HIGH\",\r\n    \"status\": \"TREATED\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/wallet/operation",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"wallet",
												"operation"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Subscription",
					"item": [
						{
							"name": "Subscription",
							"item": [
								{
									"name": "CreateOrUpdate Subscription SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "213ca515-fff1-46b2-b7b2-6f89621261eb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"userAccount\": \"ben.ohara\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01\"\r\n}\t\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Subscription SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24978d2e-c378-4124-af60-ae96cedaa877",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"testCode\")+\"_SUB\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{testCode}}_SUB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{testCode}}_SUB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Subscription ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3750b1e-a14a-4f3a-9c44-cbc86f921569",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Subscription with code=\"+pm.environment.get(\"testCode\")+\"_SUB already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"userAccount\": \"ben.ohara\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Subscription ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fff10286-a410-44e5-b96b-079774b0dcbc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Subscription with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"NOT_EXIST\",\r\n\t\"description\": \"{{testDescription}}\",\r\n\t\"userAccount\": \"ben.ohara\",\r\n\t\"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n\t\"subscriptionDate\": \"2019-01-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Subscription SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "260d660c-c077-4486-bc10-a4eb6766808e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"userAccount\": \"ben.ohara\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Subscription SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7132c78d-201b-429f-b5c2-d221377cbd0b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"userAccount\": \"ben.ohara\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Subscription SUCCESS Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e1599315-d146-45ef-b2c7-456bd7716e5b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"testCode\")+\"_SUB\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{testCode}}_SUB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{testCode}}_SUB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Subscription ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "727d0e54-af1f-4f39-8a4a-089121f6c9f3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"UserAccount with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"userAccount\": \"NOT_EXIST\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Subscription MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "451ee984-b104-4f08-92b7-bf34d8e144cc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: subscriptionDate.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"userAccount\": \"ben.ohara\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Subscription INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4f9fff6-5edf-4804-b62d-61d4141b856b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.util.Date` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_SUB\",\r\n    \"userAccount\": \"ben.ohara\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Subscription SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "93cd886f-595b-464a-8ece-32b364e927a9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscriptionCode\": \"{{testCode}}_SUB\",\r\n    \"terminationReason\" : \"TERM_REASON_1\",\r\n    \"terminationDate\": \"2019-01-01\",\r\n    \"orderItemAction\" : \"DELETE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Subscription RESILIATED",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf540af3-64e0-4500-b21f-f96f5dc5e1ec",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Subscription is already RESILIATED.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscriptionCode\": \"{{testCode}}_SUB\",\r\n    \"terminationReason\" : \"TERM_REASON_1\",\r\n    \"terminationDate\": \"2019-01-01\",\r\n    \"orderItemAction\" : \"DELETE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subscribe and Activate Subscription SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1fca84d2-57c8-460a-becb-76d9db246689",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"SUB_TEST_1\",\r\n    \"userAccount\": \"DEMO.CLASSIC\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01T22:00:00Z\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"subscriptionDate\": \"2019-01-01T22:00:00Z\",\r\n                \"quantity\": 1\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/subscribeAndActivateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"subscribeAndActivateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Subscribe and Activate Subscription ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56072544-c367-4cc1-991e-e8a9a20e057a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Subscription with code=SUB_TEST_1 already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"SUB_TEST_1\",\r\n    \"userAccount\": \"DEMO.CLASSIC\",\r\n    \"offerTemplate\": \"OF_CLASSIC_TEMPLATE\",\r\n    \"subscriptionDate\": \"2019-01-01T22:00:00Z\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"SE_CLASSIC_REC_FLAT\",\r\n                \"subscriptionDate\": \"2019-01-01T22:00:00Z\",\r\n                \"quantity\": 1\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/subscribeAndActivateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"subscribeAndActivateServices"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Settings",
					"item": [
						{
							"name": "Title",
							"item": [
								{
									"name": "CreateOrUpdate Title SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "501a28f4-7977-4c46-ab04-4b7671c5673a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TITLE\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{testDescription}}\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"false\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Title SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "11aee4c6-d06e-4b0f-a431-c5fc46b8c8c4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.titleDto.code).to.eql(pm.environment.get(\"testCode\")+\"_TITLE\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.titleDto.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title?titleCode={{testCode}}_TITLE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title"
											],
											"query": [
												{
													"key": "titleCode",
													"value": "{{testCode}}_TITLE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Title ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f6a8f2a4-afd1-4f39-a828-011fee2a9e97",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Title with code=\"+pm.environment.get(\"testCode\")+\"_TITLE already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TITLE\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{testDescription}}\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"false\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Title ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d945e68-70ed-4111-b4d2-71d57bb6a3ff",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Title with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{testDescription}}\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"false\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Title SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "abeceac5-a3c8-44b2-ab2f-d9ff72339ad6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TITLE\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{testDescription}}\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"false\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Account Operation SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bba74328-9930-4087-8be8-59f2fc7df6ca",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TITLE\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{testDescription}}\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"false\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Title SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d80a0366-972a-45b5-a61f-de9184d98eca",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.titleDto.code).to.eql(pm.environment.get(\"testCode\")+\"_TITLE\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.titleDto.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title?titleCode={{testCode}}_TITLE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title"
											],
											"query": [
												{
													"key": "titleCode",
													"value": "{{testCode}}_TITLE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Title MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5efda94d-d12d-482e-8bf0-2c41d3d0543c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: titleCode.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{testDescription}}\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"false\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Title INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d41d52e-2b9e-4510-be5a-1212305700e8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Boolean` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"Test\"\r\n        }\r\n    ],\r\n    \"isCompany\": \"INVALID\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Title SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "443d7ad9-4c5b-4cdf-911d-837996ba5426",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title/{{testCode}}_TITLE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title",
												"{{testCode}}_TITLE"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Title ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf9b64e4-63ee-4a38-a14a-d2b3be104b3f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Title with code=\"+pm.environment.get(\"testCode\")+\"_TITLE does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/title/{{testCode}}_TITLE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"title",
												"{{testCode}}_TITLE"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Calendar",
							"item": [
								{
									"name": "CreateOrUpdate Calendar SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3296da4a-8dcf-400b-aba7-4d08e61f5222",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CAL\",\r\n    \"description\": \"Monthly (1st of the month)\",\r\n    \"calendarType\": \"YEARLY\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Calendar SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da5e29c5-aad8-423e-85a0-e05c87ac5fd3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.calendar.code).to.eql(pm.environment.get(\"testCode\")+\"_CAL\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal Monthly (1st of the month)\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.calendar.description).to.eql(\"Monthly (1st of the month)\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/?calendarCode={{testCode}}_CAL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												""
											],
											"query": [
												{
													"key": "calendarCode",
													"value": "{{testCode}}_CAL"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Calendar ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c663d23c-dcf4-4115-9285-6a782a1387b1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Calendar with code=\"+pm.environment.get(\"testCode\")+\"_CAL already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CAL\",\r\n    \"description\": \"Monthly (1st of the month)\",\r\n    \"calendarType\": \"YEARLY\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Calendar ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0dfc655c-60ae-4cb9-a8b2-e559600d08c3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Calendar with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"Monthly (1st of the month)\",\r\n    \"calendarType\": \"YEARLY\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Calendar SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7e9aca2c-ad34-4991-a32e-b7bae5412997",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CAL\",\r\n    \"description\": \"Monthly (1st of the month) updated\",\r\n    \"calendarType\": \"YEARLY\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Calendar SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d60f96e5-4547-4911-b961-b705156f20a6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CAL\",\r\n    \"description\": \"Monthly (1st of the month) updated\",\r\n    \"calendarType\": \"YEARLY\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Calendar SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a625677f-5289-4ade-a27c-ce72f6a96a3a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.calendar.code).to.eql(pm.environment.get(\"testCode\")+\"_CAL\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal Monthly (1st of the month)\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.calendar.description).to.eql(\"Monthly (1st of the month) updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/?calendarCode={{testCode}}_CAL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												""
											],
											"query": [
												{
													"key": "calendarCode",
													"value": "{{testCode}}_CAL"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Calendar MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9bf16e77-d624-46cd-95ba-bca85f69794c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: calendarType.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CAL\",\r\n    \"description\": \"Monthly (1st of the month)\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Calendar GENERIC_API_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98b5a4dd-a75f-4a00-89c0-0bba8f9097b9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"GENERIC_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"query did not return a unique result\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"Monthly (1st of the month)\",\r\n    \"calendarType\": \"YEARLY\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Calendar INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f613f50-5457-490b-836f-32c03399960d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `org.meveo.api.dto.CalendarTypeEnum` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CAL\",\r\n    \"description\": \"Monthly (1st of the month)\",\r\n    \"calendarType\": \"INVALID\",\r\n    \"days\": [\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JANUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"FEBRUARY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MARCH\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"APRIL\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"MAY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JUNE\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"JULY\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"AUGUST\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"SEPTEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"OCTOBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"NOVEMBER\"\r\n        },\r\n        {\r\n            \"day\": \"1\",\r\n            \"month\": \"DECEMBER\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Calendar SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "92a1d5cd-0748-41ff-ba38-ccfae6ee0262",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/{{testCode}}_CAL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"{{testCode}}_CAL"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Calendar ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ea6c0e44-c6f0-4887-a362-7e61f14fbfc3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Calendar with code=\"+pm.environment.get(\"testCode\")+\"_CAL does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/calendar/{{testCode}}_CAL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"calendar",
												"{{testCode}}_CAL"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Channel",
							"item": [
								{
									"name": "CreateOrUpdate Channel SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9fb856bf-c492-49f3-bd2d-d735411c9cc4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CH\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Channel SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa2eadad-6666-45ce-9bba-2653635c94c6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.channel.code).to.eql(pm.environment.get(\"testCode\")+\"_CH\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.channel.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel?channelCode={{testCode}}_CH",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel"
											],
											"query": [
												{
													"key": "channelCode",
													"value": "{{testCode}}_CH"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Channel ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e4c88ba5-c185-45ad-8fae-335a40126ee4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Channel with code=\"+pm.environment.get(\"testCode\")+\"_CH already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CH\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Channel ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "727c8fe0-458a-41c5-acac-1f85b6bdcc12",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Channel with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Channel SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "59d43142-01ad-479d-a50a-d3f79126af6a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CH\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Channel SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "82b71f71-70c7-4a14-96c6-8abd614de03e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CH\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Channel SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "849f32ad-9075-48e4-8fad-9b674039089e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.channel.code).to.eql(pm.environment.get(\"testCode\")+\"_CH\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.channel.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel?channelCode={{testCode}}_CH",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel"
											],
											"query": [
												{
													"key": "channelCode",
													"value": "{{testCode}}_CH"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Channel MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "20ba2f14-386b-40e9-a489-3f7a790daa0a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Channel INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3dcb4d09-5755-4c75-9cb1-96f5e770a237",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Boolean` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CH\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"disabled\": \"INVALID\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Channel SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76ef05b6-948e-4cf9-9ad2-84b23822ddc3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel?channelCode={{testCode}}_CH",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel"
											],
											"query": [
												{
													"key": "channelCode",
													"value": "{{testCode}}_CH"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Channel ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "068d64db-eec4-4d5d-b3f0-d9932df5ff57",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Channel with code=\"+pm.environment.get(\"testCode\")+\"_CH does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel?channelCode={{testCode}}_CH",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel"
											],
											"query": [
												{
													"key": "channelCode",
													"value": "{{testCode}}_CH"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CountryIso",
							"item": [
								{
									"name": "CreateOrUpdate CountryIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "beb77158-3746-48c8-b187-b706d075cd3f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"TS\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read CountryIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3665ee98-14d3-4910-9425-8549505f8507",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal TS\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.country.countryCode).to.eql(\"TS\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.country.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso?countryCode=TS",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso"
											],
											"query": [
												{
													"key": "countryCode",
													"value": "TS"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CountryIso  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e2a911a2-24e9-406d-9f69-443680c5960e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Country with code=TS already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"TS\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CountryIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "626d6b61-1e02-49f4-b6a0-a16d33e88614",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Country with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CountryIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aba6555b-678e-4832-a6ae-dea86b865e22",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"TS\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CountryIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a3e86d81-3946-43f9-9a4e-a4c46b9c2a39",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"TS\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read CountryIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6479109e-9833-4f27-ac39-6d1b0b4ea533",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal TS\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.country.countryCode).to.eql(\"TS\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.country.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso?countryCode=TS",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso"
											],
											"query": [
												{
													"key": "countryCode",
													"value": "TS"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CountryIso  MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "28c64aa9-0f43-4016-a8ea-48b19a5bb266",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: currencyCode.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"MISSING\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"FRA\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CountryIso INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "25364537-2dd2-49b9-ba5f-08505b74c53e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize instance of `java.util.ArrayList` out of VALUE_STRING\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"INVALID\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\",\r\n    \"languageDescriptions\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CountryIso INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a5406c42-ab32-4a11-b086-64760abe04dd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"countryCode size must be between 0 and 10\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"TOO_LONG_NAME\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"FRA\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CountryIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f1085276-e1b9-4a2c-9820-113d1354a2c6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Language with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"countryCode\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"languageCode\": \"NOT_EXIST\",\r\n    \"currencyCode\": \"EUR\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CountryIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c62608d-afea-4317-94ac-e661ee6ddc9b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso/TS",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso",
												"TS"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CountryIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c934af1a-b957-42b1-a843-6a5ec9fb89c5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Country with code=TS does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/countryIso/TS",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"countryIso",
												"TS"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "CurrencyIso",
							"item": [
								{
									"name": "CreateOrUpdate CurrencyIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6fdd5e99-22d3-4001-a788-c0ec92a4b9b6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read CurrencyIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fce798f4-8667-4c67-8bf4-178016628183",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal TST\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.currency.code).to.eql(\"TST\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.currency.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso?currencyCode=TST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso"
											],
											"query": [
												{
													"key": "currencyCode",
													"value": "TST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CurrencyIso ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f12532ee-62e2-4903-9c20-ed52d41b22b2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Currency with code=TST already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CurrencyIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9046334-d523-4a63-bcb1-0a063ab64030",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Currency with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CurrencyIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "171302ed-fbe7-4324-9cbd-ae9f55f38050",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CurrencyIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b92a3778-f319-4ec2-99aa-d9010a6162df",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read CurrencyIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4f1198c5-e0b6-43d0-81e7-24632eaa3d61",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal TST\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.currency.code).to.eql(\"TST\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.currency.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso?currencyCode=TST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso"
											],
											"query": [
												{
													"key": "currencyCode",
													"value": "TST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CurrencyIso INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "870ae1ff-0af5-4f6e-b2e3-50e1fb938535",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"currencyCode size must be between 0 and 3\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TEST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CurrencyIso  MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aead77ac-4f39-4148-b5ca-e861a6473ed7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate CurrencyIso  GENERIC_API_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "49d14ded-f285-4073-ad98-569db6c11d8e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"GENERIC_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"ERROR: null value in column\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CurrencyIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e5c4993f-e9eb-4553-8d44-e0ae02c8057a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso/TST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso",
												"TST"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CurrencyIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d9ed4af7-03fe-4f91-8d50-836db4b32124",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Currency with code=TST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/currencyIso/TST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"currencyIso",
												"TST"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "LanguageIso",
							"item": [
								{
									"name": "CreateOrUpdate LanguageIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "53d91154-8a66-4103-a832-8e6cabfe05f7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n  \"code\": \"TST\",\r\n  \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read LanguageIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "652bf34b-40f6-4aa1-97df-4f358c3db513",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal TST\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.language.code).to.eql(\"TST\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.language.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso?languageCode=TST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso"
											],
											"query": [
												{
													"key": "languageCode",
													"value": "TST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create LanguageIso  ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3f6038bc-fc03-49c5-9cb9-0b0460839ca8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Language with code=TST already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update LanguageIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "33073526-6403-45ab-93a6-8d906338c46e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Language with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update LanguageIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86d004d6-9916-4cbb-ae92-86c034eb9575",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate LanguageIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ab3f706b-f98c-45e4-a1f5-8c93c6f4ff08",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read LanguageIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83c5fca8-8062-46b0-961c-130a1d532739",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal TST\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.language.code).to.eql(\"TST\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.language.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso?languageCode=TST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso"
											],
											"query": [
												{
													"key": "languageCode",
													"value": "TST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate LanguageIso INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b274e24b-5b25-44f2-a0e7-dac76c6abd62",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"languageCode size must be between 0 and 3\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TEST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate LanguageIso MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "511594b2-5f5d-4936-b7e9-8eb3d1ab2ed2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate LanguageIso GENERIC_API_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "376caba4-dd77-4dd7-9788-fd44021f8b75",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"GENERIC_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"ERROR: null value in column\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TST\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete LanguageIso SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50f3fcf5-d0c2-453f-85c0-deee751fed97",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso/TST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso",
												"TST"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete LanguageIso ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e88b451-6040-4ec2-9df0-ca4e2dbd7bb3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Language with code=TST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/languageIso/TST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"languageIso",
												"TST"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Provider",
							"item": [
								{
									"name": "Create Provider BUSINESS_API_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9fcab78a-9948-49f6-b9fb-7fd998d194ba",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"BUSINESS_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"There should already be a provider setup\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PROVIDER\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"enterprise\": \"true\",\r\n    \"rounding\": \"5\",\r\n    \"invoiceConfiguration\": {\r\n        \"displaySubscriptions\": \"true\",\r\n        \"displayServices\": \"true\",\r\n        \"displayOffers\": \"true\",\r\n        \"displayEdrs\": \"true\",\r\n        \"displayProvider\": \"true\",\r\n        \"displayCfAsXML\": \"true\",\r\n        \"displayPricePlans\": \"true\",\r\n        \"displayDetail\": \"true\",\r\n        \"displayChargesPeriods\": \"true\",\r\n        \"displayFreeTransacInInvoice\": \"false\",\r\n        \"displayBillingCycle\": \"true\",\r\n        \"displayOrders\": \"true\"\r\n    },\r\n    \"bankCoordinates\": {\r\n        \"iban\": \"30004 01234 12345678901 23\",\r\n        \"bic\": \"BNPAFRPPXXX\",\r\n        \"ics\": \"\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/provider",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Provider SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ac6c82a-6733-4c9c-88ba-5710fa559de1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PROVIDER\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"enterprise\": \"true\",\r\n    \"rounding\": \"5\",\r\n    \"invoiceConfiguration\": {\r\n        \"displaySubscriptions\": \"true\",\r\n        \"displayServices\": \"true\",\r\n        \"displayOffers\": \"true\",\r\n        \"displayEdrs\": \"true\",\r\n        \"displayProvider\": \"true\",\r\n        \"displayCfAsXML\": \"true\",\r\n        \"displayPricePlans\": \"true\",\r\n        \"displayDetail\": \"true\",\r\n        \"displayChargesPeriods\": \"true\",\r\n        \"displayFreeTransacInInvoice\": \"false\",\r\n        \"displayBillingCycle\": \"true\",\r\n        \"displayOrders\": \"true\"\r\n    },\r\n    \"bankCoordinates\": {\r\n        \"iban\": \"30004 01234 12345678901 23\",\r\n        \"bic\": \"BNPAFRPPXXX\",\r\n        \"ics\": \"\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/provider",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Provider SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a4210e7-3309-4501-be65-c05857df01b5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.provider.code).to.eql(pm.environment.get(\"testCode\")+\"_PROVIDER\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.provider.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/provider",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Provider SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ded68e9-1fb2-4645-a31b-3299d024645f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PROVIDER\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"enterprise\": \"true\",\r\n    \"rounding\": \"5\",\r\n    \"invoiceConfiguration\": {\r\n        \"displaySubscriptions\": \"true\",\r\n        \"displayServices\": \"true\",\r\n        \"displayOffers\": \"true\",\r\n        \"displayEdrs\": \"true\",\r\n        \"displayProvider\": \"true\",\r\n        \"displayCfAsXML\": \"true\",\r\n        \"displayPricePlans\": \"true\",\r\n        \"displayDetail\": \"true\",\r\n        \"displayChargesPeriods\": \"true\",\r\n        \"displayFreeTransacInInvoice\": \"false\",\r\n        \"displayBillingCycle\": \"true\",\r\n        \"displayOrders\": \"true\"\r\n    },\r\n    \"bankCoordinates\": {\r\n        \"iban\": \"30004 01234 12345678901 23\",\r\n        \"bic\": \"BNPAFRPPXXX\",\r\n        \"ics\": \"\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/provider",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Provider SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a665e229-ee4b-4c9a-b939-6ead4cb5e651",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.provider.code).to.eql(pm.environment.get(\"testCode\")+\"_PROVIDER\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.provider.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/provider",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Provider INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "29ac95a7-ca80-4b45-89cd-9c847b6fe711",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Boolean` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_PROVIDER\",\r\n  \"description\": \"{{testDescription}}\",\r\n    \"enterprise\": \"INVALID\",\r\n    \"rounding\": \"5\",\r\n    \"invoiceConfiguration\": {\r\n      \"displaySubscriptions\": \"true\",\r\n      \"displayServices\": \"true\",\r\n      \"displayOffers\": \"true\",\r\n      \"displayEdrs\": \"true\",\r\n      \"displayProvider\": \"true\",\r\n      \"displayCfAsXML\": \"true\",\r\n      \"displayPricePlans\": \"true\",\r\n      \"displayDetail\": \"true\",\r\n      \"displayChargesPeriods\": \"true\",\r\n      \"displayFreeTransacInInvoice\": \"false\",\r\n      \"displayBillingCycle\": \"true\",\r\n      \"displayOrders\": \"true\"\r\n    },\r\n    \"bankCoordinates\": {\r\n        \"iban\": \"30004 01234 12345678901 23\",\r\n        \"bic\": \"BNPAFRPPXXX\",\r\n        \"ics\": \"\"\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/provider",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Provider INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d8fbdf6f-4c47-4cd3-beab-4b43af90607e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Integer` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"code\": \"{{testCode}}_PROVIDER\",\r\n  \"description\": \"{{testDescription}}\",\r\n    \"enterprise\": \"true\",\r\n    \"rounding\": \"INVALID\",\r\n    \"invoiceConfiguration\": {\r\n      \"displaySubscriptions\": \"true\",\r\n      \"displayServices\": \"true\",\r\n      \"displayOffers\": \"true\",\r\n      \"displayEdrs\": \"true\",\r\n      \"displayProvider\": \"true\",\r\n      \"displayCfAsXML\": \"true\",\r\n      \"displayPricePlans\": \"true\",\r\n      \"displayDetail\": \"true\",\r\n      \"displayChargesPeriods\": \"true\",\r\n      \"displayFreeTransacInInvoice\": \"false\",\r\n      \"displayBillingCycle\": \"true\",\r\n      \"displayOrders\": \"true\"\r\n    },\r\n    \"bankCoordinates\": {\r\n        \"iban\": \"30004 01234 12345678901 23\",\r\n        \"bic\": \"BNPAFRPPXXX\",\r\n        \"ics\": \"\"\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/provider",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "aa4fe776-ad15-4099-8628-240e64355d90",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "02178342-d122-42ad-aeb8-efd02310d838",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Role",
							"item": [
								{
									"name": "CreateOrUpdate Role SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "aacf64b0-3ab5-4d09-9804-29ae1ef43e0f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{testCode}}_ROLE\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"permission\": [\r\n        {\r\n            \"permission\": \"cc-module-read\",\r\n            \"name\": \"cc-module-read\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Role SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "683b2757-a408-4a75-8492-bc528c36be01",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal\"+pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.roleDto.name).to.eql(pm.environment.get(\"testCode\") + \"_ROLE\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.roleDto.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role?roleName={{testCode}}_ROLE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role"
											],
											"query": [
												{
													"key": "roleName",
													"value": "{{testCode}}_ROLE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Role ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4891d69c-91e2-4943-a67e-274e5fbea5f2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Role with role name=\"+pm.environment.get(\"testCode\")+\"_ROLE already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{testCode}}_ROLE\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"permission\": [\r\n        {\r\n            \"permission\": \"cc-module-read\",\r\n            \"name\": \"cc-module-read\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Role ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ac46ba88-f19a-4fe1-8d5c-6b991fdda742",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Role with name=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"permission\": [\r\n        {\r\n            \"permission\": \"cc-module-read\",\r\n            \"name\": \"cc-module-read\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Role SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "064f9d39-870e-41f6-a1c7-1d8e92ce7ae7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{testCode}}_ROLE\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Role  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "235fb94b-7fe9-48d4-b273-1cf33807e0f8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{testCode}}_ROLE\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Role  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4de50303-487e-48fd-8699-cf2596b220f2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal\" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.roleDto.name).to.eql(pm.environment.get(\"testCode\") + \"_ROLE\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.roleDto.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role?roleName={{testCode}}_ROLE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role"
											],
											"query": [
												{
													"key": "roleName",
													"value": "{{testCode}}_ROLE"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Role INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "529c8404-946d-4299-96aa-ecfc57664287",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize instance of `java.util.ArrayList` out of VALUE_STRING\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{testCode}}_ROLE\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"permission\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Role MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7519fafc-42d7-4aa1-af45-643c770000a0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: name.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{ \r\n\t\"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Role ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dfed57c4-0ed3-4fee-9ff3-e17782b40250",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Permission with name=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"name\": \"{{testCode}}_ROLE\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"permission\": [\r\n        {\r\n            \"permission\": \"cc-module-read\",\r\n            \"name\": \"NOT_EXIST\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Role  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "72dd71ef-77a6-400b-a0df-16eaf5152605",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role/{{testCode}}_ROLE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role",
												"{{testCode}}_ROLE"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Role ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7f95d664-4b45-4e35-97bb-8a9ce3cc4620",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Role with name=\"+pm.environment.get(\"testCode\")+\"_ROLE does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role/{{testCode}}_ROLE",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role",
												"{{testCode}}_ROLE"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Tax",
							"item": [
								{
									"name": "CreateOrUpdate Tax SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f0409c27-ebc1-4404-82f4-c389522f1aa0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TAX\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"percent\": \"20\",\r\n    \"accountingCode\": null,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"TVA 20%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 20%\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Tax SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "db3f89e7-f272-42b9-aa0a-15e55e25b60e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal\" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.tax.code).to.eql(pm.environment.get(\"testCode\") + \"_TAX\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.tax.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax?taxCode={{testCode}}_TAX",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax"
											],
											"query": [
												{
													"key": "taxCode",
													"value": "{{testCode}}_TAX"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Tax ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf974242-116d-443a-9961-4d7d062891bb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Tax with code=\" + pm.environment.get(\"testCode\") + \"_TAX already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TAX\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"percent\": \"20\",\r\n    \"accountingCode\": null,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"TVA 20%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 20%\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Tax  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cdfbb0de-c1fd-47ce-b70b-bd3b2643d337",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Tax with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"percent\": \"20\",\r\n    \"accountingCode\": null,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"TVA 20%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 20%\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Tax SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d792e847-65a1-40da-8647-469047899002",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TAX\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"percent\": \"30\",\r\n    \"accountingCode\": null,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"TVA 30%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 30%\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Tax SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7fd71b04-3603-4536-b64a-cf777c42a0b9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TAX\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"percent\": \"30\",\r\n    \"accountingCode\": null,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"TVA 30%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 30%\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Tax   SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4c110a8-212c-435f-9bdc-78b7a157fefc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal\" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.tax.code).to.eql(pm.environment.get(\"testCode\") + \"_TAX\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.tax.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax?taxCode={{testCode}}_TAX",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax"
											],
											"query": [
												{
													"key": "taxCode",
													"value": "{{testCode}}_TAX"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Tax INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50348526-52ef-4c8c-b554-cc1098478663",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.math.BigDecimal` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"percent\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Tax INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86250ff9-1932-49b9-a44d-b664917ea9c3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Language INVALID is not supported by the provider.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"percent\": \"20\",\r\n    \"accountingCode\": null,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"INVALID\",\r\n            \"description\": \"TVA 20%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 20%\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Tax MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa20eabd-b427-4a4b-bcc9-47f51bbcd6aa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: percent.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TAX\",\r\n    \"description\": \"{{testDescription}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Tax ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ed28562-ce78-454a-858c-cf8c2d11709f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"AccountingCode with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_TAX\",\r\n    \"description\": \"TVA 20%\",\r\n    \"percent\": \"20\",\r\n    \"accountingCode\": \"NOT_EXIST\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"TVA 20%\"\r\n        },\r\n        {\r\n            \"languageCode\": \"ENG\",\r\n            \"description\": \"VAT 20%\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Tax SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76006be3-3535-4ac0-b39d-626eb348e8ba",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax/{{testCode}}_TAX",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax",
												"{{testCode}}_TAX"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Tax  ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "082d1145-674c-4948-ac60-8dafabd55083",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Tax with code=\"+pm.environment.get(\"testCode\")+\"_TAX does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/tax/{{testCode}}_TAX",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"tax",
												"{{testCode}}_TAX"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Invoice Type",
							"item": [
								{
									"name": "CreateOrUpdate Invoice Type SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b3296ac0-696a-46ea-8d14-6162af95b12e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Invoice Type SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5a1f0b2d-84d3-4569-8d11-b861dc1c9cf8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal\" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceTypeDto.code).to.eql(pm.environment.get(\"testCode\") + \"_IT\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceTypeDto.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType?invoiceTypeCode={{testCode}}_IT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType"
											],
											"query": [
												{
													"key": "invoiceTypeCode",
													"value": "{{testCode}}_IT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Invoice Type ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d8a39b86-80c6-4713-beab-1b0af75abb09",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceType with code=\" + pm.environment.get(\"testCode\") + \"_IT already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice Type ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8f2e4873-e3d9-4dfe-8df4-f04d4904508d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceType with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Invoice Type SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "30d05c02-76eb-4574-95a3-c8ca82bbcf92",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IT\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Type SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f6dc73b1-d75e-4774-93eb-1b54f6c1cc39",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IT\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Invoice Type SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7e1f4c1-47f0-4c3e-a5b7-9314320c4d46",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal\" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceTypeDto.code).to.eql(pm.environment.get(\"testCode\") + \"_IT\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.invoiceTypeDto.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType?invoiceTypeCode={{testCode}}_IT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType"
											],
											"query": [
												{
													"key": "invoiceTypeCode",
													"value": "{{testCode}}_IT"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Type INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "13bb7c82-17c4-4d4b-82be-6e9514a13058",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `boolean` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_IT\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": \"INVALID\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Type MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "040bc024-6cef-4feb-b12e-2c0bd877de58",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Type ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cbe05ec1-8ac5-4509-b403-f058d70dde07",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"EmailTemplate with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false,\r\n    \"mailingType\": \"manual\",\r\n    \"emailTemplateCode\": \"NOT_EXIST\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Type ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4aaa9083-7f48-4a31-9580-7a2cfd7afc68",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceSequence with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"XX\",\r\n        \"invoiceSequenceCode\": \"NOT_EXIST\"\r\n    },\r\n    \"matchingAuto\": false,\r\n    \"mailingType\": \"XX\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Type ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "990c5a57-c5a6-4705-894a-3bed4dbd40a5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"OCCTemplate with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"NOT_EXIST\",\r\n    \"occTemplateNegativeCode\": \"INV_CRN\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"TMP\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false,\r\n    \"mailingType\": \"manual\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Invoice Type ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "673abbfb-7da1-4f19-b94f-2196ffcf4031",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"OCCTemplate with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"occTemplateCode\": \"INV_STD\",\r\n    \"occTemplateNegativeCode\": \"NOT_EXIST\",\r\n    \"sequenceDto\": {\r\n        \"prefixEL\": \"XX\",\r\n        \"invoiceSequenceCode\": \"COM\"\r\n    },\r\n    \"matchingAuto\": false,\r\n    \"mailingType\": \"XX\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Invoice Type SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "21c522ea-f6b9-4b25-9525-5900517bac68",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/{{testCode}}_IT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"{{testCode}}_IT"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Invoice Type ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58c186e1-7ef8-4e5b-b83e-4b6f082682a3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceType with code=\"+pm.environment.get(\"testCode\")+\"_IT does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/{{testCode}}_IT",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"{{testCode}}_IT"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Payments",
					"item": [
						{
							"name": "Credit Category",
							"item": [
								{
									"name": "CreateOrUpdate Credit Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "77f88249-e553-442a-bb3b-6f09de1f7365",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CrCat\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Credit Category  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8d5b47b-5e53-4b66-ae69-5b5576a93e83",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.creditCategory.code).to.eql(pm.environment.get(\"testCode\") + \"_CrCat\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.creditCategory.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory?creditCategoryCode={{testCode}}_CrCat",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory"
											],
											"query": [
												{
													"key": "creditCategoryCode",
													"value": "{{testCode}}_CrCat"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Credit Category ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f544be0c-04f7-4282-b2ba-c8b578c761c1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CreditCategory with code=\" + pm.environment.get(\"testCode\") + \"_CrCat already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CrCat\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Credit Category ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "140e3818-4f73-40b2-82f6-062b026f20c5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CreditCategory with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Credit Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bbe9aaea-47dc-44b2-82ef-d9040f492771",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CrCat\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Credit Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2bfc56a8-90ee-4f4e-9710-8b7b04b7703b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_CrCat\",\r\n    \"description\": \"{{testDescription}} updated\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Credit Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb1463e6-e701-4a22-8193-52fa7bdb20b4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.creditCategory.code).to.eql(pm.environment.get(\"testCode\") + \"_CrCat\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.creditCategory.description).to.eql(pm.environment.get(\"testDescription\") + \" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory?creditCategoryCode={{testCode}}_CrCat",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory"
											],
											"query": [
												{
													"key": "creditCategoryCode",
													"value": "{{testCode}}_CrCat"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Credit Category SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6af61288-5292-4560-9f3e-7fbbb524edcd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory/{{testCode}}_CrCat",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory",
												"{{testCode}}_CrCat"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Credit Category ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fbaf0e9e-aa62-4782-bba5-2481423416a1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"CreditCategory with code=\" + pm.environment.get(\"testCode\") + \"_CrCat does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/creditCategory/{{testCode}}_CrCat",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"creditCategory",
												"{{testCode}}_CrCat"
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "d631d48a-e353-49f7-a94a-d2e8e6cda8a6",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "e4a3d4c1-5e32-444e-ae26-c737bac8e807",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Payment Gateway",
							"item": [
								{
									"name": "CreateOrUpdate Payment Gateway SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "776d9c25-4eb4-479a-ba25-aa2edde03533",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PG\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"type\": \"CUSTOM\",\r\n    \"paymentMethodType\": \"CHECK\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Payment Gateway  SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "61f7801d-4394-4343-a5ad-81517e1ae070",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentGateway.code).to.eql(pm.environment.get(\"testCode\") + \"_PG\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentGateway.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway?code={{testCode}}_PG",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway"
											],
											"query": [
												{
													"key": "code",
													"value": "{{testCode}}_PG"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Payment Gateway ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a513a5b-a021-4f5a-8e65-4ededa2985dd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"PaymentGateway with code=\" + pm.environment.get(\"testCode\") + \"_PG already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PG\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"type\": \"CUSTOM\",\r\n    \"paymentMethodType\": \"CHECK\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Payment Gateway ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "991f524b-f535-4a29-a692-51e748f4d9fb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"PaymentGateway with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"type\": \"CUSTOM\",\r\n    \"paymentMethodType\": \"CHECK\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Payment Gateway SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc4727a2-4e1f-4ac2-b341-b4cb0e7cbc5c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PG\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"type\": \"CUSTOM\",\r\n    \"paymentMethodType\": \"CHECK\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Gateway SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fc7ff952-78f8-4aad-bbc0-e262f1ab3036",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PG\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"type\": \"CUSTOM\",\r\n    \"paymentMethodType\": \"CHECK\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Payment Gateway SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5102f3bd-983a-419d-83f2-743f85a979e5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentGateway.code).to.eql(pm.environment.get(\"testCode\") + \"_PG\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentGateway.description).to.eql(pm.environment.get(\"testDescription\") + \" updated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway?code={{testCode}}_PG",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway"
											],
											"query": [
												{
													"key": "code",
													"value": "{{testCode}}_PG"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Gateway MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c49102ce-5649-4797-9a26-cf22af668902",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code, type, paymentMethodType.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Gateway INVALID_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d2c56d9f-be7c-4457-b414-a455005fd49e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `org.meveo.model.payments.PaymentGatewayTypeEnum` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PG\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"type\": \"INVALID\",\r\n    \"paymentMethodType\": \"CHECK\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Payment Gateway SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cc00e578-e6a1-40f8-a25a-4016d4d92431",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway?code={{testCode}}_PG",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway"
											],
											"query": [
												{
													"key": "code",
													"value": "{{testCode}}_PG"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Payment Gateway ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "202a8f99-2930-4666-97a6-529103408839",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"PaymentGateway with code=\" + pm.environment.get(\"testCode\") + \"_PG does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentGateway?code={{testCode}}_PG",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentGateway"
											],
											"query": [
												{
													"key": "code",
													"value": "{{testCode}}_PG"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2dc12075-1cdd-440a-b6c8-d2951e5c648c",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d82dcaa6-c2f4-4b85-83f9-fa07624685a1",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Payment Schedule Template",
							"item": [
								{
									"name": "CreateOrUpdate Payment Schedule Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c51ab3e-c508-473a-b0c0-7dba99447e3a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"    pm.globals.set(\"id_PST\", jsonData.message);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Payment Schedule Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c033c80-d790-4a38-b533-1315d72ba360",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentScheduleTemplateDto.code).to.eql(pm.environment.get(\"testCode\") + \"_PST\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentScheduleTemplateDto.description).to.eql(pm.environment.get(\"testDescription\"));",
													"});",
													"pm.test(request.name + \" - Id is equal \"+pm.globals.get(\"id_PST\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentScheduleTemplateDto.id+\"\").to.eql(pm.globals.get(\"id_PST\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate?paymentScheduleTemplateCode={{testCode}}_PST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate"
											],
											"query": [
												{
													"key": "paymentScheduleTemplateCode",
													"value": "{{testCode}}_PST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Payment Schedule Template ENTITY_ALREADY_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4b4f1ab7-7bdb-4ce4-9e33-f0711f2e2b91",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(403);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_ALREADY_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"PaymentScheduleTemplate with code=\" + pm.environment.get(\"testCode\") + \"_PST already exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Payment Schedule Template ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "480edba2-a554-4774-9888-45ba0b5ce99f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"PaymentScheduleTemplate with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"NOT_EXIST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update Payment Schedule Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "556bfab9-3ff8-4521-a61f-7c44d121fb68",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PST\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8df217c5-a8a2-4924-88a8-50c2c38c84dc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PST\",\r\n    \"description\": \"{{testDescription}} updated\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Read Payment Schedule Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "541beb6c-5fa7-41c3-949e-6524fd3c9bfa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Code is equal \" + pm.environment.get(\"testCode\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentScheduleTemplateDto.code).to.eql(pm.environment.get(\"testCode\") + \"_PST\");",
													"});",
													"",
													"pm.test(request.name + \" - Description is equal \" + pm.environment.get(\"testDescription\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentScheduleTemplateDto.description).to.eql(pm.environment.get(\"testDescription\")+\" updated\");",
													"});",
													"pm.test(request.name + \" - Id is equal \"+pm.globals.get(\"id_PST\"), function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.paymentScheduleTemplateDto.id+\"\").to.eql(pm.globals.get(\"id_PST\"));",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate?paymentScheduleTemplateCode={{testCode}}_PST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate"
											],
											"query": [
												{
													"key": "paymentScheduleTemplateCode",
													"value": "{{testCode}}_PST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template MISSING_PARAMETER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f6a4ee88-44c3-4ab5-9dbc-0bd0929e4999",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"MISSING_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"The following parameters are required or contain invalid values: code, calendarCode, serviceTemplateCode, paymentDayInMonth, amount, paymentLabel, advancePaymentInvoiceTypeCode, advancePaymentInvoiceSubCategoryCode, generateAdvancePaymentInvoice, doPayment.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"description\": \"{{testDescription}}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template INVALID_PARAMETER_amount",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "29250044-7d91-40ca-9bb4-abef6de754b9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Integer` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}_PST\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"INVALID\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template INVALID_PARAMETER_doPayment",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a003c407-2279-472d-bf19-1e8163b207a5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Boolean` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"INVALID\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template INVALID_PARAMETER_generateAdvancePaymentInvoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "94552a3b-57d3-4fd1-94a6-199106dc6b83",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.math.BigDecimal` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"INVALID\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template INVALID_PARAMETER_paymentDateInMonth",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4cd61bb9-06cf-466c-9412-3b87fa4451ec",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize value of type `java.lang.Integer` from String\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"INVALID\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template ENTITY_DOES_NOT_EXIST_advPaymentInvSubCat",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7fd87fbf-08f7-4a99-b0c0-8f1cb230e0e8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceSubCategory with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"NOT_EXIST\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template ENTITY_DOES_NOT_EXIST_advPaymentInvType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e06404b8-5a58-4583-a309-5bd61a3c469b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"InvoiceType with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"NOT_EXIST\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template ENTITY_DOES_NOT_EXIST_calendarCode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a1f336d-4124-4550-ad13-88942895c307",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Calendar with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"NOT_EXIST\",\r\n    \"serviceTemplateCode\": \"SE_REC_FLAT_REBATE\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate Payment Schedule Template ENTITY_DOES_NOT_EXIST_serviceTemplate",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c13fca6c-0cde-49ff-8a28-0db55f81ddda",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ServiceTemplate with code=NOT_EXIST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{testCode}}\",\r\n    \"description\": \"{{testDescription}}\",\r\n    \"calendarCode\": \"CAL_CLASSIC_MONTHLY_1ST\",\r\n    \"serviceTemplateCode\": \"NOT_EXIST\",\r\n    \"paymentDayInMonth\": \"1\",\r\n    \"amount\": \"100\",\r\n    \"paymentLabel\": \"Test Label\",\r\n    \"advancePaymentInvoiceTypeCode\": \"CLASSIC_ADJ\",\r\n    \"advancePaymentInvoiceSubCategoryCode\": \"CMP_DATA\",\r\n    \"generateAdvancePaymentInvoice\": \"true\",\r\n    \"doPayment\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Payment Schedule Template SUCCESS",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d6abb682-bb17-43fd-bb68-4a6cecf1d397",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate?paymentScheduleTemplateCode={{testCode}}_PST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate"
											],
											"query": [
												{
													"key": "paymentScheduleTemplateCode",
													"value": "{{testCode}}_PST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Payment Schedule Template ENTITY_DOES_NOT_EXISTS_EXCEPTION",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b136ec30-ee81-49f6-b465-b14ebe8b88ad",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"PaymentScheduleTemplate with code=\" + pm.environment.get(\"testCode\") + \"_PST does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/payment/paymentScheduleTemplate?paymentScheduleTemplateCode={{testCode}}_PST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"payment",
												"paymentScheduleTemplate"
											],
											"query": [
												{
													"key": "paymentScheduleTemplateCode",
													"value": "{{testCode}}_PST"
												}
											]
										}
									},
									"response": []
								}
							],
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "488ce484-63eb-4917-b16e-ed395f1b478f",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "b61941ab-1928-4dc9-90a8-984148eb2fea",
										"type": "text/javascript",
										"exec": [
											""
										]
									}
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Custom",
					"item": [
						{
							"name": "Entity Customization",
							"item": [],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Custom Table",
							"item": [],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "# Portal APIs\r\n\r\nHere are all portal APIs. Are tested the CRUD processes when available as well as exceptions that might occure, to assure that everything works as intended.\r\n\r\n### Typical execution\r\n\r\nThe typical test consists of:\r\n1. A successful createOrUpdate (POST) - remplace with create when createOrUpdate is unavailable\r\n2. A successful read (GET) - check if entity created in point 1 is retreived\r\n3. A failed Create (POST) - due to entity already created\r\n4. A failed update (PUT) - due to a non existant entity\r\n5. A succesfull update (PUT) - update entity created in point 1\r\n6. A succesfull createOrUpdate (POST) - update entity created in point 1 - skip this if createOrUpdate is unavailable\r\n7. A successful read (GET) - check if updated entity from point 5 and 6 have been correctly updated\r\n8. Any extra failed tests such as MISSING_PARAMETER or INVALID_PARAMETER\r\n\r\nPlease ensure that tests are correctly asserted in the Tests tab.\r\n\r\n## Table of portal entities\r\n\r\n| Entity                    | Create | Read | Update | Delete | Other           | Exception Handling |\r\n|---------------------------|--------|------|--------|--------|-----------------|--------------------|\r\n| Access                    |        |      |        |        |                 |                    |\r\n| Account Hierarchy         | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Account Operation         | TODO   | TODO | TODO   | TODO   |                 | TODO               |\r\n| Accouting Code            | OK     | OK   | OK     | OK     |                 |                    |\r\n| Addressbook               |        |      |        |        |                 |                    |\r\n| Audit                     |        |      |        |        |                 |                    |\r\n| Billing Account           | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Billing Run               | OK     | NA   | NA     | NA     | Validate/Cancel | OK                 |\r\n| Billing Cycle             | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Business Account          |        |      |        |        |                 |                    |\r\n| Business Offer Model      |        |      |        |        |                 |                    |\r\n| Business Product Model    |        |      |        |        |                 |                    |\r\n| Business Service Model    |        |      |        |        |                 |                    |\r\n| Calendar                  | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Catalog                   |        |      |        |        |                 |                    |\r\n| Channel                   | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Channel and Segments      |        |      |        |        |                 |                    |\r\n| Charge Template           |        |      |        |        |                 |                    |\r\n| Chart                     |        |      |        |        |                 |                    |\r\n| Communication             |        |      |        |        |                 |                    |\r\n| Configuration             |        |      |        |        |                 |                    |\r\n| Contact                   |        |      |        |        |                 |                    |\r\n| Counter Template          |        |      |        |        |                 |                    |\r\n| CountryIso                | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Country                   |        |      |        |        |                 |                    |\r\n| Credit Category           | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Currency                  |        |      |        |        |                 |                    |\r\n| CurrencyIso               | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Custom Entity Instance    | NOK    | NOK  | TODO   | NOK    |                 | NOK                |\r\n| Custom Field Template     |        |      |        |        |                 |                    |\r\n| Custom Table              | NOK    | NOK  | TODO   | NOK    |                 | NOK                |\r\n| Customer                  | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Customer Account          | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Customer Brand            | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Customer Category         | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| DD Request Lot OP         |        |      |        |        |                 |                    |\r\n| Discount Plan             | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Discount Plan Item        |        |      |        |        |                 |                    |\r\n| Document Sign             |        |      |        |        |                 |                    |\r\n| Dunning Document          |        |      |        |        |                 |                    |\r\n| Email Notification        |        |      |        |        |                 |                    |\r\n| Email Template            |        |      |        |        |                 |                    |\r\n| Entity Customization      | NOK    | NOK  | TODO   | NOK    |                 | NOK                |\r\n| File Format               |        |      |        |        |                 |                    |\r\n| File Format               |        |      |        |        |                 |                    |\r\n| Filter                    |        |      |        |        |                 |                    |\r\n| Generic Workflow          |        |      |        |        |                 |                    |\r\n| Iban                      |        |      |        |        |                 |                    |\r\n| Import Export             |        |      |        |        |                 |                    |\r\n| Invoice                   | OK     | OK   | NA     | NA     | Generate        |                    |\r\n| Invoice Category          | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Invoice Sequence          | OK     | OK   | OK     | NA     |                 | OK                 |\r\n| Invoice SubCategory       | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Invoice Type              | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Invoicing                 |        |      |        |        |                 |                    |\r\n| Job Instance              | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Job Trigger               |        |      |        |        |                 |                    |\r\n| LanguageIso               | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Language                  |        |      |        |        |                 |                    |\r\n| Measurable Quantity       |        |      |        |        |                 |                    |\r\n| Mediation                 |        |      |        |        |                 |                    |\r\n| Metric Configuration      |        |      |        |        |                 |                    |\r\n| Meveo Instance            |        |      |        |        |                 |                    |\r\n| Module                    | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Notification              |        |      |        |        |                 |                    |\r\n| OccTemplate               | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Offer Template            | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Offer Template Category   |        |      |        |        |                 |                    |\r\n| One Shot Charge Template  |        |      |        |        |                 |                    |\r\n| Order                     |        |      |        |        |                 |                    |\r\n| Payment Gateway           | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Payment Method            | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Payment Schedule          | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Payment                   |        |      |        |        |                 |                    |\r\n| PDF Document              |        |      |        |        |                 |                    |\r\n| PdfInvoice                |        |      |        |        |                 |                    |\r\n| Price Plan                | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Provider                  | OK     | OK   | OK     | NA     |                 | OK                 |\r\n| Provider Contact          | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Query                     |        |      |        |        |                 |                    |\r\n| Quote                     |        |      |        |        |                 |                    |\r\n| Rated Transation          |        |      |        |        |                 |                    |\r\n| Tax                       | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Recurring Charge Template | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Refund                    |        |      |        |        |                 |                    |\r\n| Report Extract            |        |      |        |        |                 |                    |\r\n| Revenue Recognition Rules |        |      |        |        |                 |                    |\r\n| Role                      | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Rum Sequence              |        |      |        |        |                 |                    |\r\n| Script Instance           | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Seller                    | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Service Template          | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| SMS Notification          |        |      |        |        |                 |                    |\r\n| Subscription              | OK     | OK   | OK     | OK     | Activate        | OK                 |\r\n| Tax Category              |        |      |        |        |                 |                    |\r\n| Tax Class                 | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Tax Mapping               |        |      |        |        |                 |                    |\r\n| Terminate Reason          | OK     | TODO | TODO   | TODO   |                 | TODO               |\r\n| Timer Entity              |        |      |        |        |                 |                    |\r\n| Title                     | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| Triggered Edr             |        |      |        |        |                 |                    |\r\n| Unit of Measure           |        |      |        |        |                 |                    |\r\n| Unitary Custom Table      |        |      |        |        |                 |                    |\r\n| Usage                     |        |      |        |        |                 |                    |\r\n| Usage Charge Template     |        |      |        |        |                 |                    |\r\n| User                      |        |      |        |        |                 |                    |\r\n| User Account              | OK     | OK   | OK     | OK     |                 | OK                 |\r\n| User Hierarchy            |        |      |        |        |                 |                    |\r\n| Wallet                    | OK     | OK   | TODO   | NA     |                 | OK                 |\r\n| WebHook Notification      |        |      |        |        |                 |                    |\r\n| Workflow                  |        |      |        |        |                 |                    |",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "c4734879-52e1-4a2e-aaef-d7d68bae3071",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "eb137632-b2f6-4338-9121-7eafe1052d47",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Url",
			"item": [
				{
					"name": "Index",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17bc2d09-8185-47df-8808-31b6391e4d17",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/index.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"index.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/providers/providerSelfDetail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1a0d47d3-b295-47ce-9154-83787ab23c2a",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/providers/providerSelfDetail.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"providers",
								"providerSelfDetail.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "crm/providerContacts/providerContacts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6ce67aeb-14d8-4162-9471-b16a7c4bbc2c",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/crm/providerContacts/providerContacts.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"crm",
								"providerContacts",
								"providerContacts.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/meveoUsers/users",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba96ee26-4672-45c2-b5b4-3dd617270e18",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/meveoUsers/users.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"meveoUsers",
								"users.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/userRoles/userRoles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c98b81f6-d028-417e-bd59-2715b73a6d90",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/userRoles/userRoles.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"userRoles",
								"userRoles.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/userGroupHierarchy/userGroupHierarchy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1d9ceebc-0888-4c5b-996c-b7a3b314dc10",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/userGroupHierarchy/userGroupHierarchy.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"userGroupHierarchy",
								"userGroupHierarchy.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/sellers/sellers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6752bfc5-925e-4d7f-828b-eb55f2d731b0",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/sellers/sellers.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"sellers",
								"sellers.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/title/titles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "29fcb0df-c8a0-4fd4-939f-aba7615ddd3d",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/title/titles.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"title",
								"titles.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "crm/customerBrands/customerBrands",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eef5bf43-747f-4904-9191-ad16c8a20d73",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/crm/customerBrands/customerBrands.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"crm",
								"customerBrands",
								"customerBrands.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "crm/customerCategories/customerCategories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6f4e9fd9-37d8-4c9c-845d-e1754fbdb87b",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/crm/customerCategories/customerCategories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"crm",
								"customerCategories",
								"customerCategories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/creditCategories/creditCategories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17bae84a-4075-483e-bd9d-ace98153e968",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/creditCategories/creditCategories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"creditCategories",
								"creditCategories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "payments/occTemplates/occTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "21149274-a6f6-47ff-8a02-ebf85413fc8e",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/payments/occTemplates/occTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"payments",
								"occTemplates",
								"occTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/tradingLanguages/tradingLanguages",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e7cabcc-915f-4dd3-852b-73f6b104e0a2",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/tradingLanguages/tradingLanguages.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"tradingLanguages",
								"tradingLanguages.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/tradingCurrencies/tradingCurrencies",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d66d8048-c6ca-4560-a11f-8328079d0c00",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/tradingCurrencies/tradingCurrencies.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"tradingCurrencies",
								"tradingCurrencies.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/tradingCountries/tradingCountries",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c43760a-03d2-4ebb-ae5d-c49c8294399b",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/tradingCountries/tradingCountries.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"tradingCountries",
								"tradingCountries.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/multiLanguageField/multiLanguageFields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0f4413d6-b95e-4fac-a613-91f8affac286",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/multiLanguageField/multiLanguageFields.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"multiLanguageField",
								"multiLanguageFields.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/communication/emailTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6ba53dd-6611-41f8-9697-4b4a1a0418cc",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/communication/emailTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"communication",
								"emailTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/calendars/calendars",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c676262-4204-4f05-b4f2-685e04daaead",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/calendars/calendars.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"calendars",
								"calendars.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/billingCycles/billingCycles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4403502-fb36-4196-9960-400b4e8a2378",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/billingCycles/billingCycles.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"billingCycles",
								"billingCycles.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/taxes/taxes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "64b4e5fb-a4da-4f2f-9899-9a6726813c99",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/taxes/taxes.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"taxes",
								"taxes.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/invoiceCategories/invoiceCategories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4675e37c-5340-4905-b52c-01318a9cfd33",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/invoiceCategories/invoiceCategories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"invoiceCategories",
								"invoiceCategories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/invoiceSubCategories/invoiceSubCategories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1f2678de-1625-49f8-a3cb-08b5c266e9bf",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/invoiceSubCategories/invoiceSubCategories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"invoiceSubCategories",
								"invoiceSubCategories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/invoiceTypes/invoiceTypes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aba62f07-5f01-4d6f-aa09-5210aa2ead3e",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/invoiceTypes/invoiceTypes.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"invoiceTypes",
								"invoiceTypes.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/invoiceSequences/invoiceSequences",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17779fba-4b61-45e1-b9c1-b04646346970",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/invoiceSequences/invoiceSequences.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"invoiceSequences",
								"invoiceSequences.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/terminationReason/terminationReasons",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc0ccfb4-fcce-4cb2-a4b4-1c15b3e8a441",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/terminationReason/terminationReasons.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"terminationReason",
								"terminationReasons.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/channels/channels",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb012894-5c35-43e9-a10f-cc199a514d0a",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/channels/channels.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"channels",
								"channels.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/offerTemplates/offerTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1813b55b-20d0-4036-a187-0fdf04879b8c",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/offerTemplates/offerTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"offerTemplates",
								"offerTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/offerTemplateCategories/offerTemplateCategories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d4093c51-0cc8-44a5-b102-5621de941b2d",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/offerTemplateCategories/offerTemplateCategories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"offerTemplateCategories",
								"offerTemplateCategories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/serviceTemplates/serviceTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a1def18a-ee93-4ac8-8c57-c225da3a4a80",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/serviceTemplates/serviceTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"serviceTemplates",
								"serviceTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/chargeTemplates/chargeTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3cc95082-7d34-404c-90fe-e82c0f270d97",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/chargeTemplates/chargeTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"chargeTemplates",
								"chargeTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/recurringChargeTemplates/recurringChargeTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aff88474-7934-4328-9751-864d7f6f9dfd",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/recurringChargeTemplates/recurringChargeTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"recurringChargeTemplates",
								"recurringChargeTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/usageChargeTemplates/usageChargeTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e3e256fa-61d4-42fe-95a6-a9b002786a53",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/usageChargeTemplates/usageChargeTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"usageChargeTemplates",
								"usageChargeTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/oneShotChargeTemplates/oneShotChargeTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7937bc92-6552-437a-9818-91e85720c498",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/oneShotChargeTemplates/oneShotChargeTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"oneShotChargeTemplates",
								"oneShotChargeTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/counterTemplates/counterTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa752332-62b5-49ee-a8a6-fdb0a7859c00",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/counterTemplates/counterTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"counterTemplates",
								"counterTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/productTemplates/productTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "32ef5a3f-0219-4d3d-9a76-3c768b2ae2e7",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/productTemplates/productTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"productTemplates",
								"productTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/productChargeTemplates/productChargeTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c7affeaf-3703-4336-a113-53426b548201",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/productChargeTemplates/productChargeTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"productChargeTemplates",
								"productChargeTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/bundleTemplates/bundleTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ae13a232-34d6-4325-97f1-e448da0554f8",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/bundleTemplates/bundleTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"bundleTemplates",
								"bundleTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/triggeredEdrTemplates/triggeredEdrTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "38036f57-3a3e-4980-b87f-eb2dfb038df0",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/triggeredEdrTemplates/triggeredEdrTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"triggeredEdrTemplates",
								"triggeredEdrTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/walletTemplates/walletTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "92599a46-ba80-45e3-a3a3-b2f2a324647c",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/walletTemplates/walletTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"walletTemplates",
								"walletTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/businessOfferModels/businessOfferModels",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28fbd1bd-135c-4a88-a459-fa2b84c52bd5",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/businessOfferModels/businessOfferModels.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"businessOfferModels",
								"businessOfferModels.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/businessServiceModels/businessServiceModels",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0c50e87e-5ca7-46b9-ae8e-1940d24ca9f1",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/businessServiceModels/businessServiceModels.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"businessServiceModels",
								"businessServiceModels.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/businessProductModels/businessProductModels",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7a86cddb-7201-47c4-8fe3-719d2455b8e8",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/businessProductModels/businessProductModels.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"businessProductModels",
								"businessProductModels.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/pricePlanMatrixes/pricePlanMatrixes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1b98a770-339b-4557-af1c-3c1fcb3b024d",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/pricePlanMatrixes/pricePlanMatrixes.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"pricePlanMatrixes",
								"pricePlanMatrixes.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "catalog/discountPlans/discountPlans",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "84dbef2f-0b83-495a-80ff-a2b80c431afe",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/catalog/discountPlans/discountPlans.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"catalog",
								"discountPlans",
								"discountPlans.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "crm/customers/customerSearch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1a536270-b2f9-48ae-b86e-d1ef447465fe",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/crm/customers/customerSearch.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"crm",
								"customers",
								"customerSearch.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "crm/customers/customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7d40f182-61fe-42bb-93fc-1e27c459259c",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/crm/customers/customers.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"crm",
								"customers",
								"customers.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "payments/customerAccounts/customerAccounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9ad00531-c402-41c8-b056-8f2a100e604d",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/payments/customerAccounts/customerAccounts.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"payments",
								"customerAccounts",
								"customerAccounts.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/billingAccounts/billingAccounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3197f07c-6dea-486e-8647-fb255d9d9f35",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/billingAccounts/billingAccounts.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"billingAccounts",
								"billingAccounts.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/userAccounts/userAccounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6cdf2e3-1577-4c2d-aa91-4c8daadb9dca",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/userAccounts/userAccounts.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"userAccounts",
								"userAccounts.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "crm/crmAccounts/crmAccounts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "18ae8d60-eec8-4376-8fb0-f3814181e6d4",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/crm/crmAccounts/crmAccounts.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"crm",
								"crmAccounts",
								"crmAccounts.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/subscriptions/subscriptions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5552eb9d-b95c-4ac4-9d51-4e828084576f",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/subscriptions/subscriptions.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"subscriptions",
								"subscriptions.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "medina/access/access",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b100fb2b-4a72-4ff5-9a9b-6065dd08432f",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/medina/access/access.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"medina",
								"access",
								"access.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "crm/businessAccountModels/businessAccountModels",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "52c1d85c-95be-4cc7-b1bb-2c24efeab6fd",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/crm/businessAccountModels/businessAccountModels.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"crm",
								"businessAccountModels",
								"businessAccountModels.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "quote/quotes/quotes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "25e2c16c-2311-40b9-a82a-ff883311d46a",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/quote/quotes/quotes.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"quote",
								"quotes",
								"quotes.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "order/orders/orders",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "322b2806-a448-449a-ade2-455438ecafa8",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/order/orders/orders.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"order",
								"orders",
								"orders.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "rating/edr/edrList",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b60e12b9-2a1f-4104-ac80-088af5d6ca5b",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/rating/edr/edrList.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"rating",
								"edr",
								"edrList.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "medina/importedFile/importedFiles",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d33029de-6384-4cd1-9436-43680fbecd47",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/medina/importedFile/importedFiles.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"medina",
								"importedFile",
								"importedFiles.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/walletOperations/walletOperations",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1eab931-30ac-4eb3-9020-a753bf3ec658",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/walletOperations/walletOperations.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"walletOperations",
								"walletOperations.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/ratedTransactions/ratedTransactions",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9202240c-56e8-4efe-b7e1-b1049cfc26be",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/ratedTransactions/ratedTransactions.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"ratedTransactions",
								"ratedTransactions.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/invoicing/billingRuns",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0de9f4cb-f820-4507-b178-2850960ccaad",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/invoicing/billingRuns.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"invoicing",
								"billingRuns.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/invoicing/recurringInvoicing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8c5c33c5-d4b7-49fb-b095-110f0474e727",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/invoicing/recurringInvoicing.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"invoicing",
								"recurringInvoicing.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/invoicing/exceptionelInvoicing",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8ec7ffc9-b0b8-4290-a628-c2fc3f178cc3",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/invoicing/exceptionelInvoicing.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"invoicing",
								"exceptionelInvoicing.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/invoices/invoices",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "756d9c1e-3a3e-409d-995f-6e6c39757fcc",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/invoices/invoices.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"invoices",
								"invoices.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/invoices/createInvoiceDetail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a3ec1ebd-fdf2-4a38-bc64-25c23cf2fe39",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/invoices/createInvoiceDetail.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"invoices",
								"createInvoiceDetail.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "payments/dDRequestBuilders/dDRequestBuilders",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c888acd-84b0-49d9-bc3e-c8530f33d4c7",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/payments/dDRequestBuilders/dDRequestBuilders.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"payments",
								"dDRequestBuilders",
								"dDRequestBuilders.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "payments/dDRequestBuilders/dDRequestBuilders",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9be8947a-4d11-4d6d-b238-94f9010c54ca",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/payments/dDRequestBuilders/dDRequestBuilders.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"payments",
								"dDRequestBuilders",
								"dDRequestBuilders.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "payments/ddrequestLotOp/ddrequestLotOps",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73aabff7-54b6-4c2c-af38-d9e4b3efe799",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/payments/ddrequestLotOp/ddrequestLotOps.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"payments",
								"ddrequestLotOp",
								"ddrequestLotOps.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "payments/ddrequestLot/ddrequestLots",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d40b12e0-e009-4fd8-84d5-aa636382aa0a",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/payments/ddrequestLot/ddrequestLots.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"payments",
								"ddrequestLot",
								"ddrequestLots.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "payments/paymentGateways/paymentGateways",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0573a885-639b-4815-a7a2-826dcf6010a7",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/payments/paymentGateways/paymentGateways.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"payments",
								"paymentGateways",
								"paymentGateways.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "payments/paymentScheduleTemplates/paymentScheduleTemplates",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b1bb17d3-c7d5-4996-9ae2-e3fbe660da04",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/payments/paymentScheduleTemplates/paymentScheduleTemplates.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"payments",
								"paymentScheduleTemplates",
								"paymentScheduleTemplates.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/workflow/genericWorkflows",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4d6e04d9-94fc-407d-b0e9-66a4dd7babbc",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/workflow/genericWorkflows.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"workflow",
								"genericWorkflows.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/workflow/workflowInstanceHistories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c21ee66-057b-4aca-84b6-106237df49ad",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/workflow/workflowInstanceHistories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"workflow",
								"workflowInstanceHistories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/accountingCodes/accountingCodes",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9a20cde-7048-40da-84da-edc116a95f9a",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/accountingCodes/accountingCodes.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"accountingCodes",
								"accountingCodes.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "billing/generalLedgers/generalLedgers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c9556ade-c952-44a8-b4f7-31c4dd20716e",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/billing/generalLedgers/generalLedgers.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"billing",
								"generalLedgers",
								"generalLedgers.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "finance/revenueRecognitionRules/revenueRecognitionRules",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "39c1981d-11e3-4bcb-9655-57853e0cbb64",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/finance/revenueRecognitionRules/revenueRecognitionRules.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"finance",
								"revenueRecognitionRules",
								"revenueRecognitionRules.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "finance/revenueSchedules/revenueSchedules",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "25cac402-7f7f-417d-ac43-19dddd38892f",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/finance/revenueSchedules/revenueSchedules.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"finance",
								"revenueSchedules",
								"revenueSchedules.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "finance/reportExtracts/reportExtracts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "13bda544-0db3-4a38-b211-ee184df8f485",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/finance/reportExtracts/reportExtracts.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"finance",
								"reportExtracts",
								"reportExtracts.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "finance/reportExtractHistories/reportExtractHistories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1aa45747-289d-42d0-9f06-dbc2af3dcdbc",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/finance/reportExtractHistories/reportExtractHistories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"finance",
								"reportExtractHistories",
								"reportExtractHistories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "finance/accountingWriting/accountingWritings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "91dc7aec-cd7e-4dbc-88ce-05b645a245f3",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/finance/accountingWriting/accountingWritings.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"finance",
								"accountingWriting",
								"accountingWritings.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "reporting/dwh/measurableQuantities",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e8784f99-ea2c-4c27-9d22-1e2a9c798d80",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/reporting/dwh/measurableQuantities.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"reporting",
								"dwh",
								"measurableQuantities.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "reporting/dwh/measuredValueDetail",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6bd21fd5-3a9d-4d8c-a43d-37a30244e51d",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/reporting/dwh/measuredValueDetail.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"reporting",
								"dwh",
								"measuredValueDetail.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "reporting/dwh/charts",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3137d44c-47ac-4e12-97c0-97bc7b30aecc",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/reporting/dwh/charts.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"reporting",
								"dwh",
								"charts.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/job/jobInstances",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7294a3cc-d7b6-459d-8676-9ed53cdda9a5",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/job/jobInstances.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"job",
								"jobInstances.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/job/timerEntities",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "024726f1-8d38-40c6-a501-2aa3d3606cb1",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/job/timerEntities.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"job",
								"timerEntities.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/meveoInstance/meveoInstances",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "95324061-2988-4e69-a2db-46c9ee958d91",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/meveoInstance/meveoInstances.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"meveoInstance",
								"meveoInstances.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/module/modules",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b9e6d8d6-9148-4551-b26c-63f1db1fe7c2",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/module/modules.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"module",
								"modules.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/customEntities/customizedEntities",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0db5232f-f9a8-4292-a424-3f9a6ce471e3",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/customEntities/customizedEntities.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"customEntities",
								"customizedEntities.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/scriptInstanceCategories/scriptInstanceCategories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "47c1eb6e-6233-4921-840b-5aed19eb98aa",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/scriptInstanceCategories/scriptInstanceCategories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"scriptInstanceCategories",
								"scriptInstanceCategories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/scriptInstances/scriptInstances",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a7b5133f-d787-4850-9066-6dc589b5aa1b",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/scriptInstances/scriptInstances.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"scriptInstances",
								"scriptInstances.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/filters/filters/filters",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e469872a-05b2-4093-8656-c0c8a93b0e03",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/filters/filters/filters.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"filters",
								"filters",
								"filters.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "notification/notifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51b8f23f-d85c-45a8-bb71-fd169da37d98",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/notification/notifications.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"notification",
								"notifications.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "notification/webHooks",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3a7d5cc4-63af-495a-8331-341eecaf9752",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/notification/webHooks.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"notification",
								"webHooks.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "notification/emailNotifications",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e408ae55-8021-42d0-bb6a-0304c50884eb",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/notification/emailNotifications.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"notification",
								"emailNotifications.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "notification/jobTriggers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d865984b-1395-462e-8573-0c8d06a60079",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/notification/jobTriggers.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"notification",
								"jobTriggers.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "notification/notificationHistories",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ca1f31af-5d71-4243-bfe8-bfb044ad7be2",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/notification/notificationHistories.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"notification",
								"notificationHistories.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "notification/inboundRequests",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9067f71c-c71c-4f6a-aaef-cd89db060901",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/notification/inboundRequests.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"notification",
								"inboundRequests.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/export/import",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7314a74e-ad36-457b-af0b-15b0b3f54b40",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/export/import.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"export",
								"import.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/export/export",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4c3b544b-50c1-4602-b15b-ee1e8708c370",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/export/export.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"export",
								"export.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/auditLogs/auditConfiguration",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73d63748-7ed2-4f42-befb-2b421cbdc28d",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/auditLogs/auditConfiguration.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"auditLogs",
								"auditConfiguration.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "admin/auditLogs/auditLogs",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8d790a36-5d53-4c76-9b75-31d2f32cbbc3",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/admin/auditLogs/auditLogs.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"admin",
								"auditLogs",
								"auditLogs.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "reporting/cache/caches",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f4be04d-a00e-4023-a77f-0c341e80565d",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/reporting/cache/caches.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"reporting",
								"cache",
								"caches.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "index/fullTextSearch",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5141fb8-1bbf-4089-89c3-2a0e82ad091a",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/index/fullTextSearch.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"index",
								"fullTextSearch.jsf"
							]
						}
					},
					"response": []
				},
				{
					"name": "index/index",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "979edda9-b0b6-4152-a16e-d0bca05f4a55",
								"exec": [
									"pm.test(request.name + \" - Check Code\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "basic",
							"basic": [
								{
									"key": "password",
									"value": "{{opencell.password}}",
									"type": "string"
								},
								{
									"key": "username",
									"value": "{{opencell.username}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {}
							}
						},
						"url": {
							"raw": "{{opencell.base}}/pages/index/index.jsf",
							"host": [
								"{{opencell.base}}"
							],
							"path": [
								"pages",
								"index",
								"index.jsf"
							]
						}
					},
					"response": []
				}
			],
			"description": "This will run a GET on the admin pages and check if a proper status 200 is returned. ",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "7633240f-165e-42c6-953b-280816a757c6",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b932db29-6322-495b-947c-814343cb8fe9",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Scenarios",
			"item": [
				{
					"name": "Setup Base Data",
					"item": [
						{
							"name": "Cleanup data - clear customizations",
							"item": [
								{
									"name": "Clear Seller Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6fe2807d-35bd-4da3-b8d1-941dab08eab4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.admin.Seller\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Customer Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "16544e66-b52e-440e-860f-568f23ce1172",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.crm.Customer\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Customer Account Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c52e3b8a-feb1-4d2a-a05c-693335df9421",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.payments.CustomerAccount\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Billing Account Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "be9c6243-ae6a-4360-967b-b091ad7cb98a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.BillingAccount\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear User Account Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8bd81389-8d67-4d98-88e0-7e7ec51aeaf8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.UserAccount\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Subscription Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1dd1350-1c3b-45db-8167-2924a5d6157c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.Subscription\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Access Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c3ef83ae-02e1-4aae-94fb-4139ee33eaab",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.mediation.Access\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Provider Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f479c36c-1dbc-4d3a-a20e-d612af05207c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.crm.Provider\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Product Template Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c8e8964-fa3f-4b9e-bab4-c447b83e8da6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.catalog.ProductTemplate\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Product Instance Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "230c7e4d-1101-4718-8b2e-6db1f7c1a615",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.ProductInstance\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Service Template Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ebf1c1f-86af-4788-8774-65f9aa89690d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.catalog.ServiceTemplate\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Offer Template  Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dbcc0b6e-263e-49fe-bd84-38601405116e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.catalog.OfferTemplate\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Charge Template  Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1959425f-bbed-4e36-8cf0-c114217ee1f5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.catalog.ChargeTemplate\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Price Plan Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "57bd80e1-fb1b-4e42-9ea4-47ee23989029",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.catalog.PricePlanMatrix\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Invoice Category Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8c24a43f-f354-4697-8443-003ecdad67ac",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.InvoiceCategory\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Invoice SubCategory Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c944380-6450-4ab7-9ef7-671a467f66f1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.payments.AccountOperation\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Account Operation Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad4bae4b-e16b-4537-9585-959a7bd8af1d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.InvoiceSubCategory\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Invoice Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5c67b5e-a7d4-4af6-abfb-02f657d3e972",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.Invoice\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Tax Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c20f27d5-5296-4c71-97c8-6cf97bbb1e4b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.Tax\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Billing Cycle Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8a60783e-bd7d-4415-b314-ed8705b72613",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.model.billing.BillingCycle\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clear Purge Job Customization",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2340ec8a-4163-4a36-b651-0e6c1f5cec30",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"classname\": \"org.meveo.admin.job.PurgeJob\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/customize",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"customize"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Clean up data - restore provider and configuration",
							"item": [
								{
									"name": "Update provider",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e4e72c1-c622-428e-9221-8ad94ae8fc90",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"demo\",\r\n    \"currency\": \"AFA\",\r\n    \"country\": \"AD\",\r\n    \"language\": \"DEU\",\r\n    \"multiCurrency\": \"true\",\r\n    \"multiCountry\": \"true\",\r\n    \"multiLanguage\": \"true\",\r\n    \"enterprise\": \"true\",\r\n    \"levelDuplication\": \"false\",\r\n    \"rounding\": \"8\",\r\n    \"invoiceRounding\": \"2\",\r\n    \"prepaidReservationExpirationDelayinMillisec\": \"60000\",\r\n    \"bankCoordinates\": {\r\n        \"bankCode\": \"SGMB\",\r\n        \"branchCode\": \"12345\",\r\n        \"accountNumber\": \"33333333333\",\r\n        \"key\": \"11\",\r\n        \"iban\": \"11\",\r\n        \"bic\": \"11\",\r\n        \"accountOwner\": \"owner\",\r\n        \"bankName\": \"SGMB\",\r\n        \"bankId\": \"11\",\r\n        \"issuerNumber\": \"1111\",\r\n        \"issuerName\": \"DEMO\"\r\n    },\r\n    \"recognizeRevenue\": \"false\",\r\n    \"invoiceConfiguration\": {\r\n        \"displaySubscriptions\": \"true\",\r\n        \"displayServices\": \"true\",\r\n        \"displayOffers\": \"true\",\r\n        \"displayEdrs\": \"false\",\r\n        \"displayProvider\": \"false\",\r\n        \"displayCfAsXML\": \"false\",\r\n        \"displayPricePlans\": \"false\",\r\n        \"displayDetail\": \"true\",\r\n        \"displayBillingCycle\": \"false\",\r\n        \"displayFreeTransacInInvoice\": \"true\",\r\n        \"displayOrders\": \"false\",\r\n        \"displayWalletOperations\": \"false\"\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/provider",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"provider"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set securedEntities=false - AUTHORIZATION_SUPERADMIN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7723b273-dcc8-490c-a7c6-80cdd223b374",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"property\": \"secured.entities.enabled\",\r\n\t\"value\": \"false\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/configurations/setProperty",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"configurations",
												"setProperty"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set service.allowMultiInstantiation=false - AUTHORIZATION_SUPERADMIN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c086932-f25d-48bb-85d3-200db75cb769",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"property\": \"service.allowMultiInstantiation\",\r\n\t\"value\": \"false\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/configurations/setProperty",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"configurations",
												"setProperty"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Clean up data - user and ES",
							"item": [
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88137536-95c4-490e-b7fa-773d6c51276a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"{{opencell.username}}\",\r\n    \"password\": \"{{opencell.password}}\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\"administrateur\"],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Clean and reindex Full text - AUTHORIZATION_SUPERADMIN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6ea4b69a-09ef-4314-86d4-c2665b82100a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.superpassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.superusername}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuc3VwZXJhZG1pbjpvcGVuY2VsbC5zdXBlcmFkbWlu"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filteredList/reindex",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filteredList",
												"reindex"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Setup Configuration: InvType, BC and Seller",
							"item": [
								{
									"name": "Create InvoiceType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "63379878-0e5d-4778-ad2b-55b592c3ed59",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_TEST-Type\",\r\n\t\"description\": \"Invoice Test Type\",\r\n\t\"occTemplateCode\": \"INV_STD\",\r\n\t\"sequenceDto\": {\r\n\t\t\"prefixEL\": \"Fact_\",\r\n\t\t\"sequenceSize\": \"9\"\r\n\t},\r\n\t\"matchingAuto\": \"false\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create BillingCycle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "318d72d8-e750-4448-9ace-027c482f5093",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"CYC_INV_MT_1\",\r\n\t\"description\": \"Monthly Invoice Cycle 1\",\r\n\t\"transactionDateDelay\": \"0\",\r\n\t\"invoiceDateProductionDelay\": \"0\",\r\n\t\"dueDateDelay\": \"2\",\r\n\t\"invoiceDateDelay\": \"4\",\r\n\t\"calendar\": \"MONTHLY\",\r\n\t\"invoiceTypeCode\": \"{{baseEntityPrefix}}_TEST-Type\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create BillingCycle 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48b9153e-b696-4fc3-aa3e-ee39270fe93e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"CYC_INV_MT_3\",\r\n\t\"description\": \"Monthly Invoice Cycle 3\",\r\n\t\"transactionDateDelay\": \"0\",\r\n\t\"invoiceDateProductionDelay\": \"0\",\r\n\t\"dueDateDelay\": \"2\",\r\n\t\"invoiceDateDelay\": \"4\",\r\n\t\"calendar\": \"MONTHLY\",\r\n\t\"dueDateDelayEL\": \"#{ba.id + invoice.billingAccount.id}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Seller",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5138a37e-9da4-4596-af48-ac2cb4db88ac",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "    {\r\n    \t\"code\": \"SELLER_FR\",\r\n    \t\"description\": \"France Seller\",\r\n    \t\"currencyCode\": \"EUR\",\r\n    \t\"languageCode\": \"FRA\",\r\n    \t\"parentSeller\": \"MAIN_SELLER\",\r\n    \t\"invoiceTypeSequences\": {\r\n    \t\t\"{{baseEntityPrefix}}_TEST-Type\": {\r\n    \t\t\t\"prefixEL\": \"SellFact_\",\r\n    \t\t\t\"sequenceSize\": 9,\r\n    \t\t\t\"currentInvoiceNb\": 9\r\n    \t\t}\r\n    \t}\r\n    }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update InvoiceType COM Sequence",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f4660b4e-27c4-4cb6-970d-d99e0169a9ff",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"COM\",\n    \"occTemplateCode\": \"INV_STD\",\n    \"sequenceDto\": {\n        \"prefixEL\": \"COM_\",\n        \"sequenceSize\": \"9\"\n    },\n    \"matchingAuto\": \"false\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Setup Catalog: Charges, Services, Offer, PP, Counters, Wallets",
							"item": [
								{
									"name": "Create Tax Class 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cda75889-1da2-4757-ae90-7a08b2d8a9ed",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_taxClass\",\r\n    \"description\": \"Tax class for {{baseEntityPrefix}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Tax Class 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d9598c9b-d81a-472d-b50a-b359645b8ae3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_taxClass2\",\r\n    \"description\": \"Tax class for {{baseEntityPrefix}} 2\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxClass/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxClass",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Tax Mapping",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "244c4143-f78e-4986-80dc-174bdce32777",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"accountTaxCategoryCode\": \"Tax category\",\r\n    \"chargeTaxClassCode\": \"{{baseEntityPrefix}}_taxClass\",\r\n    \"taxCode\": \"TAX_18\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxMapping/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxMapping",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Tax Category 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f5e1f187-22bc-41d5-a42a-af2ea4b47610",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\":\"{{baseEntityPrefix}}_taxCategory2\",\r\n\t\"description\":\"Tax category 2\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/taxCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"taxCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create PrepaidWallet",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6687abcd-7820-4d61-ae2b-385988b71471",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_PPW1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_PrepaidPWallet_Description\",\r\n\t\"walletType\": \"PREPAID\",\r\n\t\"consumptionAlertSet\": \"false\",\r\n\t\"fastRatingLevel\": \"1\",\r\n\t\"lowBalanceLevel\": \"2\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/wallet/template/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"wallet",
												"template",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Counter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02c16ed5-8c17-4b1d-8786-e99895028a89",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_CT1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_CounterTemplate_Description\",\r\n\t\"calendar\": \"MONTHLY\",\r\n\t\"unity\": \"Quantity\",\r\n\t\"type\": \"USAGE\",\r\n\t\"ceiling\": \"1\",\r\n\t\"disabled\": \"false\",\r\n\t\"counterLevel\": \"BA\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/counterTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"counterTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create TriggeredEDR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "129dd3f8-74de-4cd3-a212-63384d648257",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_EDR1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_Triggered_EDR_DESC\",\r\n\t\"quantityEl\": \"#{op.amountWithoutTax}\",\r\n\t\"param1El\": \"#{edr.parameter1}\",\r\n\t\"param2El\": \"#{edr.parameter2}\",\r\n\t\"param3El\": \"#{edr.parameter3}\",\r\n\t\"param4El\": \"#{edr.parameter4}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/triggeredEdr/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"triggeredEdr",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Recurring",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "09778b4d-309e-49f0-8072-4d27023d150b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_REC1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_REC1\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"true\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"calendar\": \"MONTHLY\",\r\n\t\"subscriptionProrata\": \"true\",\r\n\t\"terminationProrata\": \"true\",\r\n\t\"applyInAdvance\": \"true\",\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"1\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"durationTermInMonth\": \"4\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n\t\"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create OneShot - Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b343e732-0878-460f-8a07-e3761fa46b3e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_OS1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_OS1\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"true\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"1\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"oneShotChargeTemplateType\": \"SUBSCRIPTION\",\r\n\t\"immediateInvoicing\": \"false\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"oneShotChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create OneShot - Termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "18e5b068-9351-49f4-817a-b2b589a22d32",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_OST1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_OST1\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"false\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Termination Test\"\r\n\t\t}\r\n\t],\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"1\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"oneShotChargeTemplateType\": \"TERMINATION\",\r\n\t\"immediateInvoicing\": \"false\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"oneShotChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create OneShot - Other",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "97ee7be3-f7b8-4f15-b7d3-f85d96c0cde8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OS_OTHER\",\r\n    \"description\": \"{{baseEntityPrefix}}_OS_OTHER\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": \"false\",\r\n    \"amountEditable\": \"true\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}s-Forfait Test\"\r\n        }\r\n    ],\r\n    \"inputUnitDescription\": \"1\",\r\n    \"ratingUnitDescription\": \"1\",\r\n    \"unitMultiplicator\": \"1\",\r\n    \"unitNbDecimal\": \"2\",\r\n    \"oneShotChargeTemplateType\": \"OTHER\",\r\n    \"immediateInvoicing\": \"false\",\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"oneShotChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Usage 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fe2803c7-b9e4-48c1-934d-b0e29b86ff24",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"false\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"Unit\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"filterParam1\": \"USAGE\",\r\n\t\"priority\": \"1\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"filterExpression\": \"#{ci.chargeTemplate.code.equals('{{baseEntityPrefix}}_USAGE1')}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"usageChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Service 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c2cee28-24e2-4c40-a08f-12be5ed49861",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n\t\"invoicingCalendar\": \"MONTHLY\",\r\n\t\"serviceChargeTemplateRecurrings\": {\r\n\t\t\"serviceChargeTemplateRecurring\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_REC1\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"serviceChargeTemplateSubscriptions\": {\r\n\t\t\"serviceChargeTemplateSubscription\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_OS1\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"serviceChargeTemplateTerminations\": {\r\n\t\t\"serviceChargeTemplateTermination\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_OST1\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"serviceChargeTemplateUsages\": {\r\n\t\t\"serviceChargeTemplateUsage\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_USAGE1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Service 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "54d6bf58-af98-4e8c-aba2-0bf816635476",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\n    \"description\": \"{{baseEntityPrefix}}_SERVICE2\",\n    \"invoicingCalendar\": \"MONTHLY\",\n    \"serviceChargeTemplateRecurrings\": {\n        \"serviceChargeTemplateRecurring\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_REC1\"\n            }\n        ]\n    },\n    \"serviceChargeTemplateUsages\": {\n        \"serviceChargeTemplateUsage\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_USAGE1\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Product Charge 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "15b936d5-54a1-4ed8-8a15-821a9f3ff87c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_PC1\",\r\n    \"description\": \"{{baseEntityPrefix}}_PC1\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": \"false\",\r\n    \"amountEditable\": \"false\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}-Produit Test\"\r\n        }\r\n    ],\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n    \"triggeredEdrs\": {\r\n        \"triggeredEdr\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalogManagement/productChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalogManagement",
												"productChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Product Charge 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "14a6180e-876d-411e-b237-21b25c742f43",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_PC2\",\r\n    \"description\": \"{{baseEntityPrefix}}_PC2\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": \"false\",\r\n    \"amountEditable\": \"false\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}-Produit 2 Test\"\r\n        }\r\n    ],\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalogManagement/productChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalogManagement",
												"productChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Product 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef69b0ef-0429-4480-88f8-65a357c293e0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_PRODUCT1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_PRODUCT1 DESC\",\r\n\t\"name\": \"{{baseEntityPrefix}}_PRODUCT1 NAME\",\r\n\t\"productChargeTemplate\": [\r\n\t\t{\r\n\t\t\t\"code\": \"{{baseEntityPrefix}}_PC1\",\r\n\t\t\t\"disabled\": \"false\"\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalogManagement/productTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalogManagement",
												"productTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Product 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8ba0dca-a52f-4624-a94c-5173adf6359f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_PRODUCT2\",\r\n\t\"description\": \"{{baseEntityPrefix}}_PRODUCT2 DESC\",\r\n\t\"name\": \"{{baseEntityPrefix}}_PRODUCT1 NAME\",\r\n\t\"productChargeTemplate\": [\r\n        {\r\n\t\t\t\"code\": \"{{baseEntityPrefix}}_PC2\",\r\n\t\t\t\"disabled\": \"false\"\r\n\t\t}\r\n\t]\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalogManagement/productTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalogManagement",
												"productTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Offer 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "feea6ae0-2f5c-442f-9154-6fd9f3076484",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"description\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"name\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"disabled\": \"false\",\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\"\r\n            }\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\"\r\n            }\r\n        }\r\n    ],\r\n    \"offerProductTemplate\": [\r\n        {\r\n            \"productTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_PRODUCT1\"\r\n            }\r\n        }\r\n    ],\r\n    \"lifeCycleStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ScriptInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "109a7e37-8825-46b8-a5be-3d2c728e05c7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"org.meveo.service.script.rating.RatingScript\",\n    \"description\": \"rating script\",\n    \"type\": \"JAVA\",\n    \"script\": \"package org.meveo.service.script.rating;\\r\\n\\r\\nimport java.math.BigDecimal;\\r\\nimport java.util.Map;\\r\\nimport org.meveo.admin.exception.BusinessException;\\r\\nimport org.meveo.model.admin.User;\\r\\nimport org.meveo.model.billing.WalletOperation;\\r\\nimport org.meveo.service.script.Script;\\r\\nimport org.slf4j.Logger;\\r\\nimport org.slf4j.LoggerFactory;\\r\\n\\r\\npublic class RatingScript extends Script {\\r\\n\\r\\n    private static final Logger log = LoggerFactory.getLogger(RatingScript.class);\\r\\n\\r\\n    public void execute(Map<String, Object> context) throws BusinessException {\\r\\n        log.debug(\\\"Rating script creation script...\\\");\\r\\n        // DO not change any amount, as it is untestable\\r\\n        //WalletOperation op = (WalletOperation) context.get(Script.CONTEXT_ENTITY);\\r\\n        //op.setAmountWithoutTax(op.getAmountTax().add(BigDecimal.ONE));\\r\\n    }\\r\\n}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan  Recurring",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a03d7ff9-d3eb-4989-b2a3-ea21c4adf4b6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_REC1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_REC1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_REC1\",\r\n\t\"amountWithoutTax\": \"10\",\r\n\t\"amountWithTax\": \"12\",\r\n\t\"scriptInstance\": \"org.meveo.service.script.rating.RatingScript\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan OneShot - Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1be25d52-722a-4125-9fca-d9ec7c715112",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_OS1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_OS1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_OS1\",\r\n\t\"amountWithoutTax\": \"11\",\r\n\t\"amountWithTax\": \"15\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan OneShot - Termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "62a6f021-fa80-4d2e-9fb7-44e99e52f2cb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_OST1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_OST1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_OST1\",\r\n\t\"amountWithoutTax\": \"21\",\r\n\t\"amountWithTax\": \"25\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan OneShot - Other",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5b89ef9c-dec8-4208-92d6-d6f7641ed262",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_OS_OTHER\",\r\n\t\"description\": \"{{baseEntityPrefix}}_OS_OTHER\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_OS_OTHER\",\r\n\t\"amountWithoutTax\": \"11\",\r\n\t\"amountWithTax\": \"15\",\r\n\t\"priority\": \"1\",\r\n\t\"woDescriptionEL\": \"#{\\\"Special \\\".concat(op.description)}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan Usage 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e021028e-c503-46c7-87b5-43071268b1c1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"amountWithoutTax\": \"9\",\r\n\t\"amountWithTax\": \"14\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan Product 1 in Offer 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d17f1c90-f5f1-4e0a-9a32-b6dbe1e85954",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_PC1_PP2\",\r\n\t\"description\": \"price plan product 1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_PC1\",\r\n\t\"amountWithoutTax\": \"0.5\",\r\n\t\"amountWithTax\": \"0.6\",\r\n\t\"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan Product 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b14d5fd-ccbc-46f8-af2d-dc8d5e880b83",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_PC1_PP\",\r\n\t\"description\": \"price plan product 1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_PC1\",\r\n\t\"amountWithoutTax\": \"1\",\r\n\t\"amountWithTax\": \"1.2\",\r\n\t\"priority\": \"2\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan Product 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9ce13c35-219f-4f4a-bf1b-08f39b4318b8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_PC2_PP\",\r\n\t\"description\": \"price plan product 1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_PC2\",\r\n\t\"amountWithoutTax\": \"5\",\r\n\t\"amountWithTax\": \"6\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Reccuring 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "82d74f0d-4e61-4370-b68b-69bed1277b01",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_REC2\",\r\n\t\"description\": \"{{baseEntityPrefix}}_REC2\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"false\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"calendar\": \"MONTHLY\",\r\n\t\"subscriptionProrata\": \"true\",\r\n\t\"terminationProrata\": \"true\",\r\n\t\"applyInAdvance\": \"true\",\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"1\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"durationTermInMonth\": \"4\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Recurring 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22b35c3b-8431-47b4-9bf6-4b5fc3ff650c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_REC3\",\r\n\t\"description\": \"{{baseEntityPrefix}}_REC3\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"false\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"calendar\": \"MONTHLY\",\r\n\t\"subscriptionProrata\": \"true\",\r\n\t\"terminationProrata\": \"true\",\r\n\t\"applyInAdvance\": \"true\",\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"1\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"durationTermInMonth\": \"4\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create OneShot 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "27dba26f-b900-4bb1-8fce-4fb127c34de1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OS2\",\r\n    \"description\": \"{{baseEntityPrefix}}_OS2\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": \"false\",\r\n    \"amountEditable\": \"false\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n        }\r\n    ],\r\n    \"inputUnitDescription\": \"1\",\r\n    \"ratingUnitDescription\": \"1\",\r\n    \"unitMultiplicator\": \"1\",\r\n    \"unitNbDecimal\": \"2\",\r\n    \"oneShotChargeTemplateType\": \"SUBSCRIPTION\",\r\n    \"immediateInvoicing\": \"false\",\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n    \"triggeredEdrs\": {\r\n        \"triggeredEdr\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"oneShotChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create OneShot 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e0fb61f1-179f-48da-98c3-b6f7f1975a0f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OS3\",\r\n    \"description\": \"{{baseEntityPrefix}}_OS3\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": \"false\",\r\n    \"amountEditable\": \"false\",\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n        }\r\n    ],\r\n    \"inputUnitDescription\": \"1\",\r\n    \"ratingUnitDescription\": \"1\",\r\n    \"unitMultiplicator\": \"1\",\r\n    \"unitNbDecimal\": \"2\",\r\n    \"oneShotChargeTemplateType\": \"SUBSCRIPTION\",\r\n    \"immediateInvoicing\": \"false\",\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n    \"triggeredEdrs\": {\r\n        \"triggeredEdr\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/oneShotChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"oneShotChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Usage 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "085a1892-b039-4108-926b-3f0fa0c83dc9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE2\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE2\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"false\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"Unit\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"filterParam1\": \"USAGE\",\r\n\t\"priority\": \"1\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n} ",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"usageChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Usage 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "18588921-0267-45c2-9bb0-6edc12f894d4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE3\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE3\",\r\n\t\"invoiceSubCategory\": \"SUB_DATA\",\r\n\t\"disabled\": \"false\",\r\n\t\"amountEditable\": \"false\",\r\n\t\"languageDescriptions\": [\r\n\t\t{\r\n\t\t\t\"languageCode\": \"FRA\",\r\n\t\t\t\"description\": \"{{baseEntityPrefix}}-Forfait Test\"\r\n\t\t}\r\n\t],\r\n\t\"inputUnitDescription\": \"1\",\r\n\t\"ratingUnitDescription\": \"Unit\",\r\n\t\"unitMultiplicator\": \"1\",\r\n\t\"unitNbDecimal\": \"2\",\r\n\t\"filterParam1\": \"USAGE3\",\r\n\t\"priority\": \"2\",\r\n\t\"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\" : \"{{baseEntityPrefix}}_taxClass\",\r\n\t\"triggeredEdrs\": {\r\n\t\t\"triggeredEdr\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_EDR1\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"filterExpression\": \"#{ci.chargeTemplate.code.equals('NO_MATCH')}\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/usageChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"usageChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Service 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9ff0dd6-4811-4bc9-8991-11a3ccac455a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_SERVICE3\",\r\n\t\"description\": \"{{baseEntityPrefix}}_SERVICE3\",\r\n\t\"invoicingCalendar\": \"MONTHLY\",\r\n\t\"serviceChargeTemplateRecurrings\": {\r\n\t\t\"serviceChargeTemplateRecurring\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_REC3\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"serviceChargeTemplateSubscriptions\": {\r\n\t\t\"serviceChargeTemplateSubscription\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_OS3\"\r\n\t\t\t}\r\n\t\t]\r\n\t},\r\n\t\"serviceChargeTemplateUsages\": {\r\n\t\t\"serviceChargeTemplateUsage\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\t\t\t\"counterTemplate\": \"{{baseEntityPrefix}}_CT1\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_USAGE3\",\r\n\t\t\t\t\"counterTemplate\": \"{{baseEntityPrefix}}_CT1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Service 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ece82e4-c91f-4cd9-a48b-f1508e49904b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_SERVICE4\",\r\n\t\"description\": \"{{baseEntityPrefix}}_SERVICE4\",\r\n\t\"invoicingCalendar\": \"MONTHLY\",\r\n\t\"serviceChargeTemplateUsages\": {\r\n\t\t\"serviceChargeTemplateUsage\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\t\t\t\"counterTemplate\": \"{{baseEntityPrefix}}_CT1\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_USAGE3\",\r\n\t\t\t\t\"counterTemplate\": \"{{baseEntityPrefix}}_CT1\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Offer 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3bea6eef-37fc-4f7c-aac9-0b871146c712",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OFFER2\",\r\n    \"description\": \"{{baseEntityPrefix}}_OFFER2\",\r\n    \"name\": \"{{baseEntityPrefix}}_OFFER2\",\r\n    \"disabled\": \"false\",\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\"\r\n            }\r\n        \r\n        }\r\n    ],\r\n    \"lifeCycleStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Offer 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2b26b895-9e38-43a8-9c15-edb29d347721",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OFFER3\",\r\n    \"description\": \"{{baseEntityPrefix}}_OFFER3\",\r\n    \"name\": \"{{baseEntityPrefix}}_OFFER3\",\r\n    \"disabled\": \"false\",\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\"\r\n            }\r\n        },\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE4\"\r\n            }\r\n        }\r\n    ],\r\n    \"lifeCycleStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan Usage 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6319926f-a92d-45c3-b753-a3d2e8c9c919",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE2\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_USAGE2\",\r\n\t\"amountWithoutTax\": \"1\",\r\n\t\"amountWithTax\": \"1.2\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan  Usage 1 in Offer 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a55ac766-13f2-479d-83a0-a3591143e47f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE1_OF2\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_USAGE1\",\r\n\t\"offerTemplate\": \"{{baseEntityPrefix}}_OFFER2\",\r\n\t\"amountWithoutTax\": \"0\",\r\n\t\"amountWithTax\": \"0\",\r\n\t\"priority\": \"0\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan OneShot OS3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e0fcd131-441d-4a57-9a28-b2834a68ebb7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_OS3\",\r\n\t\"description\": \"{{baseEntityPrefix}}_OS3\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_OS3\",\r\n\t\"amountWithoutTax\": \"11\",\r\n\t\"amountWithTax\": \"15\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan Recurring 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "33765170-85c7-4971-87ae-7c1331310ed0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_REC3\",\r\n\t\"description\": \"{{baseEntityPrefix}}_REC3\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_REC3\",\r\n\t\"amountWithoutTax\": \"10\",\r\n\t\"amountWithTax\": \"12\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Price Plan usage 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0e673040-4bca-4439-8f37-9fc24099256a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_USAGE3_OF2\",\r\n\t\"description\": \"{{baseEntityPrefix}}_USAGE3_OF2\",\r\n\t\"eventCode\": \"{{baseEntityPrefix}}_USAGE3\",\r\n\t\"offerTemplate\": \"{{baseEntityPrefix}}_OFFER2\",\r\n\t\"amountWithoutTax\": \"1\",\r\n\t\"amountWithTax\": \"1.2\",\r\n\t\"priority\": \"1\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Bundle 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "80f6b3d2-aaa5-44ed-b4e9-231cb614f064",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_BUNDLE1\",\r\n    \"description\": \"Bundle 1\",\r\n    \"productChargeTemplates\": {\r\n        \"productChargeTemplate\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_PC2\"\r\n            }\r\n        ]\r\n    },\r\n    \"bundleProducts\": {\r\n        \"bundleProduct\": {\r\n            \"productTemplate\": [\r\n                {\r\n                    \"code\": \"{{baseEntityPrefix}}_PRODUCT1\"\r\n                }\r\n            ]\r\n        }\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/bundleTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"bundleTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create channel - WEB",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f774757-91c2-4d50-8256-f038b7804d8b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_CHANNEL_WEB\",\r\n\t\"description\": \"{{baseEntityPrefix}}_CHANNEL_WEB\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create channel - SOCIAL_MEDIA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8b654c1-1247-4013-83d8-9f95bbfde113",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_CHANNEL_WEB\",\r\n\t\"description\": \"{{baseEntityPrefix}}_CHANNEL_WEB\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/channel/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"channel",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Offer Category - SOFTWARE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e891237f-872c-4ab4-b1c3-9b83e2447598",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_DISK_SPACE\",\r\n\t\"description\": \"{{baseEntityPrefix}}_DISK_SPACE\",\r\n\t\"name\": \"{{baseEntityPrefix}}_DISK_SPACE\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplateCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplateCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Offer Category - DISK_SPACE",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1ed08b3b-e952-4efe-a823-3ec2f624c79e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{baseEntityPrefix}}_DISK_SPACE\",\r\n\t\"description\": \"{{baseEntityPrefix}}_DISK_SPACE\",\r\n\t\"name\": \"{{baseEntityPrefix}}_DISK_SPACE\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplateCategory/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplateCategory",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Setup Customer accounts, subscription, access",
							"item": [
								{
									"name": "Create Customer 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8553d83e-5532-47e3-91ea-40cda640a56a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_CUST\",\r\n    \"description\": \"{{baseEntityPrefix}}_CUST\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"seller\": \"SELLER_FR\",\r\n    \"contactInformation\": {\r\n        \"email\": \"{{baseEntityPrefix}}@manaty.net\",\r\n        \"phone\": \"+33100000000\",\r\n        \"mobile\": \"+33666666666\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Customer 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fa66f563-eb80-4f12-8a15-294d61c1472a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_CUST_2\",\r\n    \"description\": \"{{baseEntityPrefix}}_CUST_2\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"seller\": \"SELLER_FR\",\r\n    \"contactInformation\": {\r\n        \"email\": \"{{baseEntityPrefix}}@manaty.net\",\r\n        \"phone\": \"+33100000000\",\r\n        \"mobile\": \"+33666666666\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Customer 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec0cc285-d812-4f85-8b9b-f31714833057",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_CUST_3\",\r\n    \"description\": \"{{baseEntityPrefix}}_CUST_3\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"seller\": \"SELLER_FR\",\r\n    \"contactInformation\": {\r\n        \"email\": \"{{baseEntityPrefix}}@manaty.net\",\r\n        \"phone\": \"+33100000000\",\r\n        \"mobile\": \"+33666666666\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Customer Account 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eb0d0e69-825b-4821-92d4-fba56169efb5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_CA\",\r\n    \"description\": \"{{baseEntityPrefix}}_CA\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{baseEntityPrefix}}@manaty.net\",\r\n        \"phone\": \"1234\",\r\n        \"mobile\": \"092152154716\"\r\n    },\r\n    \"customer\": \"{{baseEntityPrefix}}_CUST\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"creditCategory\": \"Pro\",\r\n    \"methodOfPayment\": [\r\n        {\r\n            \"paymentMethodType\": \"CHECK\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Customer Account 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d78f1ca1-8345-40d8-a8a3-54587d1ba7f2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_CA_2\",\r\n    \"description\": \"{{baseEntityPrefix}}_CA_2\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{baseEntityPrefix}}@manaty.net\",\r\n        \"phone\": \"1234\",\r\n        \"mobile\": \"092152154716\"\r\n    },\r\n    \"customer\": \"{{baseEntityPrefix}}_CUST_2\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"creditCategory\": \"Pro\",\r\n    \"methodOfPayment\": [\r\n        {\r\n            \"paymentMethodType\": \"CHECK\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Customer Account 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e5ad7b06-88b4-486f-baef-3b4816df2b71",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_CA_3\",\r\n    \"description\": \"{{baseEntityPrefix}}_CA_3\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{baseEntityPrefix}}@manaty.net\",\r\n        \"phone\": \"1234\",\r\n        \"mobile\": \"092152154716\"\r\n    },\r\n    \"customer\": \"{{baseEntityPrefix}}_CUST_3\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"creditCategory\": \"Pro\",\r\n    \"methodOfPayment\": [\r\n        {\r\n            \"paymentMethodType\": \"CHECK\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Account 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36e99d83-ab30-4618-b8ae-08cc9492616d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_BA\",\r\n    \"description\": \"{{baseEntityPrefix}}_BA\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerAccount\": \"{{baseEntityPrefix}}_CA\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"nextInvoiceDate\": \"2015-04-01\",\r\n    \"subscriptionDate\": \"2015-01-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"email\": \"{{baseEntityPrefix}}@manaty.net\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Account 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e476576e-6799-46d7-ac70-f2ba980941cb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_BA_2\",\r\n    \"description\": \"{{baseEntityPrefix}}_BA_2\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerAccount\": \"{{baseEntityPrefix}}_CA_2\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"nextInvoiceDate\": \"2015-04-01\",\r\n    \"subscriptionDate\": \"2015-01-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"email\": \"{{baseEntityPrefix}}@manaty.net\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Account 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9666df2-d8ef-41ff-b2d8-4086c69898b6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_BA_3\",\r\n    \"description\": \"{{baseEntityPrefix}}_BA_3\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerAccount\": \"{{baseEntityPrefix}}_CA_3\",\r\n    \"billingCycle\": \"CYC_INV_MT_3\",\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"nextInvoiceDate\": \"2015-04-01\",\r\n    \"subscriptionDate\": \"2015-01-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"email\": \"{{baseEntityPrefix}}@manaty.net\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User Account 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b867e9da-98fa-482d-9e40-5e82f003a62f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_UA\",\r\n    \"description\": \"{{baseEntityPrefix}}_UA\",\r\n    \"billingAccount\": \"{{baseEntityPrefix}}_BA\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"subscriptionDate\": \"2016-03-10\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User Account 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5bc644c5-a3b3-4498-9d37-b805f1f3f0ee",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_UA_2\",\r\n    \"description\": \"{{baseEntityPrefix}}_UA_2\",\r\n    \"billingAccount\": \"{{baseEntityPrefix}}_BA_2\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"subscriptionDate\": \"2016-03-10\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User Account 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a76ba37c-1532-411d-83d8-39cf37c3193e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"description\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"billingAccount\": \"{{baseEntityPrefix}}_BA_3\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"subscriptionDate\": \"2016-03-10\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b64118c4-b4ee-4e5c-8810-93d67126bd56",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_SUB\",\r\n    \"description\": \"{{baseEntityPrefix}}_SUB\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2015-02-01\",\r\n    \"endAgreementDate\": \"2015-05-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Access",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7fb55715-1bfc-45c4-b9fc-c25bf9967613",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_ACCP\",\r\n    \"subscription\": \"{{baseEntityPrefix}}_SUB\",\r\n    \"startDate\": \"2016-06-01\",\r\n    \"endDate\": \"2016-06-30\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/access/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"access",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Setup Administration: Measurable Qtt,Charts, Notifications, etc..",
							"item": [
								{
									"name": "create MeasurableQuantities",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a89504dc-16a6-4cf5-a995-6270f9a2dd4d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_MQ1\",\r\n    \"description\": \"{{baseEntityPrefix}}_MQ1-DESC\",\r\n    \"dimension1\": \"1\",\r\n    \"dimension2\": \"2\",\r\n    \"dimension3\": \"3\",\r\n    \"dimension4\": \"4\",\r\n    \"editable\": \"false\",\r\n    \"additive\": \"true\",\r\n    \"sqlQuery\": \"select count(*) from billing_subscription where status='CREATED' and date(created)='#{date}'\",\r\n    \"measurementPeriod\": \"MONTHLY\",\r\n    \"lastMeasureDate\": \"2016-03-16\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/measurableQuantity",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"measurableQuantity"
											]
										}
									},
									"response": []
								},
								{
									"name": "create BarChart",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "97b9812c-3aa9-4916-9bbf-b1c3738ced43",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_BC1\",\r\n    \"description\": \"{{baseEntityPrefix}}_BarCharts\",\r\n    \"measurableQuantity\": {\r\n        \"code\": \"{{baseEntityPrefix}}_MQ1\"\r\n    },\r\n    \"width\": \"100\",\r\n    \"height\": \"100\",\r\n    \"style\": \"test1\",\r\n    \"styleClass\": \"test1\",\r\n    \"extender\": \"test1\",\r\n    \"visible\": \"true\",\r\n    \"legendPosition\": \"n\",\r\n    \"barPadding\": \"100\",\r\n    \"barMargin\": \"100\",\r\n    \"orientation\": \"vertical\",\r\n    \"stacked\": \"true\",\r\n    \"min\": \"100\",\r\n    \"max\": \"100\",\r\n    \"breakOnNull\": \"false\",\r\n    \"xaxisLabel\": \"test\",\r\n    \"yaxisLabel\": \"test\",\r\n    \"xaxisAngle\": \"10\",\r\n    \"yaxisAngle\": \"10\",\r\n    \"legendCols\": \"20\",\r\n    \"legendRows\": \"20\",\r\n    \"zoom\": \"true\",\r\n    \"animate\": \"true\",\r\n    \"showDataTip\": \"true\",\r\n    \"datatipFormat\": \"false\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/chart/bar",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"chart",
												"bar"
											]
										}
									},
									"response": []
								},
								{
									"name": "create PieChart",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23a0a81e-af3c-4872-8b4b-c515175dbd74",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_PC1\",\r\n    \"description\": \"{{baseEntityPrefix}}_PieCharts\",\r\n    \"measurableQuantity\": {\r\n        \"code\": \"{{baseEntityPrefix}}_MQ1\"\r\n    },\r\n    \"width\": \"123\",\r\n    \"height\": \"123\",\r\n    \"style\": \"style1\",\r\n    \"styleClass\": \"style_class1\",\r\n    \"extender\": \"extender1\",\r\n    \"visible\": \"true\",\r\n    \"filled\": \"false\",\r\n    \"legendPosition\": \"n\",\r\n    \"diameter\": \"120\",\r\n    \"sliceMargin\": \"10\",\r\n    \"shadow\": \"true\",\r\n    \"showDataLabels\": \"false\",\r\n    \"legendCols\": \"23\",\r\n    \"legendRows\": \"23\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/chart/pie",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"chart",
												"pie"
											]
										}
									},
									"response": []
								},
								{
									"name": "create LineChart",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "10379ccb-c6e8-4487-9994-fba331c88a73",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_LC1\",\r\n    \"description\": \"{{baseEntityPrefix}}_LineCharts\",\r\n    \"measurableQuantity\": {\r\n        \"code\": \"{{baseEntityPrefix}}_MQ1\"\r\n    },\r\n    \"width\": \"200\",\r\n    \"height\": \"200\",\r\n    \"style\": \"style1\",\r\n    \"styleClass\": \"styleClass2\",\r\n    \"extender\": \"extender3\",\r\n    \"visible\": \"true\",\r\n    \"filled\": \"false\",\r\n    \"legendPosition\": \"w\",\r\n    \"shadow\": \"true\",\r\n    \"minX\": \"45\",\r\n    \"maxX\": \"45\",\r\n    \"minY\": \"45\",\r\n    \"maxY\": \"45\",\r\n    \"breakOnNull\": \"true\",\r\n    \"xaxisLabel\": \"label 1\",\r\n    \"yaxisLabel\": \"label 2\",\r\n    \"xaxisAngle\": \"12\",\r\n    \"yaxisAngle\": \"12\",\r\n    \"stacked\": \"true\",\r\n    \"zoom\": \"true\",\r\n    \"animate\": \"false\",\r\n    \"showDataTip\": \"false\",\r\n    \"datatipFormat\": \"false\",\r\n    \"legendCols\": \"56\",\r\n    \"legendRows\": \"56\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/chart/line",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"chart",
												"line"
											]
										}
									},
									"response": []
								},
								{
									"name": "create ScriptInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "157ae1b2-2154-46f0-8d64-0bc02be6c89d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"org.meveo.service.script.{{baseEntityPrefix}}_Script\",\n    \"description\": \"{{baseEntityPrefix}}_Script_Instance\",\n    \"type\": \"JAVA\",\n    \"script\": \"package org.meveo.service.script;           \\r\\n            import java.util.Map;\\r\\n            import java.math.BigDecimal;\\r\\n            import org.meveo.admin.exception.BusinessException;\\r\\n            import org.meveo.model.admin.User;\\r\\n            import org.meveo.model.crm.Provider;\\r\\n            import org.slf4j.Logger;\\r\\n            import org.slf4j.LoggerFactory;         \\r\\n            public class {{baseEntityPrefix}}_Script extends Script {             \\r\\n                private static final Logger log = LoggerFactory.getLogger({{baseEntityPrefix}}_Script.class);\\r\\n                public void execute(Map<String,Object> context) throws BusinessException{\\r\\n                    log.debug(\\\\\\\"{{baseEntityPrefix}}_Script creation script...\\\\\\\");\\r\\n                    log.debug(\\\\\\\"{{baseEntityPrefix}}_Script creation script.\\\\\\\");\\r\\n                }\\r\\n            }\",\n    \"executionRoles\": [\n        {\n            \"name\": \"administrateur\"\n        }\n    ],\n    \"sourcingRoles\": [\n        {\n            \"name\": \"administrateur\"\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Notifications",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c67589b-30bf-4f95-98a6-acfeb9f809b8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_Notification1\",\r\n    \"classNameFilter\": \"org.meveo.model.crm.Customer\",\r\n    \"eventTypeFilter\": \"CREATED\",\r\n    \"elFilter\": \"#{event.code.startsWith('test')}\",\r\n    \"scriptInstanceCode\": \"org.meveo.service.script.{{baseEntityPrefix}}_Script\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Webhook",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cd0a3bdb-8c46-4040-9102-923ab9161877",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_WebHook1\",\r\n    \"classNameFilter\": \"org.meveo.model.crm.Customer\",\r\n    \"eventTypeFilter\": \"CREATED\",\r\n    \"elFilter\": \"#{event.code.startsWith('test')}\",\r\n    \"scriptInstanceCode\": \"org.meveo.service.script.{{baseEntityPrefix}}_Script\",\r\n    \"host\": \"localhost\",\r\n    \"port\": \"8080\",\r\n    \"page\": \"meveo/api/rest/\",\r\n    \"httpMethod\": \"HTTP_GET\",\r\n    \"username\": \"test.username\",\r\n    \"password\": \"test.password\",\r\n    \"counterTemplate\": \"{{baseEntityPrefix}}_CT1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/webhook/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"webhook",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create EmailNotifications",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "491a27b8-e31a-43cb-b6a0-0816ac9efed2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_EmailNotif1\",\r\n    \"classNameFilter\": \"org.meveo.model.crm.Customer\",\r\n    \"eventTypeFilter\": \"CREATED\",\r\n    \"elFilter\": \"#{event.code.startsWith('test')}\",\r\n    \"scriptInstanceCode\": \"org.meveo.service.script.{{baseEntityPrefix}}_Script\",\r\n    \"emailFrom\": \"OpenCell\",\r\n    \"emailToEl\": \"edward.legaspi@opencellsoft.com\",\r\n    \"subject\": \"Test Meveo Application\",\r\n    \"body\": \"Test Body\",\r\n    \"htmlBody\": \"HTML Body\",\r\n    \"counterTemplate\": \"{{baseEntityPrefix}}_CT1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/email/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"email",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Timer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8c521de-940e-433a-8781-fc2143d68b01",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_Timer1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Timer_DESCP\",\r\n    \"hour\": \"1\",\r\n    \"minute\": \"10\",\r\n    \"second\": \"45\",\r\n    \"year\": \"*\",\r\n    \"month\": \"*\",\r\n    \"dayOfMonth\": \"*\",\r\n    \"dayOfWeek\": \"*\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/timerEntity/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"timerEntity",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create JobInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1aa1bdb9-5024-4edb-995b-2159eff1cbf2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"jobTemplate\": \"ExportSubscriptionsJob\",\r\n    \"code\": \"{{baseEntityPrefix}}_ImpExp-Job1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Import-Export\",\r\n    \"timerCode\": \"{{baseEntityPrefix}}_Timer1\",\r\n    \"jobCategory\": \"IMPORT/EXPORT\",\r\n    \"followingJob\": \"ACCO_JOB\",\r\n    \"parameter\": \"param1\",\r\n    \"active\": \"false\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "21a8271a-5609-45d8-9d88-f9de06f0eadc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_Filter1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Filter1_DESCP\",\r\n    \"shared\": \"false\",\r\n    \"inputXml\": \"<filter>\\n  <disabled>false</disabled>\\n  <appendGeneratedCode>false</appendGeneratedCode>\\n  <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n    <filterConditionType>COMPOSITE_AND</filterConditionType>\\n    <filterConditions>\\n      <primitiveFilterCondition>\\n        <filterConditionType>PRIMITIVE</filterConditionType>\\n        <fieldName>startRatingDate</fieldName>\\n        <operator>>=</operator>\\n        <operand>date:01/09/2015</operand>\\n      </primitiveFilterCondition>\\n    </filterConditions>\\n  </filterCondition>\\n  <primarySelector>\\n    <targetEntity>org.meveo.model.catalog.PricePlanMatrix</targetEntity>\\n    <alias>p</alias>\\n    <displayFields>\\n      <field>code</field>\\n      <field>eventCode</field>\\n    </displayFields>\\n    <exportFields/>\\n    <ignoreIfNotFoundForeignKeys/>\\n  </primarySelector>\\n  <secondarySelectors/>\\n</filter>\"\r\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filter/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filter",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Timer Hourly",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "11f915c1-76f3-4710-bdcc-1faafd2a8581",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"Hourly\",\r\n    \"description\": \"Hourly\",\r\n    \"hour\": \"*\",\r\n    \"minute\": \"0\",\r\n    \"second\": \"0\",\r\n    \"year\": \"*\",\r\n    \"month\": \"*\",\r\n    \"dayOfMonth\": \"*\",\r\n    \"dayOfWeek\": \"*\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/timerEntity/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"timerEntity",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create GDPR JobInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "049f24ac-7bb3-4e48-9fc1-3a1131bb38d8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"jobTemplate\": \"GDPRJob\",\n    \"code\": \"GDPR_Job\",\n    \"description\": \"GDPR_Job\",\n    \"jobCategory\": \"DWH\",\n    \"active\": \"false\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create Timer Daily - Midnight",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "03882f56-9ee4-437f-b056-d6d0b803d4af",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"Daily-midnight\",\r\n    \"description\": \"Daily-midnight\",\r\n    \"hour\": \"23\",\r\n    \"minute\": \"59\",\r\n    \"second\": \"59\",\r\n    \"year\": \"*\",\r\n    \"month\": \"*\",\r\n    \"dayOfMonth\": \"*\",\r\n    \"dayOfWeek\": \"*\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/timerEntity/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"timerEntity",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "create PaymentSchedule Job",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "39eeb82a-04de-49d1-8685-87a9abf3d573",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"jobTemplate\": \"PaymentScheduleProcessingJob\",\r\n    \"code\": \"PaymentSchedule_Job\",\r\n    \"description\": \"PaymentSchedule_Job\",\r\n    \"jobCategory\": \"ACCOUNT_RECEIVABLES\",\r\n    \"active\": \"false\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Setup TerminationReason",
							"item": [
								{
									"name": "update TERM_REASON_1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c78df74b-df68-41e9-8d56-79019b1ceac1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TERM_REASON_1\",\r\n    \"description\": \"Agreement Reimbursement Charge\",\r\n    \"applyAgreement\": \"true\",\r\n    \"applyReimbursment\": \"true\",\r\n    \"applyTerminationCharges\": \"true\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/terminationReason",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"terminationReason"
											]
										}
									},
									"response": []
								},
								{
									"name": "update TERM_REASON_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c5b32d8c-7784-4b1d-a89e-e52a2084de91",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TERM_REASON_2\",\r\n    \"description\": \"Reimbursement\",\r\n    \"applyAgreement\": \"false\",\r\n    \"applyReimbursment\": \"true\",\r\n    \"applyTerminationCharges\": \"false\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/terminationReason",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"terminationReason"
											]
										}
									},
									"response": []
								},
								{
									"name": "update TERM_REASON_3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cc44731a-f3ec-43c7-be55-a5d596fba913",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"TERM_REASON_3\",\r\n    \"description\": \"Charge\",\r\n    \"applyAgreement\": \"false\",\r\n    \"applyReimbursment\": \"false\",\r\n    \"applyTerminationCharges\": \"true\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/terminationReason",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"terminationReason"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Service workflow",
					"item": [
						{
							"name": "Service workflow - service multi activation",
							"item": [
								{
									"name": "SET_VARIABLES",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "039257cc-cd19-4383-b50f-0fa72c71dcf3",
												"exec": [
													"pm.globals.set(\"index\", 240);"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cc7a0867-0645-4752-9313-0e0590792526",
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "OPTIONS",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "https://postman-echo.com/",
											"protocol": "https",
											"host": [
												"postman-echo",
												"com"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Set service.allowMultiInstantiation=true - AUTHORIZATION_SUPERADMIN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b474f52a-9a55-4909-9931-5a5e16836c8e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.superpassword}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.superusername}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuc3VwZXJhZG1pbjpvcGVuY2VsbC5zdXBlcmFkbWlu"
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"property\": \"service.allowMultiInstantiation\",\r\n\t\"value\": \"true\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/configurations/setProperty",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"configurations",
												"setProperty"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ca36de6-b564-4764-b909-3027e18b16ea",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n\t\"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n\t\"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n\t\"subscriptionDate\": \"2016-12-01\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instantiate Service 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2dbf50e-07c3-4567-84b0-d097e533bb1d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"3\",\r\n                \"subscriptionDate\": \"2016-12-11\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instantiate Service again - fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c5908d81-7013-406a-a51c-b2545a63d0bc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"ServiceInstance with code=\"+pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1 is already instanciated or activated.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"3\",\r\n                \"subscriptionDate\": \"2016-12-05\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b1ec31b6-5da3-432c-bc70-40adc0f1e124",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_SUB_SERVICE_MULTI\");",
													"    pm.expect(jsonData.subscription.userAccount).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_UA\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"INACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(3);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(1481414400000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1]).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services 1 and 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "03318ebd-9f3a-451d-8052-4fd454a7a867",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n\t\"servicesToActivate\": {\r\n\t\t\"service\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n\t\t\t\t\"quantity\": \"1\",\r\n\t\t\t\t\"subscriptionDate\": \"2016-12-02\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_SERVICE2\",\r\n\t\t\t\t\"quantity\": \"2\",\r\n\t\t\t\t\"subscriptionDate\": \"2017-01-01\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription A1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1d6d41ed-af2e-4f35-a99d-6cf0a51abb72",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_SUB_SERVICE_MULTI\");",
													"    pm.expect(jsonData.subscription.userAccount).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_UA\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(1480636800000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(1483228800000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find service instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b1ebcb9b-a126-42e0-a0fc-1b9dd338037f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceInstance.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.serviceInstance.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.serviceInstance.quantity).to.eql(1);",
													"    pm.expect(jsonData.serviceInstance.subscriptionDate).to.eql(1480636800000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/serviceInstance?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI&serviceInstanceCode={{baseEntityPrefix}}_SERVICE1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"serviceInstance"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												},
												{
													"key": "serviceInstanceCode",
													"value": "{{baseEntityPrefix}}_SERVICE1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Service1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "976bd82f-8423-4509-abdc-ef84a772b179",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"services\": [\r\n        \"{{baseEntityPrefix}}_SERVICE1\"\r\n    ],\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"2016-12-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instantiate Service 1 again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "646b8c17-96b3-4d51-8172-e964ed6d3111",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"3\",\r\n                \"subscriptionDate\": \"2016-12-05\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate service 1 again - change quantity and subscription date",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da56d9bf-1f94-4c7c-8e8d-d4906c05fe6a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"5\",\r\n                \"subscriptionDate\": \"2016-12-08\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription A2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6fb8cdc1-f380-4971-a0b5-a06caf1bb08b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_SUB_SERVICE_MULTI\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(1480636800000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].terminationDate).to.eql(1480636800000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].terminationReason).to.eql(\"TERM_REASON_1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(1483228800000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].quantity).to.eql(5);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].subscriptionDate).to.eql(1481155200000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Service1 A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d7fd7363-86f1-4ec2-acf6-81406be7cacf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"services\": [\r\n        \"{{baseEntityPrefix}}_SERVICE1\"\r\n    ],\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"2016-12-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instantiate Service 1 again 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "97f9bc59-b232-4090-8f6e-346e127dc593",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"11\",\r\n                \"subscriptionDate\": \"2016-12-11\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate service 1 again - no changes",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98f0e934-e7ce-4971-80b5-e60c5dc52744",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"subscriptionDate\": \"2016-12-11\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription A3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "10cd00ae-38b6-4de5-b8cf-e5cbf5a06a0d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_MULTI\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.globals.set(\"siid1\", jsonData.subscription.services.serviceInstance[0].id);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(1480636800000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].terminationDate).to.eql(1480636800000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].terminationReason).to.eql(\"TERM_REASON_1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.globals.set(\"siid2\", jsonData.subscription.services.serviceInstance[1].id);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(1483228800000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.globals.set(\"siid3\", jsonData.subscription.services.serviceInstance[2].id);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].quantity).to.eql(5);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].subscriptionDate).to.eql(1481155200000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].terminationDate).to.eql(1481155200000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[2].terminationReason).to.eql(\"TERM_REASON_1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[3].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.globals.set(\"siid4\", jsonData.subscription.services.serviceInstance[3].id);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[3].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[3].quantity).to.eql(11);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[3].subscriptionDate).to.eql(1481414400000);",
													"});",
													"",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find service instance - fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "75ae6d66-d2cd-4a0a-9361-bf88a8d43edc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"More than one service instance with status [] was found. Please use ID to refer to service instance.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/serviceInstance?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI&serviceInstanceCode={{baseEntityPrefix}}_SERVICE1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"serviceInstance"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												},
												{
													"key": "serviceInstanceCode",
													"value": "{{baseEntityPrefix}}_SERVICE1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find service instance by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e15b683b-7ddd-4478-ad62-07ba2ae60d28",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceInstance.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.serviceInstance.status).to.eql(\"TERMINATED\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/serviceInstance?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI&serviceInstanceId={{siid1}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"serviceInstance"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												},
												{
													"key": "serviceInstanceId",
													"value": "{{siid1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Service by id1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6433ea41-684f-4f9b-ba4a-7bd0d73bf70c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"serviceIds\": [{{siid4}}],\r\n\t\"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n\t\"terminationReason\": \"TERM_REASON_1\",\r\n\t\"terminationDate\": \"2016-12-31\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription T1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6181b9e3-5f6e-4145-9e00-fbffccdc51a4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_MULTI\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[3].id).to.eql(pm.globals.get(\"siid4\"));",
													"    pm.expect(jsonData.subscription.services.serviceInstance[3].status).to.eql(\"TERMINATED\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Service2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e07a53f4-e073-4609-9d36-fe2ee8981552",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"services\": [\r\n        \"{{baseEntityPrefix}}_SERVICE2\"\r\n    ],\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI\",\r\n    \"terminationReason\": \"TERM_REASON_2\",\r\n    \"terminationDate\": \"2016-12-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription T2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a4abcafb-b193-46e0-819e-8311c2a43106",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_MULTI\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"TERMINATED\");",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_MULTI"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Service workflow - service single activation",
							"item": [
								{
									"name": "Set service.allowMultiInstantiation=false - AUTHORIZATION_SUPERADMIN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4264bd29-0ac7-499c-9d28-b21c01e61b9d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"property\": \"service.allowMultiInstantiation\",\r\n\t\"value\": \"false\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/configurations/setProperty",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"configurations",
												"setProperty"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d795b3b-38d5-4bfd-96e7-32a32f6b9e70",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"code\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\r\n\t\"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n\t\"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n\t\"subscriptionDate\": \"2016-12-01\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instantiate Service 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ccaee05-0f1f-4856-a60c-5119fa37076f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\n    \"servicesToInstantiate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2016-12-01\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instantiate Service again - fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f74d0cb3-2954-4ddd-a5be-0fff79f77adf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ServiceInstance with code=\"+pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1 is already instanciated or activated.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\n    \"servicesToInstantiate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"3\",\n                \"subscriptionDate\": \"2016-12-11\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription I",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b7e57294-2d58-4ae0-881d-b1cc858b81c6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_WFL\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"CREATED\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(1480550400000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"INACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(1480550400000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_WFL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services 1 and 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "639409b3-beab-4135-89bd-0be44a3abd0a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\r\n\t\"servicesToActivate\": {\r\n\t\t\"service\": [\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n\t\t\t\t\"quantity\": \"1\",\r\n\t\t\t\t\"subscriptionDate\": \"2016-12-02\"\r\n\t\t\t},\r\n\t\t\t{\r\n\t\t\t\t\"code\": \"{{baseEntityPrefix}}_SERVICE2\",\r\n\t\t\t\t\"quantity\": \"2\",\r\n\t\t\t\t\"subscriptionDate\": \"2017-01-01\"\r\n\t\t\t}\r\n\t\t]\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription A1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a4f4d46-992f-463d-8c41-725fbaee5ce1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_WFL\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(1480550400000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.globals.set(\"siid1\", jsonData.subscription.services.serviceInstance[0].id);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(1480636800000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE2\");",
													"    pm.globals.set(\"siid2\", jsonData.subscription.services.serviceInstance[1].id);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(1483228800000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_WFL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find service instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "efa6c8ee-6560-4285-a160-8433d8790371",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceInstance.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.serviceInstance.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.serviceInstance.subscriptionDate).to.eql(1480636800000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/serviceInstance?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_WFL&serviceInstanceCode={{baseEntityPrefix}}_SERVICE1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"serviceInstance"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL"
												},
												{
													"key": "serviceInstanceCode",
													"value": "{{baseEntityPrefix}}_SERVICE1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Instantiate Service 1 again - fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f11e832f-6705-403d-9dc5-8deae2fd6b23",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ServiceInstance with code=\"+pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1 is already instanciated or activated.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"3\",\r\n                \"subscriptionDate\": \"2016-12-05\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate service 1 again - fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f9b8e431-0e2e-476c-ac13-92642f0b0e34",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"Cannot deserialize instance of `java.util.ArrayList` out of START_OBJECT token\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n\t\"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\r\n\t\"servicesToActivate\": {\r\n\t\t\"service\": {\r\n\t\t\t\"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n\t\t\t\"quantity\": \"5\",\r\n\t\t\t\"subscriptionDate\": \"2016-12-08\"\r\n\t\t}\r\n\t}\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find service instance by ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0e1757c8-b416-4b73-b672-262de1391126",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.serviceInstance.code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.serviceInstance.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.serviceInstance.subscriptionDate).to.eql(1480636800000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/serviceInstance?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_WFL&serviceInstanceId={{siid1}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"serviceInstance"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL"
												},
												{
													"key": "serviceInstanceId",
													"value": "{{siid1}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Service by id1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dc82fe0a-15bb-479b-8816-8a2f10f5a150",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"serviceIds\": [\n        \"{{siid1}}\"\n    ],\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\n    \"terminationReason\": \"TERM_REASON_1\",\n    \"terminationDate\": \"2016-12-31\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription T1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9eab6361-d3fc-4550-a83b-75f663fcbd79",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_WFL\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(1480550400000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(1480636800000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(1483228800000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_WFL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Service 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1614f4ab-367f-4420-96ed-da8037a37a1f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"services\": [\r\n        \"{{baseEntityPrefix}}_SERVICE2\"\r\n    ],\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL\",\r\n    \"terminationReason\": \"TERM_REASON_3\",\r\n    \"terminationDate\": \"2016-12-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription T2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6cf2d7f4-0a15-46c1-947f-8290d0c7a030",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SERVICE_WFL\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(1480550400000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(1480636800000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(1483228800000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SERVICE_WFL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SERVICE_WFL"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "cd1e98f2-a23f-46d6-95dd-1aef747c8acd",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 242);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "fb777f4f-3e0c-4290-8c3e-c0af456c7775",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Subscription workflow",
					"item": [
						{
							"name": "Terminate Subscription",
							"item": [
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "de434853-d3a4-4621-a380-32cda53d05c7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_SUB_WFL\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2016-03-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "867afd04-d8da-48b1-805c-57c6a91fd359",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SUB_WFL\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2015-02-02\"\r\n            },\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\r\n                \"quantity\": \"2\",\r\n                \"subscriptionDate\": \"2015-04-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "62126287-12b4-4ae2-87c3-a545423f41cd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SUB_WFL\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(1456790400000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(1422835200000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(1427846400000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SUB_WFL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SUB_WFL"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Subscription 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "194650bb-ed96-44ea-ba37-08294062c607",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_SUB_WFL\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"2016-04-30\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bb1a8a5c-0d0f-4065-a676-a70b1276b52a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_SUB_WFL\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"RESILIATED\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(1456790400000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(1422835200000);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(2);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(1427846400000);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_SUB_WFL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_SUB_WFL"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription - future termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5be156f-ddfd-41d8-b2c6-eb84ffbf0968",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"{{today}}\"\r\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services - future termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2372d61b-2654-48e8-9b1d-cfd7b7194605",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"{{today}}\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - future termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "77750c28-13b0-4734-be40-e5311b22abe0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_FUTURE_TERMINATION\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(new Date(pm.globals.get(\"today\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(new Date(pm.globals.get(\"today\")).getTime());",
													"    pm.expect(jsonData.subscription.renewalRule.initialTermType).to.eql(\"RECURRING\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Subscription - future termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e1518a45-e538-4be2-8287-b878ba444361",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"{{terminationDate}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - future termination 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3960c22f-c53e-4564-b8e8-31de358325ed",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_FUTURE_TERMINATION\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(new Date(pm.globals.get(\"today\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(new Date(pm.globals.get(\"today\")).getTime());",
													"    pm.expect(jsonData.subscription.subscribedTillDate).to.eql(new Date(pm.globals.get(\"terminationDate\")).getTime());",
													"    pm.expect(jsonData.subscription.renewalRule.endOfTermAction).to.eql(\"TERMINATE\");",
													"    pm.expect(jsonData.subscription.renewalRule.terminationReasonCode).to.eql(\"TERM_REASON_1\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription - in-between-days termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0731a923-a5d2-40bb-a601-d5f8c30b13eb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"{{10daysBefore}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services - in-between-days termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b0ed964e-49a0-43bd-8033-20f396696252",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"{{5daysBefore}}\"\r\n            },\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"{{2daysBefore}}\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - in-between-days termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c372137-d880-41da-bec3-cf8b64079a1d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_INBETWEEN_TERMINATION\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(new Date(pm.globals.get(\"10daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(new Date(pm.globals.get(\"5daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(new Date(pm.globals.get(\"2daysBefore\")).getTime());",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Subscription - in-between-days termination - before Subscription's subscription date -KO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "acc58ea5-d257-4e0e-9254-6564806e21b6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Termination date can not be before the subscription date\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"{{20daysBefore}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Subscription - in-between-days termination - on Subscription's subscription date - OK",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c53ebf48-d971-45ad-b491-a841754c6c02",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"{{10daysBefore}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - in-between-days termination 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60bb6fd7-7edc-46d4-9ce2-7cbabffc027f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_INBETWEEN_TERMINATION\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"RESILIATED\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(new Date(pm.globals.get(\"10daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.terminationDate).to.eql(new Date(pm.globals.get(\"10daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(new Date(pm.globals.get(\"5daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].terminationDate).to.eql(new Date(pm.globals.get(\"5daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(new Date(pm.globals.get(\"2daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].terminationDate).to.eql(new Date(pm.globals.get(\"2daysBefore\")).getTime());",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_INBETWEEN_TERMINATION"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription - in-between-days 2 termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ad7033e-7649-4373-8a12-84f11755e817",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"{{10daysBefore}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services - in-between-days 2 termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f66e4450-6892-4722-9231-2740726bc335",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"{{5daysBefore}}\"\n            },\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"{{2daysBefore}}\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - in-between-days 2 termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "77c0f5e5-73b6-49fd-8ebd-6132b50c4865",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_INBETWEEN_2_TERMINATION\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(new Date(pm.globals.get(\"10daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(new Date(pm.globals.get(\"5daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(new Date(pm.globals.get(\"2daysBefore\")).getTime());",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate Subscription - in-between-days 2 termination - inbetween service's subscription date - OK",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "18b9c14a-0399-44c7-8e53-b05592d5dfdb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"terminationDate\": \"{{3daysBefore}}\"\r\n}\r\n\t",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - in-between-days 2 termination 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "99cccc8a-6b0b-4bd7-8aca-a2a333b288f6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_INBETWEEN_2_TERMINATION\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"RESILIATED\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(new Date(pm.globals.get(\"10daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.terminationDate).to.eql(new Date(pm.globals.get(\"3daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE1\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].subscriptionDate).to.eql(new Date(pm.globals.get(\"5daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].terminationDate).to.eql(new Date(pm.globals.get(\"3daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].code).to.eql(pm.environment.get(\"baseEntityPrefix\") + \"_SERVICE2\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].status).to.eql(\"TERMINATED\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(1);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].subscriptionDate).to.eql(new Date(pm.globals.get(\"2daysBefore\")).getTime());",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].terminationDate).to.eql(new Date(pm.globals.get(\"2daysBefore\")).getTime());",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_INBETWEEN_2_TERMINATION"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription - future termination 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e90cf7c-e8e0-400d-a257-79dfab3cb5ed",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION_3\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"{{today}}\",\r\n    \"terminationDate\": \"{{terminationDate}}\",\r\n    \"terminationReason\": \"TERM_REASON_1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - future termination 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0923ca48-03dd-4896-8cb0-81a0448f1d8e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_FUTURE_TERMINATION_3\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"CREATED\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(new Date(pm.globals.get(\"today\")).getTime());",
													"    pm.expect(jsonData.subscription.terminationDate).to.eql(new Date(pm.globals.get(\"terminationDate\")).getTime());",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION_3",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION_3"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription - future termination 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7793221c-3602-4203-82bc-715ee795e112",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION_4\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"{{today}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services - future termination 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c000071b-7a4a-4ab3-98fd-b29e2abc9eb8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION_4\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"{{today}}\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update subscription - future termination 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0edabf2a-5dbf-45f4-80e9-32e7d446cc73",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION_4\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"{{today}}\",\r\n    \"terminationDate\": \"{{terminationDate}}\",\r\n    \"terminationReason\": \"TERM_REASON_1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - future termination 4",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "acd9d59a-e0b0-4d1a-a21e-b34396243cbd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_FUTURE_TERMINATION_4\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"ACTIVE\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(new Date(pm.globals.get(\"today\")).getTime());",
													"    pm.expect(jsonData.subscription.subscribedTillDate).to.eql(new Date(pm.globals.get(\"terminationDate\")).getTime());",
													"    pm.expect(jsonData.subscription.renewalRule.initialTermType).to.eql(\"FIXED\");",
													"    pm.expect(jsonData.subscription.renewalRule.autoRenew).to.eql(false);",
													"    pm.expect(jsonData.subscription.renewalRule.endOfTermAction).to.eql(\"TERMINATE\");",
													"    pm.expect(jsonData.subscription.renewalRule.terminationReasonCode).to.eql(\"TERM_REASON_1\");",
													"    pm.expect(jsonData.subscription.renewalRule.extendAgreementPeriodToSubscribedTillDate).to.eql(false);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION_4",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_FUTURE_TERMINATION_4"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "ApplyOneShotChargeInstance",
							"item": [
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d8ac1144-c3e9-44de-9085-008d88eea088",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_SUB_AOCI\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2016-03-01\"\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a256ed68-5b61-419a-98a4-eee44c3fec9d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SUB_AOCI\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2015-02-02\"\r\n            },\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\r\n                \"quantity\": \"2\",\r\n                \"subscriptionDate\": \"2015-04-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "applyOneShotChargeInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5eac50f-4e1c-43cd-b992-7f67c12984c5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"oneShotCharge\": \"{{baseEntityPrefix}}_OS1\",\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_SUB_AOCI\",\n    \"createWallet\": false,\n    \"operationDate\": \"2016-04-06\",\n    \"quantity\": \"1\",\n    \"description\": \"{{baseEntityPrefix}}_Apply-OneShotChargeInstance_Description\",\n    \"amountWithoutTax\": \"11\",\n    \"amountWithTax\": \"13\",\n    \"criteria1\": \"criteria1\",\n    \"criteria2\": \"criteria2\",\n    \"criteria3\": \"criteria3\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/applyOneShotChargeInstance",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"applyOneShotChargeInstance"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Subscription instantiate/activate service NOT in Offer and modify offer in subscription",
							"item": [
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f231aa85-20b2-4f80-9979-176742a931de",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2015-02-01\",\r\n    \"endAgreementDate\": \"2015-05-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create service with min req Vals",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3cc17fe-5c68-407e-a409-b1e9a49e9d75",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SERVICE\",\r\n    \"invoicingCalendar\": \"Multi period\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services with service not in Offer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8bca6c1d-9dc1-4950-b5c8-5ceccde5b0b7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"BUSINESS_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Service \"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_SERVICE is not associated with Offer\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_SERVICE\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2015-02-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instanticate services with service not in Offer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cf047348-f92a-4aa7-87b8-a9b79a93e3c2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"BUSINESS_API_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"No offerServiceTemplate corresponds to \"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_SERVICE\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_SERVICE\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2016-05-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update subscription with another offer - ok",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba1626ca-0977-41b5-af8f-1191a9faeefe",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER2\",\r\n    \"subscriptionDate\": \"2015-02-01\",\r\n    \"endAgreementDate\": \"2015-05-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instanticate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0180e6db-130b-4335-9f32-05d322605346",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"servicesToInstantiate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2016-05-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update subscription with another offer - fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c52ebea-539d-4162-af48-e21050ce1b95",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"INVALID_PARAMETER\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Cannot change the offer of subscription once the services are instantiated\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_NO\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2015-02-01\",\r\n    \"endAgreementDate\": \"2015-05-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Apply Product",
							"item": [
								{
									"name": "Create CFT Product 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e7f80e1f-2023-4924-b03b-c4013855658f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n    \"fieldType\": \"DOUBLE\",\r\n    \"appliesTo\": \"ProductInstance\",\r\n    \"storageType\": \"SINGLE\",\r\n    \"defaultValue\": \"101\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CFT Product 101",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5307118e-75dc-48c4-947d-e133a0358366",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE101\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE101\",\r\n    \"fieldType\": \"DOUBLE\",\r\n    \"appliesTo\": \"ProductInstance\",\r\n    \"storageType\": \"SINGLE\",\r\n    \"defaultValue\": \"101\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Product charge100",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "65c1d241-843c-4892-b819-2c58a59acecc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_PC100\",\r\n    \"description\": \"{{baseEntityPrefix}}_PC100\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": false,\r\n    \"amountEditable\": false,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}-Produit 100 Test\"\r\n        }\r\n    ],\r\n    \"taxClassCode\":\"{{baseEntityPrefix}}_taxClass\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalogManagement/productChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalogManagement",
												"productChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Product 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "666de6fe-6682-4830-bf29-ea20c6cd562e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_PRODUCT100\",\r\n    \"description\": \"{{baseEntityPrefix}}_PRODUCT2 DESC\",\r\n    \"name\": \"{{baseEntityPrefix}}_PRODUCT100 NAME\",\r\n    \"productChargeTemplate\": [\r\n        {\r\n            \"code\": \"{{baseEntityPrefix}}_PC100\",\r\n            \"invoiceSubCategory\": \"SUB_DATA\",\r\n            \"disabled\": false\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalogManagement/productTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalogManagement",
												"productTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create priceplan product 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5cc7cdea-8093-4eea-a226-04bb2dfcf9f0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_PC100_PP\",\r\n    \"description\": \"price plan product 100\",\r\n    \"eventCode\": \"{{baseEntityPrefix}}_PC100\",\r\n    \"amountWithoutTax\": \"5\",\r\n    \"amountWithTax\": \"6\",\r\n    \"priority\": \"1\",\r\n    \"amountWithoutTaxEL\": \"#{mv:getInheritedCFValue(productInstance,'{{entityPrefix}}_{{index}}_CF_PROD_PRICE100')}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c4baf978-00a4-4dcd-b411-3c2f0be6ed2f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_PROD\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_PROD\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2015-02-01\",\r\n    \"endAgreementDate\": \"2015-05-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Apply product 2 to UA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7a312fb4-b985-489d-a684-17db0c075364",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"product\": \"{{baseEntityPrefix}}_PRODUCT2\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"operationDate\": \"2016-04-06\",\r\n    \"quantity\": \"1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Apply-OneShotChargeInstance_Description_UA\",\r\n    \"amountWithoutTax\": \"11\",\r\n    \"amountWithTax\": \"13\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n                \"doubleValue\": \"10\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/applyProduct",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"applyProduct"
											]
										}
									},
									"response": []
								},
								{
									"name": "Apply product 2 to UA_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "daef65f2-8fd3-46ae-befe-b09846e76e40",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"product\": \"{{baseEntityPrefix}}_PRODUCT2\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_2\",\r\n    \"operationDate\": \"2016-04-06\",\r\n    \"quantity\": \"1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Apply-OneShotChargeInstance_Description_UA\",\r\n    \"amountWithoutTax\": \"11\",\r\n    \"amountWithTax\": \"13\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n                \"doubleValue\": \"10\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/applyProduct",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"applyProduct"
											]
										}
									},
									"response": []
								},
								{
									"name": "Apply product 2 to SUB_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9d1c20b8-08ef-4ea1-95ec-70a6a21de2e8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"product\": \"{{baseEntityPrefix}}_PRODUCT2\",\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_PROD\",\r\n    \"operationDate\": \"2016-04-06\",\r\n    \"quantity\": \"1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Apply-OneShotChargeInstance_Description_SUB\",\r\n    \"amountWithoutTax\": \"11\",\r\n    \"amountWithTax\": \"13\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n                \"doubleValue\": \"10\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/applyProduct",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"applyProduct"
											]
										}
									},
									"response": []
								},
								{
									"name": "Apply product 100 to UA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "61be4d64-20bc-4178-a46b-ca7a392cc62b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"product\": \"{{baseEntityPrefix}}_PRODUCT100\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"operationDate\": \"2016-04-06\",\r\n    \"quantity\": \"1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Apply-OneShotChargeInstance_Description_UA\",\r\n    \"amountWithoutTax\": \"11\",\r\n    \"amountWithTax\": \"13\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n                \"doubleValue\": \"101.1\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/applyProduct",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"applyProduct"
											]
										}
									},
									"response": []
								},
								{
									"name": "Apply product 100 to SUB_2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e2ae14b-b1cb-4079-bd6c-229efbc528b4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"product\": \"{{baseEntityPrefix}}_PRODUCT100\",\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_PROD\",\r\n    \"operationDate\": \"2016-04-06\",\r\n    \"quantity\": \"1\",\r\n    \"description\": \"{{baseEntityPrefix}}_Apply-OneShotChargeInstance_Description_SUB\",\r\n    \"amountWithoutTax\": \"11\",\r\n    \"amountWithTax\": \"13\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n                \"doubleValue\": \"101.2\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/applyProduct",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"applyProduct"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT Product 100",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a7ce3c0b-7114-46e5-a6c5-08d4f3239bf2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/customFieldTemplate/{{entityPrefix}}_{{index}}_CF_PROD_PRICE100/ProductInstance",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"customFieldTemplate",
												"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100",
												"ProductInstance"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT Product 101",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1305a197-3791-40df-ad1c-743bdf15308f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/customFieldTemplate/{{entityPrefix}}_{{index}}_CF_PROD_PRICE101/ProductInstance",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"customFieldTemplate",
												"{{entityPrefix}}_{{index}}_CF_PROD_PRICE101",
												"ProductInstance"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b9e6b85-a640-4bf2-aed8-90a45fb95de5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var body = ",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_PROD\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"CREATED\");",
													"    pm.expect(jsonData.subscription.productInstance[0].code).to.eql(pm.environment.get(\"baseEntityPrefix\")+\"_PRODUCT2\");",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_PROD",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_PROD"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Update service instance",
							"item": [
								{
									"name": "Create CFT ServiceInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dbdb0ec6-0b29-4fee-a47f-c6586afbd4ed",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\r\n    \"fieldType\": \"DOUBLE\",\r\n    \"appliesTo\": \"ServiceInstance\",\r\n    \"storageType\": \"SINGLE\",\r\n    \"defaultValue\": \"101\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f2699885-998b-4951-a1db-799b5d493279",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2017-03-15\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b09e65aa-029b-43d7-9bd9-057826dc23ab",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2017-03-15\"\r\n            },\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\r\n                \"quantity\": \"2\",\r\n                \"subscriptionDate\": \"2017-03-15\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "842abd67-8b7e-48c0-887f-9b3fb4e862c5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_UPD_SERV_100\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_UPD_SERV_100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "59e2eb3f-c300-404b-88e9-0e84e0b8e5d6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\n    \"serviceToUpdate\": [\n        {\n            \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n            \"endAgreementDate\": \"2017-03-29\",\n            \"customFields\": {\n                \"customField\": [\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\n                        \"doubleValue\": \"201\"\n                    }\n                ]\n            }\n        },\n        {\n            \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\n            \"endAgreementDate\": \"2017-03-30\",\n            \"customFields\": {\n                \"customField\": [\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\n                        \"doubleValue\": \"202\"\n                    }\n                ]\n            }\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/updateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"updateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription-Updated",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f544ce50-e401-4a98-954c-edb778fbc046",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_UPD_SERV_100\");",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(jsonBody.services.serviceInstance[0].quantity);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].customFields).to.eql(jsonBody.services.serviceInstance[1].customFields);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(jsonBody.services.serviceInstance[1].quantity);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].customFields).to.eql(jsonBody.services.serviceInstance[1].customFields);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\n    \"services\": {\n        \"serviceInstance\": [\n            {\n                \"quantity\": 1,\n                \"customFields\": {\n                    \"customField\": [\n                        {\n                            \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\n                            \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\n                            \"fieldType\": \"DOUBLE\",\n                            \"doubleValue\": 201\n                        }\n                    ]\n                }\n            },\n            {\n                \"quantity\": 2,\n                \"customFields\": {\n                    \"customField\": [\n                        {\n                            \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\n                            \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\n                            \"fieldType\": \"DOUBLE\",\n                            \"doubleValue\": 202\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_UPD_SERV_100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update services - change quantity",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d91d4a52-d9e4-43aa-9613-40b1311f24fd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\n    \"serviceToUpdate\": [\n        {\n            \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n            \"quantity\": \"5\"\n        },\n        {\n            \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\n            \"quantity\": \"7\"\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/updateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"updateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription - Updated quantity",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "22fce390-fc49-49f0-a3ac-0d5989cde4a7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.subscription.code).to.eql(jsonBody.code);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[0].quantity).to.eql(jsonBody.services.serviceInstance[0].quantity);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].customFields).to.eql(jsonBody.services.serviceInstance[1].customFields);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].quantity).to.eql(jsonBody.services.serviceInstance[1].quantity);",
													"    pm.expect(jsonData.subscription.services.serviceInstance[1].customFields).to.eql(jsonBody.services.serviceInstance[1].customFields);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\n    \"services\": {\n        \"serviceInstance\": [\n            {\n                \"quantity\": 5,\n                \"customFields\": {\n                    \"customField\": [\n                        {\n                            \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\n                            \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\n                            \"fieldType\": \"DOUBLE\",\n                            \"doubleValue\": 201\n                        }\n                    ]\n                }\n            },\n            {\n                \"quantity\": 7,\n                \"customFields\": {\n                    \"customField\": [\n                        {\n                            \"code\": \"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100\",\n                            \"description\": \"{{entityPrefix}}_{{index}}_CF_PROD_PRICE100\",\n                            \"fieldType\": \"DOUBLE\",\n                            \"doubleValue\": 202\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_UPD_SERV_100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CFT ServiceInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "39fab35c-4f3f-4bbd-8d4c-bae744a3a230",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/customFieldTemplate/{{entityPrefix}}_{{index}}_CF_SERV_UPD_100/ServiceInstance",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"customFieldTemplate",
												"{{entityPrefix}}_{{index}}_CF_SERV_UPD_100",
												"ServiceInstance"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update services - future termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "00102d4b-f005-41ad-be79-f4d185b5f4cd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "9f941d23-5383-43c9-afb0-147c95584e35",
												"exec": [
													"var today = new Date();\r",
													"var terminationDate = new Date();\r",
													"terminationDate.setMonth(today.getMonth() + 5);\r",
													"\r",
													"\r",
													"pm.globals.set(\"testCase.terminationDate\", terminationDate.toISOString().slice(0, 10));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100\",\n    \"serviceToUpdate\": [\n        {\n            \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n            \"terminationDate\": \"{{testCase.terminationDate}}\",\n            \"terminationReason\": \"TERM_REASON_1\"\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/updateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"updateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find service instance - future termination",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f3555ded-8948-4f0c-9bdf-0207e46336fa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.serviceInstances[0].code).to.eql(jsonBody.serviceInstances[0].code);",
													"    pm.expect(jsonData.serviceInstances[0].quantity).to.eql(jsonBody.serviceInstances[0].quantity);",
													"    pm.expect(jsonData.serviceInstances[0].subscriptionDate).to.eql(jsonBody.serviceInstances[0].subscriptionDate);",
													"    pm.expect(jsonData.serviceInstances[0].terminationDate).to.eql(new Date(pm.globals.get(\"testCase.terminationDate\")).getTime());",
													"    pm.expect(jsonData.serviceInstances[0].serviceRenewal).to.eql(jsonBody.serviceInstances[0].serviceRenewal);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"actionStatus\": {\n        \"status\": \"SUCCESS\"\n    },\n    \"serviceInstances\": [\n        {\n            \"id\": 30,\n            \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n            \"description\": \"{{baseEntityPrefix}}_SERVICE1\",\n            \"subscriptionDate\": 1489536000000,\n            \"quantity\": 5,\n            \"serviceRenewal\": {\n                \"initialTermType\": \"FIXED\",\n                \"renewalTermType\": null,\n                \"initialyActiveFor\": null,\n                \"initialyActiveForUnit\": null,\n                \"calendarInitialyActiveFor\": null,\n                \"autoRenew\": false,\n                \"daysNotifyRenewal\": null,\n                \"endOfTermAction\": \"TERMINATE\",\n                \"terminationReasonCode\": \"TERM_REASON_1\",\n                \"renewFor\": null,\n                \"calendarRenewFor\": null,\n                \"renewForUnit\": null,\n                \"extendAgreementPeriodToSubscribedTillDate\": false\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/serviceInstances?subscriptionCode={{entityPrefix}}_{{index}}_SUB_UPD_SERV_100&serviceInstanceCode={{baseEntityPrefix}}_SERVICE1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"serviceInstances"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_UPD_SERV_100"
												},
												{
													"key": "serviceInstanceCode",
													"value": "{{baseEntityPrefix}}_SERVICE1"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Subscribe to disable offer",
							"item": [
								{
									"name": "Disable Offer3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2032254b-4253-44c9-a6f9-92bca3337628",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_OFFER3\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{baseEntityPrefix}}_OFFER3/disable",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{baseEntityPrefix}}_OFFER3",
												"disable"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a15020a-5821-4244-b37d-f17a162816e0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(500);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Cannot subscribe to disabled offer\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\r\n    \"subscriptionDate\": \"2015-02-01\",\r\n    \"endAgreementDate\": \"2015-05-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Enable Offer3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b44febb7-8b66-4139-90a5-84d41fc77d0c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_OFFER3\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{baseEntityPrefix}}_OFFER3/enable",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{baseEntityPrefix}}_OFFER3",
												"enable"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Due date delay",
							"item": [
								{
									"name": "Find due date delay - bc",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8c4a043a-d2d3-4adf-ab47-da7dbe29f808",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData).to.deep.equal(jsonBody);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"actionStatus\": {\r\n        \"status\": \"SUCCESS\"\r\n    },\r\n    \"dueDateDelay\": {\r\n        \"delayOrigin\": \"BC\",\r\n        \"computedDelay\": 2,\r\n        \"delayEL\": null\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/dueDateDelay?subscriptionCode={{baseEntityPrefix}}_SUB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"dueDateDelay"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{baseEntityPrefix}}_SUB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1cd25dd-f395-438d-bf14-37479ca0ab45",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"CA_DELAY_{{index}}\",\r\n    \"description\": \"CA_DELAY_{{index}}\",\r\n    \"customer\": \"{{baseEntityPrefix}}_CUST_3\",\r\n    \"currency\": \"USD\",\r\n    \"language\": \"ENG\",\r\n    \"creditCategory\": \"PRO\",\r\n    \"dueDateDelayEL\": \"#{ba.customerAccount.auditable.created.date}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create BA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d04cdc56-6186-457e-9415-20b9b3c4ce09",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"BA_DELAY_{{index}}\",\r\n    \"description\": \"BA_DELAY_{{index}}\",\r\n    \"customerAccount\": \"CA_DELAY_{{index}}\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"country\": \"US\",\r\n    \"language\": \"ENG\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create UA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "09915943-1f4e-4b8b-bb52-c61746fd0a20",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"UA_DELAY_{{index}}\",\r\n    \"description\": \"UA_DELAY_{{index}}\",\r\n    \"billingAccount\": \"BA_DELAY_{{index}}\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "344a493b-84de-4b55-8510-247bd5a29ada",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"DELAY_SUB_{{index}}\",\r\n    \"description\": \"DELAY_SUB_{{index}}\",\r\n    \"userAccount\": \"UA_DELAY_{{index}}\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\r\n    \"subscriptionDate\": \"2017-01-07\",\r\n    \"endAgreementDate\": \"2017-01-07\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find due date delay - ca",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "03ef0c42-3a8a-4ef5-9f9c-4822bf578405",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.dueDateDelay.delayOrigin).to.deep.equal(jsonBody.delayOrigin);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"delayOrigin\": \"CA\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/dueDateDelay?subscriptionCode=DELAY_SUB_{{index}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"dueDateDelay"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "DELAY_SUB_{{index}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1897d8d7-16b7-42d7-a0c1-51a877ac3f62",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"DELAY_SUB_{{index}}\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\",\r\n                \"quantity\": \"5\",\r\n                \"subscriptionDate\": \"2017-03-15\"\r\n            },\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE4\",\r\n                \"quantity\": \"10\",\r\n                \"subscriptionDate\": \"2017-05-15\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Subscription age",
							"item": [
								{
									"name": "Create recurring",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee005e7d-13af-488e-a465-0e7cb4ace4ea",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"description\": \"{{baseEntityPrefix}}_REC1\",\r\n    \"invoiceSubCategory\": \"SUB_DATA\",\r\n    \"disabled\": false,\r\n    \"amountEditable\": true,\r\n    \"languageDescriptions\": [\r\n        {\r\n            \"languageCode\": \"FRA\",\r\n            \"description\": \"{{baseEntityPrefix}}-Subscription Age\"\r\n        }\r\n    ],\r\n    \"calendar\": \"MONTHLY\",\r\n    \"subscriptionProrata\": true,\r\n    \"terminationProrata\": true,\r\n    \"applyInAdvance\": true,\r\n    \"inputUnitDescription\": \"1\",\r\n    \"ratingUnitDescription\": \"1\",\r\n    \"unitMultiplicator\": \"1\",\r\n    \"unitNbDecimal\": \"2\",\r\n    \"durationTermInMonth\": \"4\",\r\n    \"roundingModeDtoEnum\": \"NEAREST\",\r\n    \"taxClassCode\":\"{{baseEntityPrefix}}_taxClass\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Service",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c93397c9-4a1c-447b-ad22-920f89c67813",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_SERVICE_SUB_AGE\",\r\n    \"description\": \"{{baseEntityPrefix}}_SERVICE_SUB_AGE\",\r\n    \"invoicingCalendar\": \"MONTHLY\",\r\n    \"serviceChargeTemplateRecurrings\": {\r\n        \"serviceChargeTemplateRecurring\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_REC_SUB_AGE\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Offer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f57c62aa-389b-4e02-838f-289413b9b95c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_OFFER_SUB_AGE\",\r\n    \"description\": \"{{baseEntityPrefix}}_OFFER_SUB_AGE\",\r\n    \"name\": \"{{baseEntityPrefix}}_OFFER2\",\r\n    \"disabled\": false,\r\n    \"offerServiceTemplate\": [\r\n        {\r\n            \"serviceTemplate\": {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE_SUB_AGE\"\r\n            }\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate ",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate "
											]
										}
									},
									"response": []
								},
								{
									"name": "Create priceplan recurring 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2927a728-e11e-42b1-a378-71342c752f60",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_REC_SUB_AGE2\",\r\n    \"description\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"eventCode\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"amountWithoutTax\": \"5\",\r\n    \"amountWithTax\": \"10\",\r\n    \"priority\": \"1\",\r\n    \"minSubscriptionAgeInMonth\": \"5\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create priceplan recurring 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f3272d37-46bb-4729-8101-094d71b581da",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_REC_SUB_AGE2\",\r\n    \"description\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"eventCode\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"amountWithoutTax\": \"15\",\r\n    \"amountWithTax\": \"30\",\r\n    \"priority\": \"1\",\r\n    \"maxSubscriptionAgeInMonth\": \"3\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create priceplan recurring",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "969d89ef-55c3-4d9c-b6c3-9af08880f413",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_REC_SUB_AGE1\",\r\n    \"description\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"eventCode\": \"{{baseEntityPrefix}}_REC_SUB_AGE\",\r\n    \"amountWithoutTax\": \"2\",\r\n    \"amountWithTax\": \"4\",\r\n    \"priority\": \"2\",\r\n    \"minSubscriptionAgeInMonth\": \"1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/pricePlan/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"pricePlan",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b1ac0dcc-36e6-4060-9ef1-191060df75cb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_AGE\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER_SUB_AGE\",\r\n    \"subscriptionDate\": \"2017-03-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b01b38ec-6510-4933-9e76-ddcac00a57dc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_AGE\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE_SUB_AGE\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2017-05-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate subscription 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a6f482fe-7d04-475c-aedf-330ef84b1dd7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_AGE\",\n    \"terminationReason\": \"TERM_REASON_1\",\n    \"terminationDate\": \"2017-12-01\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b31c5c38-95a7-4605-9c1b-1522d6e0e4b1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_AGE2\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER_SUB_AGE\",\r\n    \"subscriptionDate\": \"2017-07-01\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8d39afb5-6a6a-42bc-83be-a12c546fc0af",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_AGE2\",\r\n    \"servicesToActivate\": {\r\n        \"service\": [\r\n            {\r\n                \"code\": \"{{baseEntityPrefix}}_SERVICE_SUB_AGE\",\r\n                \"quantity\": \"1\",\r\n                \"subscriptionDate\": \"2017-07-01\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Terminate subscription 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b90ea769-01ac-46e1-96eb-00b434a86626",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscriptionCode\": \"{{entityPrefix}}_{{index}}_SUB_AGE2\",\n    \"terminationReason\": \"TERM_REASON_1\",\n    \"terminationDate\": \"2017-09-01\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Activate Subscription",
							"item": [
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c65bc773-f24f-4e7e-9ada-f0236ffd5403",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_ACTIVATION\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_ACTIVATION\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2018-10-13\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instanticate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eadf3b19-db6a-4dfb-b437-830dc0873e8d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_ACTIVATION\",\n    \"servicesToInstantiate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2018-10-13\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf6cf30c-0803-400e-8f80-efc9cc525b04",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_ACTIVATION2\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_ACTIVATION2\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2018-10-13\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instanticate services 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ff38f2d3-8d14-420f-bd48-eea3ba8fb230",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_ACTIVATION2\",\n    \"servicesToInstantiate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2018-10-13\"\n            },\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE2\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2018-10-13\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "df444b11-f820-47e3-8207-cc89d41914d8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{entityPrefix}}_{{index}}_SUB_ACTIVATION",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate subscription 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dc2ab089-fc2a-45b0-be11-956cacae0b18",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{entityPrefix}}_{{index}}_SUB_ACTIVATION2",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Subscription status notification",
							"item": [
								{
									"name": "Create script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7fa4cfc1-7a0d-4008-85c3-6e1164be921f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"org.meveo.service.script.SubscriptionStatusUpdatedScript\",\r\n    \"description\": \"rating script\",\r\n    \"type\": \"JAVA\",\r\n    \"script\": \"package org.meveo.service.script;\\n\\nimport org.meveo.admin.exception.BusinessException;\\nimport org.meveo.model.billing.Subscription;\\nimport org.meveo.model.billing.SubscriptionStatusEnum;\\nimport org.meveo.service.billing.impl.SubscriptionService;\\nimport org.meveo.service.script.Script;\\n\\nimport java.util.Map;\\n\\npublic class SubscriptionStatusUpdatedScript extends Script {\\n\\n    private SubscriptionService subscriptionService = (SubscriptionService) getServiceInterface(\\\"SubscriptionService\\\");\\n\\n    @Override\\n    public void execute(Map<String, Object> methodContext) throws BusinessException {\\n        log.info(\\\"<<<<<<< SubscriptionStatusUpdatedScript >>>>>>>>>>\\\");\\n        Subscription subscription = (Subscription) methodContext.get(\\\"subscription\\\");\\n        SubscriptionStatusEnum previousState = (SubscriptionStatusEnum) methodContext.get(\\\"previousState\\\");\\n        SubscriptionStatusEnum currentState = (SubscriptionStatusEnum) methodContext.get(\\\"currentState\\\");\\n        log.info(\\\"subscription.getCode() : \\\" + subscription.getCode());\\n        log.info(\\\"currentState : \\\" + currentState.name());\\n        log.info(\\\"previousState : \\\" + previousState.name());\\n        subscription.setDescription(\\\"from_\\\" + previousState + \\\"_to_\\\" + currentState);\\n        subscriptionService.update(subscription);\\n    }\\n} \"\r\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create notifications",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "46d57d6f-8058-475b-aa50-339fd58ea0d3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SubscriptionStatusUpdatedNotification\",\r\n    \"classNameFilter\": \"org.meveo.model.billing.Subscription\",\r\n    \"eventTypeFilter\": \"STATUS_UPDATED\",\r\n    \"scriptInstanceCode\": \"org.meveo.service.script.SubscriptionStatusUpdatedScript\",\r\n    \"scriptParams\": {\r\n        \"subscription\": \"#{event.entity}\",\r\n        \"previousState\": \"#{event.previousState}\",\r\n        \"currentState\": \"#{event.currentState}\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "91df1c82-40a9-41fd-b1d0-8f48ae040730",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION\",\r\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\r\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\r\n    \"subscriptionDate\": \"2018-10-13\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Instanticate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2defa6de-4916-4236-bd6a-a377f3c0bc42",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION\",\n    \"servicesToInstantiate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2018-10-13\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/instantiateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"instantiateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc875c89-1ec6-4e86-99d9-d23e50d32abd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4b0c9c0e-be36-49aa-8a2f-9afa0100e713",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.subscription.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.subscription.description).to.deep.equal(jsonBody.description);",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION\",\n    \"description\": \"from_CREATED_to_ACTIVE\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_STATUS_NOTIFICATION"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove Notification",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e5158385-194f-48b0-9ae5-c4edd6c5f57b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/notification/{{entityPrefix}}_{{index}}_SubscriptionStatusUpdatedNotification",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"notification",
												"{{entityPrefix}}_{{index}}_SubscriptionStatusUpdatedNotification"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "04a8e50b-0f66-4314-bc40-f279ea1f4fcf",
								"type": "text/javascript",
								"exec": [
									"var today = new Date();",
									"var terminationDate = new Date();",
									"var days20before = new Date();",
									"var days10before = new Date();",
									"var days5before = new Date();",
									"var days3before = new Date();",
									"var days2before = new Date();",
									"terminationDate.setDate(today.getDate() + 1);",
									"days20before.setDate(today.getDate() - 20);",
									"days10before.setDate(today.getDate() - 10);",
									"days5before.setDate(today.getDate() - 5);",
									"days3before.setDate(today.getDate() - 3);",
									"days2before.setDate(today.getDate() - 2);",
									"",
									"pm.globals.set(\"index\", 194);",
									"pm.globals.set(\"today\", today.toISOString().slice(0, 10));",
									"pm.globals.set(\"terminationDate\", terminationDate.toISOString().slice(0, 10));",
									"pm.globals.set(\"20daysBefore\", days20before.toISOString().slice(0, 10));",
									"pm.globals.set(\"10daysBefore\", days10before.toISOString().slice(0, 10));",
									"pm.globals.set(\"5daysBefore\", days5before.toISOString().slice(0, 10));",
									"pm.globals.set(\"3daysBefore\", days3before.toISOString().slice(0, 10));",
									"pm.globals.set(\"2daysBefore\", days2before.toISOString().slice(0, 10));"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "c81c100b-fc1d-4f55-9275-016e00b9327e",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Subscription with Inherited CF",
					"item": [
						{
							"name": "Tests",
							"item": [
								{
									"name": "Create CFT for User Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4328f4bc-1a1a-4df8-b627-8ae9e5814228",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_UA_CF_INHERITED\",\n    \"description\": \"{{entityPrefix}}_UA_CF_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"UserAccount\",\n    \"storageType\": \"SINGLE\",\n    \"defaultValue\": \"userAccountCF\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CFT for Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f0810602-523b-41cc-917b-55e9b860c565",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_SUB_CF_INHERITED\",\n    \"description\": \"{{entityPrefix}}_SUB_CF_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"Subscription\",\n    \"storageType\": \"SINGLE\",\n    \"defaultValue\": \"subscriptionCF\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CFT for Subscription - Not Inherited",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "49586d14-a405-49bc-b050-609973672c3d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_SUB_CF_NOT_INHERITED\",\n    \"description\": \"{{entityPrefix}}_SUB_CF_NOT_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"Subscription\",\n    \"storageType\": \"SINGLE\",\n    \"defaultValue\": \"subscriptionCFNotInherited\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User Account 3 - Temp",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76cb04ec-4398-410e-8dc6-9a0bc57e81f3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_UA_3_InheritedCF\",\n    \"description\": \"{{entityPrefix}}_{{index}}_UA_3_InheritedCF\",\n    \"billingAccount\": \"{{baseEntityPrefix}}_BA_3\",\n    \"externalRef1\": \"EXTREF1\",\n    \"externalRef2\": \"EXTREF2\",\n    \"name\": {\n        \"title\": \"MR\",\n        \"firstName\": \"Edward\",\n        \"lastName\": \"Legaspi\"\n    },\n    \"address\": {\n        \"address1\": \"adress1\",\n        \"address3\": \"adress3\",\n        \"zipCode\": \"21000\",\n        \"city\": \"Dijon\",\n        \"country\": \"France\"\n    },\n    \"subscriptionDate\": \"2016-03-10\",\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"{{entityPrefix}}_UA_CF_INHERITED\",\n                \"stringValue\": \"UA_INHERITED\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0c8701e8-2301-4ee4-90a0-cca1a232eece",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_InheritedCF\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_InheritedCF\",\n    \"userAccount\": \"{{entityPrefix}}_{{index}}_UA_3_InheritedCF\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\n    \"subscriptionDate\": \"2015-02-01\",\n    \"endAgreementDate\": \"2015-05-01\",\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"{{entityPrefix}}_SUB_CF_INHERITED\",\n                \"stringValue\": \"SUB_INHERITED\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "369b0015-f733-466c-ad27-132154b7cbb8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.subscription.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SUB_InheritedCF\");",
													"    pm.expect(jsonData.subscription.status).to.eql(\"CREATED\");",
													"    pm.expect(jsonData.subscription.userAccount).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_UA_3_InheritedCF\");",
													"    pm.expect(jsonData.subscription.subscriptionDate).to.eql(1422748800000);",
													"    pm.expect(jsonData.subscription.endAgreementDate).to.eql(1430438400000);",
													"    pm.expect(jsonData.subscription.customFields.customField[0].code).to.eql(pm.environment.get(\"entityPrefix\") + \"_SUB_CF_NOT_INHERITED\");",
													"    pm.expect(jsonData.subscription.customFields.customField[0].description).to.eql(pm.environment.get(\"entityPrefix\") + \"_SUB_CF_NOT_INHERITED\");",
													"    pm.expect(jsonData.subscription.customFields.customField[0].fieldType).to.eql(\"STRING\");",
													"    pm.expect(jsonData.subscription.customFields.customField[0].stringValue).to.eql(\"subscriptionCFNotInherited\");",
													"    pm.expect(jsonData.subscription.customFields.customField[1].code).to.eql(pm.environment.get(\"entityPrefix\") + \"_SUB_CF_INHERITED\");",
													"    pm.expect(jsonData.subscription.customFields.customField[1].description).to.eql(pm.environment.get(\"entityPrefix\") + \"_SUB_CF_INHERITED\");",
													"    pm.expect(jsonData.subscription.customFields.customField[1].fieldType).to.eql(\"STRING\");",
													"    pm.expect(jsonData.subscription.customFields.customField[1].stringValue).to.eql(\"SUB_INHERITED\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_InheritedCF\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB_InheritedCF\",\n    \"userAccount\": \"{{entityPrefix}}_{{index}}_UA_3_InheritedCF\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"{{entityPrefix}}_SUB_CF_NOT_INHERITED\",\n                \"description\": \"{{entityPrefix}}_SUB_CF_NOT_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"stringValue\": \"subscriptionCFNotInherited\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_SUB_CF_INHERITED\",\n                \"description\": \"{{entityPrefix}}_SUB_CF_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"stringValue\": \"SUB_INHERITED\"\n            }\n        ],\n        \"inheritedCustomField\": [\n            {\n                \"code\": \"{{entityPrefix}}_UA_CF_INHERITED\",\n                \"description\": \"{{entityPrefix}}_UA_CF_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"stringValue\": \"UA_INHERITED\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_SUB_InheritedCF",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_SUB_InheritedCF"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT UA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9139ca1-6b73-49f2-ad7b-0afa7fe120ed",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_UA_CF_INHERITED/UserAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"{{entityPrefix}}_UA_CF_INHERITED",
												"UserAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT SUB",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "83a9de08-ab07-40ab-8689-d4a083c8b68f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_SUB_CF_INHERITED/Subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"{{entityPrefix}}_SUB_CF_INHERITED",
												"Subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT SUB 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "87ba10ef-729c-408c-a20b-ffedc4824877",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_SUB_CF_NOT_INHERITED/Subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"{{entityPrefix}}_SUB_CF_NOT_INHERITED",
												"Subscription"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Inherited CF in Account",
							"item": [
								{
									"name": "Create CFT for CUST",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f0ad1fdc-e925-49f7-bc21-e00d7f72efb0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n    \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"Customer\",\n    \"storageType\": \"MATRIX\",\n    \"defaultValue\": \"INHERITED_CF\",\n    \"mapKeyType\": \"STRING\",\n    \"matrixColumn\": [\n        {\n            \"code\": \"MAT_1\",\n            \"position\": \"1\",\n            \"label\": \"One\",\n            \"keyType\": \"STRING\"\n        },\n        {\n            \"code\": \"MAT_2\",\n            \"position\": \"2\",\n            \"label\": \"Two\",\n            \"keyType\": \"RON\"\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CFT for BA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7ca28ca6-cab5-4110-a89d-7f3a2f503d1f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n    \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"BillingAccount\",\n    \"storageType\": \"MATRIX\",\n    \"defaultValue\": \"INHERITED_CF\",\n    \"mapKeyType\": \"STRING\",\n    \"matrixColumn\": [\n        {\n            \"code\": \"MAT_1\",\n            \"position\": \"1\",\n            \"label\": \"One\",\n            \"keyType\": \"STRING\"\n        },\n        {\n            \"code\": \"MAT_2\",\n            \"position\": \"2\",\n            \"label\": \"Two\",\n            \"keyType\": \"RON\"\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CFT for CA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7dc13571-e502-4209-a8b1-d24226cbeea4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n    \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"CustomerAccount\",\n    \"storageType\": \"MATRIX\",\n    \"defaultValue\": \"INHERITED_CF\",\n    \"mapKeyType\": \"STRING\",\n    \"matrixColumn\": [\n        {\n            \"code\": \"MAT_1\",\n            \"position\": \"1\",\n            \"label\": \"One\",\n            \"keyType\": \"STRING\"\n        },\n        {\n            \"code\": \"MAT_2\",\n            \"position\": \"2\",\n            \"label\": \"Two\",\n            \"keyType\": \"RON\"\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CFT for UA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d493b593-ff1c-446c-b18d-3f8493d800bf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n    \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"UserAccount\",\n    \"storageType\": \"MATRIX\",\n    \"defaultValue\": \"INHERITED_CF\",\n    \"mapKeyType\": \"STRING\",\n    \"matrixColumn\": [\n        {\n            \"code\": \"MAT_1\",\n            \"position\": \"1\",\n            \"label\": \"One\",\n            \"keyType\": \"STRING\"\n        },\n        {\n            \"code\": \"MAT_2\",\n            \"position\": \"2\",\n            \"label\": \"Two\",\n            \"keyType\": \"RON\"\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create AccountHierarchy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "01e1b39a-4ad8-45c1-9ff9-bade32fa374a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{entityPrefix}}_432@manaty.net\",\n    \"paymentMethod\": \"2\",\n    \"customerId\": \"{{entityPrefix}}_{{index}}_CUST1\",\n    \"sellerCode\": \"SELLER_FR\",\n    \"customerBrandCode\": \"DEFAULT\",\n    \"customerCategoryCode\": \"CLIENT\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"billingCycleCode\": \"CYC_INV_MT_1\",\n    \"titleCode\": \"MR\",\n    \"firstName\": \"firstName\",\n    \"lastName\": \"lastName\",\n    \"phoneNumber\": \"+102354749\",\n    \"address1\": \"Address1\",\n    \"address2\": \"Address2\",\n    \"zipCode\": \"75001\",\n    \"city\": \"Tunis\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1b2344bf-76b3-4862-9e5e-370f7b50775c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\n    \"customerCategory\": \"CLIENT\",\n    \"seller\": \"SELLER_FR\",\n    \"customerBrand\": \"DEFAULT\",\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n                \"mapValue\": {\n                    \"MAT_1\": {\n                        \"value\": \"ValueC1\"\n                    },\n                    \"MAT_2\": {\n                        \"value\": \"ValueC2\"\n                    }\n                }\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create customer account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9193fc17-bc24-4ca8-ae3f-c308a1ed59c6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\n    \"customer\": \"{{entityPrefix}}_{{index}}_CUST1\",\n    \"currency\": \"EUR\",\n    \"language\": \"FRA\",\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n                \"mapValue\": {\n                    \"MAT_1\": {\n                        \"value\": \"ValueCA1\"\n                    },\n                    \"MAT_2\": {\n                        \"value\": \"ValueCA2\"\n                    }\n                }\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create billing account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "606e88ad-81b2-42d5-9586-66ad7c034b23",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BA\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"customerAccount\": \"{{entityPrefix}}_{{index}}_CUST1\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"country\": \"FR\",\r\n    \"language\": \"FRA\",\r\n    \"nextInvoiceDate\": \"2016-04-01\",\r\n    \"subscriptionDate\": \"2016-01-01\",\r\n    \"electronicBilling\": true,\r\n    \"status\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}@manaty.net\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\r\n                \"mapValue\": {\r\n                    \"MAT_1\": {\r\n                        \"value\": \"ValueBA1\"\r\n                    },\r\n                    \"MAT_2\": {\r\n                        \"value\": \"ValueBA2\"\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create user account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a4dedf58-3940-4af9-ace9-57f43f166fee",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_UA\",\r\n    \"billingAccount\": \"{{entityPrefix}}_{{index}}_CUST1\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"address1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"address3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"subscriptionDate\": \"2016-03-10\",\r\n    \"status\": \"ACTIVE\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\r\n                \"mapValue\": {\r\n                    \"MAT_1\": {\r\n                        \"value\": \"ValueUA1\"\r\n                    },\r\n                    \"MAT_2\": {\r\n                        \"value\": \"ValueUA2\"\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find customer account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "43c6b57b-dad6-4dd8-9f1d-5a3e525ca29f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.customerAccount.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_CUST1\");",
													"    pm.expect(jsonData.customerAccount.customFields.customField[0].code).to.eql(pm.environment.get(\"entityPrefix\") + \"_ACCOUNT_CF_INHERITED\");",
													"    pm.expect(jsonData.customerAccount.customFields.customField[0].description).to.eql(pm.environment.get(\"entityPrefix\") + \"_SUB_UA_CF_INHERITED\");",
													"    pm.expect(jsonData.customerAccount.customFields.customField[0].fieldType).to.eql(\"STRING\");",
													"    pm.expect(jsonData.customerAccount.customFields.customField[0].mapValue.MAT_1.value).to.eql(\"ValueCA1\");",
													"    pm.expect(jsonData.customerAccount.customFields.customField[0].mapValue.MAT_2.value).to.eql(\"ValueCA2\");",
													"    pm.expect(jsonData.customerAccount.customFields.customField[0].mapValue.key.value).to.eql(\"MAT_1/MAT_2\");",
													"",
													"    ",
													"    pm.expect(jsonData.customerAccount.customFields.inheritedCustomField[0].code).to.eql(pm.environment.get(\"entityPrefix\") + \"_ACCOUNT_CF_INHERITED\");",
													"    pm.expect(jsonData.customerAccount.customFields.inheritedCustomField[0].description).to.eql(pm.environment.get(\"entityPrefix\") + \"_SUB_UA_CF_INHERITED\");",
													"    pm.expect(jsonData.customerAccount.customFields.inheritedCustomField[0].fieldType).to.eql(\"STRING\");",
													"    pm.expect(jsonData.customerAccount.customFields.inheritedCustomField[0].mapValue.MAT_1.value).to.eql(\"ValueC1\");",
													"    pm.expect(jsonData.customerAccount.customFields.inheritedCustomField[0].mapValue.MAT_2.value).to.eql(\"ValueC2\");",
													"    pm.expect(jsonData.customerAccount.customFields.inheritedCustomField[0].mapValue.key.value).to.eql(\"MAT_1/MAT_2\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\r\n    \"customFields\": {\r\n        \"customField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\r\n                \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\r\n                \"fieldType\": \"STRING\",\r\n                \"mapValue\": {\r\n                    \"MAT_1\": {\r\n                        \"value\": \"ValueCA1\"\r\n                    },\r\n                    \"MAT_2\": {\r\n                        \"value\": \"ValueCA2\"\r\n                    },\r\n                    \"key\": {\r\n                        \"value\": \"MAT_1/MAT_2\"\r\n                    }\r\n                }\r\n            }\r\n        ],\r\n        \"inheritedCustomField\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\r\n                \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\r\n                \"fieldType\": \"STRING\",\r\n                \"mapValue\": {\r\n                    \"MAT_1\": {\r\n                        \"value\": \"ValueC1\"\r\n                    },\r\n                    \"MAT_2\": {\r\n                        \"value\": \"ValueC2\"\r\n                    },\r\n                    \"key\": {\r\n                        \"value\": \"MAT_1/MAT_2\"\r\n                    }\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CUST1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CUST1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find billing account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fcc8d066-e28f-40da-a48f-e94f0eb2a969",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.billingAccount.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_CUST1\");",
													"    pm.expect(jsonData.billingAccount.description).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_BA\");",
													"    pm.expect(jsonData.billingAccount.customFields.customField[0].code).to.eql(pm.environment.get(\"entityPrefix\") + \"_ACCOUNT_CF_INHERITED\");",
													"    pm.expect(jsonData.billingAccount.customFields.customField[0].description).to.eql(pm.environment.get(\"entityPrefix\") + \"_SUB_UA_CF_INHERITED\");",
													"    pm.expect(jsonData.billingAccount.customFields.customField[0].fieldType).to.eql(\"STRING\");",
													"    pm.expect(jsonData.billingAccount.customFields.customField[0].mapValue.MAT_1.value).to.eql(\"ValueBA1\");",
													"    pm.expect(jsonData.billingAccount.customFields.customField[0].mapValue.MAT_2.value).to.eql(\"ValueBA2\");",
													"    pm.expect(jsonData.billingAccount.customFields.customField[0].mapValue.key.value).to.eql(\"MAT_1/MAT_2\");",
													"",
													"    ",
													"    pm.expect(jsonData.billingAccount.customFields.inheritedCustomField[0].code).to.eql(pm.environment.get(\"entityPrefix\") + \"_ACCOUNT_CF_INHERITED\");",
													"    pm.expect(jsonData.billingAccount.customFields.inheritedCustomField[0].description).to.eql(pm.environment.get(\"entityPrefix\") + \"_SUB_UA_CF_INHERITED\");",
													"    pm.expect(jsonData.billingAccount.customFields.inheritedCustomField[0].fieldType).to.eql(\"STRING\");",
													"    pm.expect(jsonData.billingAccount.customFields.inheritedCustomField[0].mapValue.MAT_1.value).to.eql(\"ValueCA1\");",
													"    pm.expect(jsonData.billingAccount.customFields.inheritedCustomField[0].mapValue.MAT_2.value).to.eql(\"ValueCA2\");",
													"    pm.expect(jsonData.billingAccount.customFields.inheritedCustomField[0].mapValue.key.value).to.eql(\"MAT_1/MAT_2\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_BA\",\n    \"customFields\": {\n        \"customField\": [\n            {\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n                \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"mapValue\": {\n                    \"MAT_1\": {\n                        \"value\": \"ValueBA1\"\n                    },\n                    \"MAT_2\": {\n                        \"value\": \"ValueBA2\"\n                    },\n                    \"key\": {\n                        \"value\": \"MAT_1/MAT_2\"\n                    }\n                }\n            }\n        ],\n        \"inheritedCustomField\": [\n            {\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n                \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"mapValue\": {\n                    \"MAT_1\": {\n                        \"value\": \"ValueCA1\"\n                    },\n                    \"MAT_2\": {\n                        \"value\": \"ValueCA2\"\n                    },\n                    \"key\": {\n                        \"value\": \"MAT_1/MAT_2\"\n                    }\n                }\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_CUST1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CUST1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find user account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a6408e71-ce1e-468f-99f2-a0023c58ac58",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.userAccount.code).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_CUST1\");",
													"    pm.expect(jsonData.userAccount.description).to.eql(pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_UA\");",
													"    pm.expect(jsonData.userAccount.customFields.customField[0].code).to.eql(pm.environment.get(\"entityPrefix\") + \"_ACCOUNT_CF_INHERITED\");",
													"    pm.expect(jsonData.userAccount.customFields.customField[0].description).to.eql(pm.environment.get(\"entityPrefix\") + \"_SUB_UA_CF_INHERITED\");",
													"    pm.expect(jsonData.userAccount.customFields.customField[0].fieldType).to.eql(\"STRING\");",
													"    pm.expect(jsonData.userAccount.customFields.customField[0].mapValue.MAT_1.value).to.eql(\"ValueUA1\");",
													"    pm.expect(jsonData.userAccount.customFields.customField[0].mapValue.MAT_2.value).to.eql(\"ValueUA2\");",
													"    pm.expect(jsonData.userAccount.customFields.customField[0].mapValue.key.value).to.eql(\"MAT_1/MAT_2\");",
													"",
													"    ",
													"    pm.expect(jsonData.userAccount.customFields.inheritedCustomField[0].code).to.eql(pm.environment.get(\"entityPrefix\") + \"_ACCOUNT_CF_INHERITED\");",
													"    pm.expect(jsonData.userAccount.customFields.inheritedCustomField[0].description).to.eql(pm.environment.get(\"entityPrefix\") + \"_SUB_UA_CF_INHERITED\");",
													"    pm.expect(jsonData.userAccount.customFields.inheritedCustomField[0].fieldType).to.eql(\"STRING\");",
													"    pm.expect(jsonData.userAccount.customFields.inheritedCustomField[0].mapValue.MAT_1.value).to.eql(\"ValueBA1\");",
													"    pm.expect(jsonData.userAccount.customFields.inheritedCustomField[0].mapValue.MAT_2.value).to.eql(\"ValueBA2\");",
													"    pm.expect(jsonData.userAccount.customFields.inheritedCustomField[0].mapValue.key.value).to.eql(\"MAT_1/MAT_2\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUST1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_UA\",\n    \"customFields\": {\n        \"customField\": [\n            {\n            },\n            {\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n                \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"mapValue\": {\n                    \"MAT_1\": {\n                        \"value\": \"ValueUA1\"\n                    },\n                    \"MAT_2\": {\n                        \"value\": \"ValueUA2\"\n                    },\n                    \"key\": {\n                        \"value\": \"MAT_1/MAT_2\"\n                    }\n                }\n            }\n        ],\n        \"inheritedCustomField\": [\n            {\n                \"code\": \"{{entityPrefix}}_ACCOUNT_CF_INHERITED\",\n                \"description\": \"{{entityPrefix}}_SUB_UA_CF_INHERITED\",\n                \"fieldType\": \"STRING\",\n                \"mapValue\": {\n                    \"MAT_1\": {\n                        \"value\": \"ValueBA1\"\n                    },\n                    \"MAT_2\": {\n                        \"value\": \"ValueBA2\"\n                    },\n                    \"key\": {\n                        \"value\": \"MAT_1/MAT_2\"\n                    }\n                }\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_CUST1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CUST1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete User Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "58f759e2-a552-4ea4-8b23-49f995da5fa6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/{{entityPrefix}}_{{index}}_CUST1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"{{entityPrefix}}_{{index}}_CUST1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Billing Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d3a996af-228b-487d-aafa-74cc0a208c7e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/{{entityPrefix}}_{{index}}_CUST1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"{{entityPrefix}}_{{index}}_CUST1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete CustomerAccount",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9008ed54-662d-43a7-91fb-86ff3f539f56",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/{{entityPrefix}}_{{index}}_CUST1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"{{entityPrefix}}_{{index}}_CUST1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1e46aea-4002-4b45-9228-cc84960bb576",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/{{entityPrefix}}_{{index}}_CUST1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"{{entityPrefix}}_{{index}}_CUST1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT UA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ea94c715-3231-4172-9a2e-163615a096e1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_ACCOUNT_CF_INHERITED/UserAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"{{entityPrefix}}_ACCOUNT_CF_INHERITED",
												"UserAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT BA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1a6925fe-1167-4404-9ebf-ce5c39400f30",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_ACCOUNT_CF_INHERITED/BillingAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"{{entityPrefix}}_ACCOUNT_CF_INHERITED",
												"BillingAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT CA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02f65841-76e7-45d6-a6e8-81021ff4a3ab",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_ACCOUNT_CF_INHERITED/CustomerAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"{{entityPrefix}}_ACCOUNT_CF_INHERITED",
												"CustomerAccount"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT CUST",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9540b620-0438-4756-834f-865839462417",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/{{entityPrefix}}_ACCOUNT_CF_INHERITED/Customer",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"{{entityPrefix}}_ACCOUNT_CF_INHERITED",
												"Customer"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "c058dfbc-a612-4ad5-9baf-3896e299f63d",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 460);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dd27e1a2-c485-4c7f-8c79-3f5b512453c5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "EL expression tests",
					"item": [
						{
							"name": "Calling script from EL",
							"item": [
								{
									"name": "Create script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a755abf-14c0-4470-8652-ec7fe2edab67",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"org.meveo.service.script.The{{baseEntityPrefix}}_ScriptEL\",\n    \"type\": \"JAVA\",\n    \"script\": \"package org.meveo.service.script;           \\n            import java.util.Map;\\n            import java.math.BigDecimal;\\n            import org.meveo.admin.exception.BusinessException;\\n            import org.meveo.model.admin.User;\\n            import org.meveo.model.crm.Provider;\\n            import org.meveo.model.BusinessEntity;\\n            import org.slf4j.Logger;\\n            import org.slf4j.LoggerFactory;\\n            public class The{{baseEntityPrefix}}_ScriptEL extends Script {\\n                private static final Logger log = LoggerFactory.getLogger(The{{baseEntityPrefix}}_ScriptEL.class);\\n                public void execute(Map<String,Object> context) throws BusinessException{\\n                    log.debug(\\\"The{{baseEntityPrefix}}_ScriptEL called\\\");\\n                    context.put(Script.RESULT_VALUE, ((BusinessEntity)context.get(Script.CONTEXT_ENTITY)).getCode()!=null && ((BusinessEntity)context.get(Script.CONTEXT_ENTITY)).getCode().startsWith(\\\"EL_\\\"));                 \\n                }\\n            }\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CFT on Charge",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1940f420-d545-45e5-b7fb-7c62e14fde25",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_CFT_EL_SCRIPT\",\n    \"description\": \"Field visible on entities with code starting 'EL_'\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"ChargeTemplate\",\n    \"defaultValue\": \"KUKU\",\n    \"storageType\": \"SINGLE\",\n    \"valueRequired\": true,\n    \"applicableOnEl\": \"#{mv:executeScript(entity,'org.meveo.service.script.The{{baseEntityPrefix}}_ScriptEL', null, entity.auditable.creator)}\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Recuring Charge OK",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0c1ac588-7941-4d1f-b7be-f82c2846664d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_REC1\",\n    \"invoiceSubCategory\": \"SUB_DATA\",\n    \"calendar\": \"MONTHLY\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate ",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate "
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove CFT",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "01c5a76b-f656-4899-b6c6-3812a47ab4dd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customFieldTemplateCode\": \"{{baseEntityPrefix}}_CFT_EL_SCRIPT\",\n    \"appliesTo\": \"ChargeTemplate\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/{{baseEntityPrefix}}_CFT_EL_SCRIPT/ChargeTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"{{baseEntityPrefix}}_CFT_EL_SCRIPT",
												"ChargeTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove Script Instance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b06d566a-d0d0-4ff7-8c47-e98f3202e2f6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"removeScriptInstanceRequest\": \"org.meveo.service.script.The{{baseEntityPrefix}}_ScriptEL\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/org.meveo.service.script.The{{baseEntityPrefix}}_ScriptEL",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"org.meveo.service.script.The{{baseEntityPrefix}}_ScriptEL"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Charge filter expression",
							"item": [
								{
									"name": "Update recurring 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad6e9b6b-ba65-45d4-ae0d-5a83b4bc5695",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_REC3\",\n    \"description\": \"{{baseEntityPrefix}}_REC3\",\n    \"invoiceSubCategory\": \"SUB_DATA\",\n    \"disabled\": false,\n    \"amountEditable\": false,\n    \"languageDescriptions\": [\n        {\n            \"languageCode\": \"FRA\",\n            \"description\": \"{{baseEntityPrefix}}-Forfait Test\"\n        }\n    ],\n    \"calendar\": \"MONTHLY\",\n    \"subscriptionProrata\": true,\n    \"terminationProrata\": true,\n    \"applyInAdvance\": true,\n    \"inputUnitDescription\": \"1\",\n    \"ratingUnitDescription\": \"1\",\n    \"unitMultiplicator\": \"1\",\n    \"unitNbDecimal\": \"2\",\n    \"durationTermInMonth\": \"4\",\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"triggeredEdrs\": {\n        \"triggeredEdr\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_EDR1\"\n            }\n        ]\n    },\n    \"filterExpression\": false\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "71bd43d8-00df-4db6-951b-d9e0ac142168",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CHARGE_FILTER\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_2\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER2\",\n    \"subscriptionDate\": \"2018-01-01\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "26b3e303-a175-4ed3-a479-80bbebccfe9f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_CHARGE_FILTER\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\",\n                \"quantity\": \"2\",\n                \"subscriptionDate\": \"2018-01-01\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "16e108f7-bc61-458a-a17b-ae9c4b763ab8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CHARGE_FILTER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription?subscriptionCode={{entityPrefix}}_{{index}}_CHARGE_FILTER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											],
											"query": [
												{
													"key": "subscriptionCode",
													"value": "{{entityPrefix}}_{{index}}_CHARGE_FILTER"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update recurring 3 - restore",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec7c9a99-84fe-4c88-a42f-2b2bbcf0ac69",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_REC3\",\n    \"description\": \"{{baseEntityPrefix}}_REC3\",\n    \"invoiceSubCategory\": \"SUB_DATA\",\n    \"disabled\": false,\n    \"amountEditable\": false,\n    \"languageDescriptions\": [\n        {\n            \"languageCode\": \"FRA\",\n            \"description\": \"{{baseEntityPrefix}}-Forfait Test\"\n        }\n    ],\n    \"calendar\": \"MONTHLY\",\n    \"subscriptionProrata\": true,\n    \"terminationProrata\": true,\n    \"applyInAdvance\": true,\n    \"inputUnitDescription\": \"1\",\n    \"ratingUnitDescription\": \"1\",\n    \"unitMultiplicator\": \"1\",\n    \"unitNbDecimal\": \"2\",\n    \"durationTermInMonth\": \"4\",\n    \"roundingModeDtoEnum\": \"NEAREST\",\n    \"triggeredEdrs\": {\n        \"triggeredEdr\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_EDR1\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/recurringChargeTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"recurringChargeTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "InvoiceType - EL AO",
							"item": [
								{
									"name": "Create Service1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ed68a626-fd77-4602-b534-5087cc39ee6e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_EL_INV_SERVICE1\",\n    \"description\": \"{{entityPrefix}}_EL_INV_SERVICE1\",\n    \"serviceChargeTemplateUsages\": {\n        \"serviceChargeTemplateUsage\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_USAGE1\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/serviceTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"serviceTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Offer1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eeeccb31-f5f7-4108-8874-ff69c1cc6124",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_EL_INV_OFFER1\",\n    \"description\": \"{{entityPrefix}}_EL_INV_OFFER1\",\n    \"name\": \"{{baseEntityPrefix}}_EL_INV_OFFER1\",\n    \"disabled\": false,\n    \"offerServiceTemplate\": [\n        {\n            \"serviceTemplate\": {\n                \"code\": \"{{entityPrefix}}_EL_INV_SERVICE1\"\n            }\n        }\n    ],\n    \"lifeCycleStatus\": \"ACTIVE\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create InvoiceType - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "98dbf34c-cd46-405e-af6c-c11c2fa991c7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_InvTypeElAO\",\n    \"description\": \"{{entityPrefix}}_{{index}}_Description_Created\",\n    \"occTemplateCode\": \"INV_REB\",\n    \"occTemplateNegativeCode\": \"PAY_TIP\",\n    \"sequenceDto\": {\n        \"prefixEL\": \"Fact_\",\n        \"sequenceSize\": \"2\",\n        \"currentInvoiceNb\": \"1\"\n    },\n    \"sellerSequence\": {\n        \"SELLER_FR\": {\n            \"prefixEL\": \"SellFact_\",\n            \"sequenceSize\": \"9\",\n            \"currentInvoiceNb\": \"9\"\n        }\n    },\n    \"appliesTo\": [\n        \"COM\"\n    ],\n    \"matchingAuto\": false,\n    \"billingTemplateName\": \"BTN\",\n    \"billingTemplateNameEL\": \"DEMO_#{invoice.id}\",\n    \"occTemplateCodeEl\": \"#{invoice.invoiceNumber.startsWith(\\\"Fact_\\\")?\\\"INV_STD\\\":\\\"INV_REB\\\"}\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType/createOrUpdate ",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType",
												"createOrUpdate "
											]
										}
									},
									"response": []
								},
								{
									"name": "Create BillingCycle - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad36a65d-0747-4058-acd2-1641b10e9bfa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_BC_ElAO\",\n    \"description\": \"{{entityPrefix}}_{{index}}_BC_ElAO\",\n    \"dueDateDelay\": \"1\",\n    \"calendar\": \"MONTHLY\",\n    \"invoiceDateDelay\": \"1\",\n    \"invoiceTypeCode\": \"{{entityPrefix}}_{{index}}_InvTypeElAO\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create AccountHierarchy - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "372822f7-7319-4c95-92a3-8523ddc28dac",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"email\": \"{{entityPrefix}}_43@manaty.net\",\n    \"customerId\": \"{{entityPrefix}}_{{index}}_INV_CUST_ElAO\",\n    \"sellerCode\": \"SELLER_US\",\n    \"customerBrandCode\": \"DEFAULT\",\n    \"customerCategoryCode\": \"CLIENT\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"billingCycleCode\": \"{{entityPrefix}}_{{index}}_BC_ElAO\",\n    \"titleCode\": \"MR\",\n    \"firstName\": \"toto\",\n    \"lastName\": \"toc\",\n    \"phoneNumber\": \"+102354749\",\n    \"address1\": \"Address1\",\n    \"address2\": \"Address2\",\n    \"zipCode\": \"4050\",\n    \"city\": \"Los Banana\",\n    \"methodOfPayment\": [\n        {\n            \"paymentMethodType\": \"DIRECTDEBIT\",\n            \"bankCoordinates\": {\n                \"bankCode\": \"12456\",\n                \"branchCode\": \"23456\",\n                \"accountNumber\": \"34589324756\",\n                \"key\": \"45\",\n                \"iban\": \"1212\",\n                \"bic\": \"67789456\",\n                \"accountOwner\": \"Me and co\",\n                \"bankName\": \"Some bank\",\n                \"bankId\": \"78946\",\n                \"issuerNumber\": \"46789\",\n                \"issuerName\": \"Some issuer\",\n                \"ics\": \"5587\"\n            }\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create subscription - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "16a6a481-1516-41e5-a688-b0da2bcda4dc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_INV_SUB_ElAO\",\n    \"description\": \"{{entityPrefix}}_{{index}}_INV_SUB_ElAO\",\n    \"userAccount\": \"UA_{{entityPrefix}}_{{index}}_INV_CUST_ElAO\",\n    \"offerTemplate\": \"{{entityPrefix}}_EL_INV_OFFER1\",\n    \"subscriptionDate\": \"2050-10-13\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create access - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f67a5d6-6296-47bb-9d06-8537162230d2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_INV_SUB_ACCESS_ElAO\",\n    \"subscription\": \"{{entityPrefix}}_{{index}}_INV_SUB_ElAO\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/access/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"access",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate service - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1453dfca-7111-4c88-8f47-287b37ffdc22",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_INV_SUB_ElAO\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{entityPrefix}}_EL_INV_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2050-10-13\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Charge CDR - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "85a5276d-e599-44cd-bddb-e07ac3b56fd7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "2050-10-13T00:00:00.000Z;1;{{entityPrefix}}_{{index}}_INV_SUB_ACCESS_ElAO;USAGE",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/mediation/chargeCdr",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"mediation",
												"chargeCdr"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate invoice - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "699f00d5-8ef9-49b7-a493-876e9af3c5d7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"targetCode\": \"BA_{{entityPrefix}}_{{index}}_INV_CUST_ElAO\",\n    \"targetType\": \"BILLINGACCOUNT\",\n    \"invoicingDate\": \"2050-10-15\",\n    \"firstTransactionDate\": \"2050-10-01\",\n    \"lastTransactionDate\": \"2050-10-31\",\n    \"generatePDF\": false\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoice/generateInvoice",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoice",
												"generateInvoice"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create DDRequestLotOp - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9666d5a8-fc78-4224-bbca-304744e90e41",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"fromDueDate\": \"2050-01-01T00:00:00Z\",\n    \"toDueDate\": \"2051-01-01T00:00:00Z\",\n    \"ddrequestOp\": \"CREATE\",\n    \"status\": \"WAIT\",\n    \"ddRequestBuilderCode\": \"SEPA_STD\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "AO Job - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3ee09ca1-2e7b-49f8-ad90-fdee8f0987e0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"AO_Job\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								},
								{
									"name": "List Account operations - EL AO",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1225ea3e-c43d-40e2-b466-19c6630306fd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"actionStatus\": {\r\n        \"status\": \"SUCCESS\"\r\n    },\r\n    \"paging\": {\r\n        \"fullTextFilter\": null,\r\n        \"filters\": {\r\n            \"customerAccount.code\": \"CA_{{entityPrefix}}_{{index}}_INV_CUST_ElAO\"\r\n        },\r\n        \"fields\": null,\r\n        \"offset\": null,\r\n        \"limit\": null,\r\n        \"sortBy\": \"id\",\r\n        \"sortOrder\": \"DESCENDING\",\r\n        \"totalNumberOfRecords\": 2,\r\n        \"loadReferenceDepth\": 0\r\n    },\r\n    \"accountOperations\": {\r\n        \"accountOperation\": [\r\n            {\r\n                \"id\": 2,\r\n                \"dueDate\": 2549491200000,\r\n                \"type\": \"I\",\r\n                \"transactionDate\": 2549404800000,\r\n                \"transactionCategory\": \"DEBIT\",\r\n                \"reference\": \"Fact_03\",\r\n                \"accountCode\": \"411000000\",\r\n                \"accountingCode\": \"411000000\",\r\n                \"accountCodeClientSide\": \"445510000\",\r\n                \"amount\": 21.240000000000,\r\n                \"amountWithoutTax\": 18.000000000000,\r\n                \"taxAmount\": 3.240000000000,\r\n                \"matchingAmount\": 0E-12,\r\n                \"unMatchingAmount\": 21.240000000000,\r\n                \"matchingStatus\": \"O\",\r\n                \"code\": \"INV_STD\",\r\n                \"description\": \"Standard invoice sub-item\",\r\n                \"excludedFromDunning\": false,\r\n                \"orderNumber\": \"\",\r\n                \"paymentMethod\": \"DIRECTDEBIT\"\r\n            },\r\n            {\r\n                \"id\": 1,\r\n                \"dueDate\": 2549491200000,\r\n                \"type\": \"I\",\r\n                \"transactionDate\": 2549404800000,\r\n                \"transactionCategory\": \"DEBIT\",\r\n                \"reference\": \"Fact_02\",\r\n                \"accountCode\": \"411000000\",\r\n                \"accountingCode\": \"411000000\",\r\n                \"accountCodeClientSide\": \"445510000\",\r\n                \"amount\": 10.620000000000,\r\n                \"amountWithoutTax\": 9.000000000000,\r\n                \"taxAmount\": 1.620000000000,\r\n                \"matchingAmount\": 0E-12,\r\n                \"unMatchingAmount\": 10.620000000000,\r\n                \"matchingStatus\": \"O\",\r\n                \"code\": \"INV_STD\",\r\n                \"description\": \"Standard invoice sub-item\",\r\n                \"excludedFromDunning\": false,\r\n                \"orderNumber\": \"\",\r\n                \"paymentMethod\": \"DIRECTDEBIT\"\r\n            }\r\n        ]\r\n    }\r\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/accountOperation/list?customerAccountCode=CA_{{entityPrefix}}_{{index}}_INV_CUST_ElAO",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"accountOperation",
												"list"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "CA_{{entityPrefix}}_{{index}}_INV_CUST_ElAO"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "05e9066a-8f9a-4a95-9cbd-2bfef2f43b7a",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 73);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "43f9c4fd-31cd-4b1b-80aa-55b3817c43d5",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Entity Customization",
					"item": [
						{
							"name": "Reference Entity",
							"item": [
								{
									"name": "Create CFT with reference entity",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b87812b2-9845-4c00-93f1-b04059b4676a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RCF100\",\n    \"description\": \"{{entityPrefix}}_{{index}}_RCF100\",\n    \"fieldType\": \"ENTITY\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"entityClazz\": \"org.meveo.model.crm.Customer\",\n    \"storageType\": \"SINGLE\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Get reference entities - no wildcard",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2690b47a-8a1b-4c25-9b2a-b625033d3ac4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RCF100\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/listBusinessEntityForCFVByCode/?code={{entityPrefix}}_{{index}}_RCF100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"listBusinessEntityForCFVByCode",
												""
											],
											"query": [
												{
													"key": "code",
													"value": "{{entityPrefix}}_{{index}}_RCF100"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Get reference entities - with wildcard",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e4baf64-1aee-4c54-bdab-7e340fc80648",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RCF100\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/listBusinessEntityForCFVByCode/?code={{entityPrefix}}_{{index}}_RCF100&wildcode=2",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"listBusinessEntityForCFVByCode",
												""
											],
											"query": [
												{
													"key": "code",
													"value": "{{entityPrefix}}_{{index}}_RCF100"
												},
												{
													"key": "wildcode",
													"value": "2"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "List per entity instance - el evaluated",
							"item": [
								{
									"name": "Create CFT Offer visible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9912db2b-db57-4954-9d65-dd828a94ed52",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CF_VISIBLE_100\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CF_VISIBLE_100\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"storageType\": \"SINGLE\",\n    \"defaultValue\": \"VISIBLE\",\n    \"applicableOnEl\": \"#{entity.code.equals('{{baseEntityPrefix}}_OFFER1')}\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CFT Offer hidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e52d839f-4395-454b-a254-1f66afe93568",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CF_HIDDEN_100\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CF_HIDDEN_100\",\n    \"fieldType\": \"STRING\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"storageType\": \"SINGLE\",\n    \"defaultValue\": \"HIDDEN\",\n    \"applicableOnEl\": \"#{!entity.code.equals('{{baseEntityPrefix}}_OFFER1')}\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/field/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"field",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Query visible CFT",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bc506a54-1063-4721-9e16-ed65d43436bc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.entityCustomization.field[0].code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.entityCustomization.field[0].description).to.deep.equal(jsonBody.description);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\":\"{{entityPrefix}}_{{index}}_CF_VISIBLE_100\",\n    \"description\":\"{{entityPrefix}}_{{index}}_CF_VISIBLE_100\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/entity/listELFiltered?appliesTo=OfferTemplate&entityCode={{baseEntityPrefix}}_OFFER1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"entity",
												"listELFiltered"
											],
											"query": [
												{
													"key": "appliesTo",
													"value": "OfferTemplate"
												},
												{
													"key": "entityCode",
													"value": "{{baseEntityPrefix}}_OFFER1"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "List entity action",
							"item": [
								{
									"name": "Create script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e0ded6fa-7e12-4efe-934e-bb36000d9fff",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"executeAction\",\n    \"type\": \"JAVA\",\n    \"script\": \"package org.meveo.service.script;\\n    \\n    import java.util.Map;\\n    import java.math.BigDecimal;\\n    import org.meveo.admin.exception.BusinessException;\\n    import org.meveo.model.admin.User;\\n    import org.meveo.model.crm.Provider;\\n    import org.slf4j.Logger;\\n    import org.slf4j.LoggerFactory;\\n    import org.meveo.service.catalog.impl.OfferTemplateService;\\n    import org.meveo.model.catalog.OfferTemplate;\\n    \\n    public class ExecuteCustomAction_{{index}}_Script extends Script {\\n      \\n        private static final Logger log = LoggerFactory.getLogger(ExecuteCustomAction_{{index}}_Script.class);\\n        private OfferTemplateService offerTemplateService = (OfferTemplateService)getServiceInterface(\\\"OfferTemplateService\\\");\\n    \\n        public void execute(Map<String,Object> context) throws BusinessException{\\n            OfferTemplate offerTemplate = (OfferTemplate) context.get(Script.CONTEXT_ENTITY);\\n            offerTemplate.setDescription(\\\"action executed\\\");\\n        }\\n    }\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create custom action hidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d305f07a-e968-42b1-a3f1-5cab74b0e4f5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"ExecuteCustomAction_{{index}}_HIDDEN\",\n    \"description\": \"ExecuteCustomAction_{{index}}_HIDDEN\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"script\": {\n        \"code\": \"org.meveo.service.script.ExecuteCustomAction_{{index}}_Script\"\n    },\n    \"applicableOnEl\": \"#{!entity.code.equals('{{baseEntityPrefix}}_OFFER1')}\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/action/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"action",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create custom action visible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "151b1926-71ca-4415-b27d-d9479e6e7d7a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"ExecuteCustomAction_{{index}}_VISIBLE\",\n    \"description\": \"ExecuteCustomAction_{{index}}_VISIBLE\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"script\": {\n        \"code\": \"org.meveo.service.script.ExecuteCustomAction_{{index}}_Script\"\n    },\n    \"applicableOnEl\": \"#{entity.code.equals('{{baseEntityPrefix}}_OFFER1')}\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/action/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"action",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "List visible CA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42a8a748-e7a0-4e9d-a2b9-137a1c147a77",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.entityCustomization.action[0].code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.entityCustomization.action[0].description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.entityCustomization.action[0].appliesTo).to.deep.equal(jsonBody.appliesTo);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"ExecuteCustomAction_{{index}}_VISIBLE\",\n    \"description\": \"ExecuteCustomAction_{{index}}_VISIBLE\",\n    \"appliesTo\": \"OfferTemplate\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/entity/listELFiltered?appliesTo=OfferTemplate&entityCode={{baseEntityPrefix}}_OFFER1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"entity",
												"listELFiltered"
											],
											"query": [
												{
													"key": "appliesTo",
													"value": "OfferTemplate"
												},
												{
													"key": "entityCode",
													"value": "{{baseEntityPrefix}}_OFFER1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete custom action hidden",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4b9b0a00-ff73-4364-ac27-2823a99d61e6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/action/ExecuteCustomAction_{{index}}_HIDDEN/OfferTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"action",
												"ExecuteCustomAction_{{index}}_HIDDEN",
												"OfferTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete custom action visible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ff98961-3898-4b8d-a264-e925bce44b38",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/action/ExecuteCustomAction_{{index}}_VISIBLE/OfferTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"action",
												"ExecuteCustomAction_{{index}}_VISIBLE",
												"OfferTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "17a2433b-156f-4df0-84a7-ded7dde03811",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/org.meveo.service.script.ExecuteCustomAction_{{index}}_Script",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"org.meveo.service.script.ExecuteCustomAction_{{index}}_Script"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Execute entity action",
							"item": [
								{
									"name": "Create script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c3fa768c-3ebe-48bc-9304-3f012f2ad38b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"executeAction\",\n    \"type\": \"JAVA\",\n    \"script\": \"package org.meveo.service.script;\\n    \\n    import java.util.Map;\\n    import java.math.BigDecimal;\\n    import org.meveo.admin.exception.BusinessException;\\n    import org.meveo.model.admin.User;\\n    import org.meveo.model.crm.Provider;\\n    import org.slf4j.Logger;\\n    import org.slf4j.LoggerFactory;\\n    import org.meveo.service.catalog.impl.OfferTemplateService;\\n    import org.meveo.model.catalog.OfferTemplate;\\n    \\n    public class ExecuteCustomAction_{{index}}_Script extends Script {\\n      \\n        private static final Logger log = LoggerFactory.getLogger(ExecuteCustomAction_{{index}}_Script.class);\\n        private OfferTemplateService offerTemplateService = (OfferTemplateService)getServiceInterface(\\\"OfferTemplateService\\\");\\n    \\n        public void execute(Map<String,Object> context) throws BusinessException{\\n            OfferTemplate offerTemplate = (OfferTemplate) context.get(Script.CONTEXT_ENTITY);\\n            offerTemplate.setDescription(\\\"action executed\\\");\\n        }\\n    }\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create custom action",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "da9c09c2-c521-4365-8a07-45443342dd9d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"ExecuteCustomAction_{{index}}\",\n    \"description\": \"ExecuteCustomAction_{{index}}\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"script\": {\n        \"code\": \"org.meveo.service.script.ExecuteCustomAction_{{index}}_Script\"\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/action/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"action",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Execute action",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "53f48155-1a92-4679-8135-fed9a6c2feb1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"actionCode\": \"ExecuteCustomAction_{{index}}\",\n    \"appliesTo\": \"OfferTemplate\",\n    \"entityCode\": \"{{baseEntityPrefix}}_OFFER3\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/entity/action/execute/ExecuteCustomAction_{{index}}/OfferTemplate/{{baseEntityPrefix}}_OFFER3",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"entity",
												"action",
												"execute",
												"ExecuteCustomAction_{{index}}",
												"OfferTemplate",
												"{{baseEntityPrefix}}_OFFER3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9067ada2-f281-43d4-866b-4114e4b0619f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"    pm.expect(jsonData.offerTemplate.description).to.deep.equal(jsonBody.description);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"action executed\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{baseEntityPrefix}}_OFFER3",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{baseEntityPrefix}}_OFFER3"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete custom action",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b34bffed-637b-4413-8086-33dacd50fa7a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"actionCode\": \"ExecuteCustomAction_{{index}}\",\n    \"appliesTo\": \"OfferTemplate\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/entityCustomization/action/ExecuteCustomAction_{{index}}/OfferTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"entityCustomization",
												"action",
												"ExecuteCustomAction_{{index}}",
												"OfferTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a37e7f50-d2e3-46d0-94b0-af66a2aa7aab",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"removeScriptInstanceRequest\": \"org.meveo.service.script.ExecuteCustomAction_{{index}}_Script\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/org.meveo.service.script.ExecuteCustomAction_{{index}}_Script ",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"org.meveo.service.script.ExecuteCustomAction_{{index}}_Script "
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "b974231a-b07f-44ff-89dd-c3a0d7a6eba2",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 461);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "09b0f54f-418a-44ad-88e1-82ea6c566131",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Entity Security",
					"item": [
						{
							"name": "Setup Data",
							"item": [
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef0945f6-45b7-43ca-941b-f25fcbde95ef",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Seller SELLER_A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1277b063-bf08-4859-a92e-538f060ce1e7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b950606b-f6a4-4f68-8a5c-e03bc960f8b6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Seller SELLER_B",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3dc058bf-8ef9-43c7-bfc1-ad2b085ca1f4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9b3cd8a3-af97-41f5-9aea-552ca68e2798",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Seller SELLER_C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ff4883c-9b82-4026-84a9-e269693e6ad2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_C\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_C\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"{{entityPrefix}}_{{index}}_SELLER_B\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Account Hierarchy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "621c793d-35ab-4e23-9fd9-30d4eefc77ca",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sellers\": {\n        \"seller\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n                \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n                \"currencyCode\": \"EUR\",\n                \"countryCode\": \"FR\",\n                \"languageCode\": \"FRA\",\n                \"parentSeller\": \"MAIN_SELLER\",\n                \"customers\": {\n                    \"customer\": [\n                        {\n                            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n                            \"description\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n                            \"externalRef1\": \"1\",\n                            \"externalRef2\": \"1\",\n                            \"name\": {\n                                \"title\": \"MR\",\n                                \"firstName\": \"firstName\",\n                                \"lastName\": \"lastName\"\n                            },\n                            \"address\": {\n                                \"address1\": \"address1\",\n                                \"address2\": \"address2\",\n                                \"address3\": \"address3\",\n                                \"zipCode\": \"75001\",\n                                \"city\": \"Tunis\",\n                                \"country\": \"TN\"\n                            },\n                            \"customerCategory\": \"CLIENT\",\n                            \"customerBrand\": \"DEFAULT\",\n                            \"mandateIdentification\": \"M1\",\n                            \"mandateDate\": \"2016-02-28\",\n                            \"contactInformation\": {\n                                \"email\": \"{{entityPrefix}}@manaty.net\",\n                                \"phone\": \"1234\",\n                                \"mobile\": \"092152154716\",\n                                \"fax\": \"1234\"\n                            },\n                            \"customerAccounts\": {\n                                \"customerAccount\": [\n                                    {\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\n                                        \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\n                                        \"externalRef1\": \"1\",\n                                        \"externalRef2\": \"1\",\n                                        \"name\": {\n                                            \"title\": \"MR\",\n                                            \"firstName\": \"firstName\",\n                                            \"lastName\": \"lastName\"\n                                        },\n                                        \"address\": {\n                                            \"address1\": \"address1\",\n                                            \"address2\": \"address2\",\n                                            \"address3\": \"address3\",\n                                            \"zipCode\": \"75001\",\n                                            \"city\": \"Tunis\",\n                                            \"country\": \"TN\"\n                                        },\n                                        \"currency\": \"USD\",\n                                        \"language\": \"ENG\",\n                                        \"creditCategory\": \"NEWCUSTOMER\",\n                                        \"dateStatus\": \"2016-02-28\",\n                                        \"dateDunningLevel\": \"2016-02-28\",\n                                        \"contactInformation\": {\n                                            \"email\": \"{{entityPrefix}}@manaty.net\",\n                                            \"phone\": \"1234\",\n                                            \"mobile\": \"092152154716\",\n                                            \"fax\": \"1234\"\n                                        },\n                                        \"dunningLevel\": \"R0\",\n                                        \"mandateIdentification\": \"1234\",\n                                        \"mandateDate\": \"2016-02-28\",\n                                        \"billingAccounts\": {\n                                            \"billingAccount\": [\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA1\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA2\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA3\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA2\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA2\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA4\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA4\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA5\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA5\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA6\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA6\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA3\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA3\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA7\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA7\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA8\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA8\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA9\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA9\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    },\n                                    {\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CAA2\",\n                                        \"description\": \"{{entityPrefix}}_{{index}}_CAA2\",\n                                        \"externalRef1\": \"1\",\n                                        \"externalRef2\": \"1\",\n                                        \"name\": {\n                                            \"title\": \"MR\",\n                                            \"firstName\": \"firstName\",\n                                            \"lastName\": \"lastName\"\n                                        },\n                                        \"address\": {\n                                            \"address1\": \"address1\",\n                                            \"address2\": \"address2\",\n                                            \"address3\": \"address3\",\n                                            \"zipCode\": \"75001\",\n                                            \"city\": \"Tunis\",\n                                            \"country\": \"TN\"\n                                        },\n                                        \"currency\": \"USD\",\n                                        \"language\": \"ENG\",\n                                        \"creditCategory\": \"NEWCUSTOMER\",\n                                        \"dateStatus\": \"2016-02-28\",\n                                        \"dateDunningLevel\": \"2016-02-28\",\n                                        \"contactInformation\": {\n                                            \"email\": \"{{entityPrefix}}@manaty.net\",\n                                            \"phone\": \"1234\",\n                                            \"mobile\": \"092152154716\",\n                                            \"fax\": \"1234\"\n                                        },\n                                        \"dunningLevel\": \"R0\",\n                                        \"mandateIdentification\": \"1234\",\n                                        \"mandateDate\": \"2016-02-28\",\n                                        \"billingAccounts\": {\n                                            \"billingAccount\": [\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA4\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA4\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA11\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA11\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA12\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA12\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA13\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA13\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA5\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA5\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA14\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA14\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA15\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA15\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA16\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA16\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA6\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA6\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA17\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA17\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA18\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA18\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA19\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA19\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    },\n                                    {\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CAA3\",\n                                        \"description\": \"{{entityPrefix}}_{{index}}_CAA3\",\n                                        \"externalRef1\": \"1\",\n                                        \"externalRef2\": \"1\",\n                                        \"name\": {\n                                            \"title\": \"MR\",\n                                            \"firstName\": \"firstName\",\n                                            \"lastName\": \"lastName\"\n                                        },\n                                        \"address\": {\n                                            \"address1\": \"address1\",\n                                            \"address2\": \"address2\",\n                                            \"address3\": \"address3\",\n                                            \"zipCode\": \"75001\",\n                                            \"city\": \"Tunis\",\n                                            \"country\": \"TN\"\n                                        },\n                                        \"currency\": \"USD\",\n                                        \"language\": \"ENG\",\n                                        \"creditCategory\": \"NEWCUSTOMER\",\n                                        \"dateStatus\": \"2016-02-28\",\n                                        \"dateDunningLevel\": \"2016-02-28\",\n                                        \"contactInformation\": {\n                                            \"email\": \"{{entityPrefix}}@manaty.net\",\n                                            \"phone\": \"1234\",\n                                            \"mobile\": \"092152154716\",\n                                            \"fax\": \"1234\"\n                                        },\n                                        \"dunningLevel\": \"R0\",\n                                        \"mandateIdentification\": \"1234\",\n                                        \"mandateDate\": \"2016-02-28\",\n                                        \"billingAccounts\": {\n                                            \"billingAccount\": [\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA7\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA7\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA21\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA21\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA22\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA22\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA23\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA23\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA8\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA8\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA24\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA24\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA25\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA25\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA26\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA26\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAA9\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAA9\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA27\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA27\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA28\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA28\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAA29\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAA29\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n                \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n                \"currencyCode\": \"USD\",\n                \"countryCode\": \"US\",\n                \"languageCode\": \"ENG\",\n                \"parentSeller\": \"MAIN_SELLER\",\n                \"customers\": {\n                    \"customer\": [\n                        {\n                            \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n                            \"description\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n                            \"externalRef1\": \"1\",\n                            \"externalRef2\": \"1\",\n                            \"name\": {\n                                \"title\": \"MR\",\n                                \"firstName\": \"firstName\",\n                                \"lastName\": \"lastName\"\n                            },\n                            \"address\": {\n                                \"address1\": \"address1\",\n                                \"address2\": \"address2\",\n                                \"address3\": \"address3\",\n                                \"zipCode\": \"75001\",\n                                \"city\": \"Tunis\",\n                                \"country\": \"TN\"\n                            },\n                            \"customerCategory\": \"CLIENT\",\n                            \"customerBrand\": \"DEFAULT\",\n                            \"mandateIdentification\": \"M1\",\n                            \"mandateDate\": \"2016-02-28\",\n                            \"contactInformation\": {\n                                \"email\": \"{{entityPrefix}}@manaty.net\",\n                                \"phone\": \"1234\",\n                                \"mobile\": \"092152154716\",\n                                \"fax\": \"1234\"\n                            },\n                            \"customerAccounts\": {\n                                \"customerAccount\": [\n                                    {\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\n                                        \"description\": \"{{entityPrefix}}_{{index}}_CAB1\",\n                                        \"externalRef1\": \"1\",\n                                        \"externalRef2\": \"1\",\n                                        \"name\": {\n                                            \"title\": \"MR\",\n                                            \"firstName\": \"firstName\",\n                                            \"lastName\": \"lastName\"\n                                        },\n                                        \"address\": {\n                                            \"address1\": \"address1\",\n                                            \"address2\": \"address2\",\n                                            \"address3\": \"address3\",\n                                            \"zipCode\": \"75001\",\n                                            \"city\": \"Tunis\",\n                                            \"country\": \"TN\"\n                                        },\n                                        \"currency\": \"USD\",\n                                        \"language\": \"ENG\",\n                                        \"creditCategory\": \"NEWCUSTOMER\",\n                                        \"dateStatus\": \"2016-02-28\",\n                                        \"dateDunningLevel\": \"2016-02-28\",\n                                        \"contactInformation\": {\n                                            \"email\": \"{{entityPrefix}}@manaty.net\",\n                                            \"phone\": \"1234\",\n                                            \"mobile\": \"092152154716\",\n                                            \"fax\": \"1234\"\n                                        },\n                                        \"dunningLevel\": \"R0\",\n                                        \"mandateIdentification\": \"1234\",\n                                        \"mandateDate\": \"2016-02-28\",\n                                        \"billingAccounts\": {\n                                            \"billingAccount\": [\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB1\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB1\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB1\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB2\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB2\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB3\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB3\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB2\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB2\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB4\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB4\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB5\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB5\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB6\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB6\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB3\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB3\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB7\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB7\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB8\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB8\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB9\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB9\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    },\n                                    {\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CAB2\",\n                                        \"description\": \"{{entityPrefix}}_{{index}}_CAB2\",\n                                        \"externalRef1\": \"1\",\n                                        \"externalRef2\": \"1\",\n                                        \"name\": {\n                                            \"title\": \"MR\",\n                                            \"firstName\": \"firstName\",\n                                            \"lastName\": \"lastName\"\n                                        },\n                                        \"address\": {\n                                            \"address1\": \"address1\",\n                                            \"address2\": \"address2\",\n                                            \"address3\": \"address3\",\n                                            \"zipCode\": \"75001\",\n                                            \"city\": \"Tunis\",\n                                            \"country\": \"TN\"\n                                        },\n                                        \"currency\": \"USD\",\n                                        \"language\": \"ENG\",\n                                        \"creditCategory\": \"NEWCUSTOMER\",\n                                        \"dateStatus\": \"2016-02-28\",\n                                        \"dateDunningLevel\": \"2016-02-28\",\n                                        \"contactInformation\": {\n                                            \"email\": \"{{entityPrefix}}@manaty.net\",\n                                            \"phone\": \"1234\",\n                                            \"mobile\": \"092152154716\",\n                                            \"fax\": \"1234\"\n                                        },\n                                        \"dunningLevel\": \"R0\",\n                                        \"mandateIdentification\": \"1234\",\n                                        \"mandateDate\": \"2016-02-28\",\n                                        \"billingAccounts\": {\n                                            \"billingAccount\": [\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB4\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB4\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB11\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB11\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB12\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB12\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB13\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB13\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB5\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB5\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB14\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB14\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB15\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB15\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB16\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB16\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB6\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB6\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB17\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB17\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB18\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB18\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB19\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB19\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    },\n                                    {\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CAB3\",\n                                        \"description\": \"{{entityPrefix}}_{{index}}_CAB3\",\n                                        \"externalRef1\": \"1\",\n                                        \"externalRef2\": \"1\",\n                                        \"name\": {\n                                            \"title\": \"MR\",\n                                            \"firstName\": \"firstName\",\n                                            \"lastName\": \"lastName\"\n                                        },\n                                        \"address\": {\n                                            \"address1\": \"address1\",\n                                            \"address2\": \"address2\",\n                                            \"address3\": \"address3\",\n                                            \"zipCode\": \"75001\",\n                                            \"city\": \"Tunis\",\n                                            \"country\": \"TN\"\n                                        },\n                                        \"currency\": \"USD\",\n                                        \"language\": \"ENG\",\n                                        \"creditCategory\": \"NEWCUSTOMER\",\n                                        \"dateStatus\": \"2016-02-28\",\n                                        \"dateDunningLevel\": \"2016-02-28\",\n                                        \"contactInformation\": {\n                                            \"email\": \"{{entityPrefix}}@manaty.net\",\n                                            \"phone\": \"1234\",\n                                            \"mobile\": \"092152154716\",\n                                            \"fax\": \"1234\"\n                                        },\n                                        \"dunningLevel\": \"R0\",\n                                        \"mandateIdentification\": \"1234\",\n                                        \"mandateDate\": \"2016-02-28\",\n                                        \"billingAccounts\": {\n                                            \"billingAccount\": [\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB7\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB7\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB21\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB21\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB22\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB22\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB23\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB23\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB8\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB8\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB24\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB24\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB25\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB25\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB26\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB26\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                },\n                                                {\n                                                    \"code\": \"{{entityPrefix}}_{{index}}_BAB9\",\n                                                    \"description\": \"{{entityPrefix}}_{{index}}_BAB9\",\n                                                    \"externalRef1\": \"1\",\n                                                    \"externalRef2\": \"1\",\n                                                    \"name\": {\n                                                        \"title\": \"MR\",\n                                                        \"firstName\": \"firstName\",\n                                                        \"lastName\": \"lastName\"\n                                                    },\n                                                    \"address\": {\n                                                        \"address1\": \"address1\",\n                                                        \"address2\": \"address2\",\n                                                        \"address3\": \"address3\",\n                                                        \"zipCode\": \"75001\",\n                                                        \"city\": \"Tunis\",\n                                                        \"country\": \"TN\"\n                                                    },\n                                                    \"billingCycle\": \"CYC_INV_MT_1\",\n                                                    \"country\": \"US\",\n                                                    \"language\": \"ENG\",\n                                                    \"nextInvoiceDate\": \"2016-02-28\",\n                                                    \"subscriptionDate\": \"2016-02-28\",\n                                                    \"electronicBilling\": \"true\",\n                                                    \"email\": \"{{entityPrefix}}@manaty.net\",\n                                                    \"userAccounts\": {\n                                                        \"userAccount\": [\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB27\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB27\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB28\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB28\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            },\n                                                            {\n                                                                \"code\": \"{{entityPrefix}}_{{index}}_UAB29\",\n                                                                \"description\": \"{{entityPrefix}}_{{index}}_UAB29\",\n                                                                \"externalRef1\": \"1\",\n                                                                \"externalRef2\": \"1\",\n                                                                \"name\": {\n                                                                    \"title\": \"MR\",\n                                                                    \"firstName\": \"firstName\",\n                                                                    \"lastName\": \"lastName\"\n                                                                },\n                                                                \"address\": {\n                                                                    \"address1\": \"address1\",\n                                                                    \"address2\": \"address2\",\n                                                                    \"address3\": \"address3\",\n                                                                    \"zipCode\": \"75001\",\n                                                                    \"city\": \"Tunis\",\n                                                                    \"country\": \"TN\"\n                                                                }\n                                                            }\n                                                        ]\n                                                    }\n                                                }\n                                            ]\n                                        }\n                                    }\n                                ]\n                            }\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/customerHierarchyUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"customerHierarchyUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create UserHierarchyLevels",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "793a985d-e684-40af-88c9-3680bf0aa61c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_LEVEL_1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_Description1\",\n    \"orderLevel\": \"1\",\n    \"userHierarchyLevel\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_LEVEL_2\",\n            \"description\": \"{{entityPrefix}}_{{index}}_Description 2\",\n            \"orderLevel\": \"1\",\n            \"userHierarchyLevel\": [\n                {\n                    \"code\": \"{{entityPrefix}}_{{index}}_LEVEL_2_1\",\n                    \"description\": \"{{entityPrefix}}_{{index}}_Description 21\",\n                    \"orderLevel\": \"1\"\n                },\n                {\n                    \"code\": \"{{entityPrefix}}_{{index}}_LEVEL_2_2\",\n                    \"description\": \"{{entityPrefix}}_{{index}}_Description 22\",\n                    \"orderLevel\": \"2\"\n                }\n            ]\n        },\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_LEVEL_3\",\n            \"description\": \"{{entityPrefix}}_{{index}}_Description 3\",\n            \"orderLevel\": \"2\"\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/hierarchy/userGroupLevel",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"hierarchy",
												"userGroupLevel"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User in level 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "db26713e-5501-4b7d-baf5-bf752edffe30",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level1\",\n    \"email\": \"{{entityPrefix}}_{{index}}@test.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"Level 1\",\n    \"lastName\": \"User\",\n    \"userLevel\": \"{{entityPrefix}}_{{index}}_LEVEL_1\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User in level 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "49adb887-f3bd-4899-84c3-c3389277a8f8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level2\",\n    \"email\": \"{{entityPrefix}}_{{index}}@test.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"Level 2\",\n    \"lastName\": \"User\",\n    \"userLevel\": \"{{entityPrefix}}_{{index}}_LEVEL_2\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User in level 2.1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "38432e8f-85e5-46dc-a17b-f564cb339ae2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level21\",\n    \"email\": \"{{entityPrefix}}_{{index}}@test.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"Level 2.1\",\n    \"lastName\": \"User\",\n    \"userLevel\": \"{{entityPrefix}}_{{index}}_LEVEL_2_1\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User in level 2.2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4016afb4-f79d-4adb-a6bf-a903661df165",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level22\",\n    \"email\": \"{{entityPrefix}}_{{index}}@test.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"Level 2.2\",\n    \"lastName\": \"User\",\n    \"userLevel\": \"{{entityPrefix}}_{{index}}_LEVEL_2_2\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User in level 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "86af74f8-b584-48fa-ab06-7f445942281c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level3\",\n    \"email\": \"{{entityPrefix}}_{{index}}@test.com\",\n    \"userRole\": [\n      \"administrateur\"\n    ],\n    \"firstName\": \"Level 3\",\n    \"lastName\": \"User\",\n    \"userLevel\": \"{{entityPrefix}}_{{index}}_LEVEL_3\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create UserRole with userSelfManagement permission",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "595b2894-6eaa-405d-941c-c430d7225d9c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"name\": \"{{entityPrefix}}_{{index}}_ROLE_SELF_USER\",\n    \"description\": \"{{entityPrefix}}_{{index}}_ROLE_SELF_USER\",\n    \"permission\": [\n      {\n        \"permission\": \"userSelfManagement\",\n        \"name\": \"User Self Management\"\n      }\n    ]\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/role",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"role"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create offer template - no seller",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "af04897d-d53c-45dc-8a6e-2e76914e1be0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_NOSELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create offer template - seller A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf42a22c-718e-44c8-a5d3-0b5f5f1e4dcf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_A\",\n    \"seller\": [\n        \"{{entityPrefix}}_{{index}}_SELLER_A\"\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create offer template - seller B",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "603ff542-40f9-44dc-9ff7-a7bded2fef13",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_B\",\n    \"seller\": [\n        \"{{entityPrefix}}_{{index}}_SELLER_B\"\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create offer template - seller C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c748d18-deae-4388-b3da-3634c63f7645",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_C\",\n    \"seller\": [\n        \"{{entityPrefix}}_{{index}}_SELLER_C\"\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create offer template - seller A,B,C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef2bbb38-8bd5-43ff-b86d-26e44bfac5d3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_D\",\n    \"seller\": [\n        \"{{entityPrefix}}_{{index}}_SELLER_A\",\n        \"{{entityPrefix}}_{{index}}_SELLER_B\",\n        \"{{entityPrefix}}_{{index}}_SELLER_C\"\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Set securedEntities=true - AUTHORIZATION_SUPERADMIN",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "72756e30-4f03-4d0d-9fe8-5935fe8bb75d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"property\": \"secured.entities.enabled\",\n    \"value\": \"true\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Seller Tests",
							"item": [
								{
									"name": "Restore User to default.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2843f42e-0bda-4c00-8366-a752cf5c4d74",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "968246b1-1890-4018-9fa8-88f2825242d9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ff346a22-f3a7-409d-ab0e-d2b61b43a503",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to MAIN_SELLER",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1e128764-77e2-42eb-9851-5c89628097f4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"MAIN_SELLER\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        },\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        },\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A still accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7f5606c4-8bd2-476b-9024-2e888d3c666d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B still accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0fc2ade5-cc22-4af4-ab30-9d4ab9c3c00c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ec298945-1512-404f-889c-90170d95277c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A still accessible.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7ade42b9-9ca6-4c7d-a7af-92ff446f17fe",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "23cfad34-67b3-4f3c-8092-eeb91b484397",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller MAIN_SELLER not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "31338b60-9e75-47aa-a7dd-8c3afc17c564",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode=MAIN_SELLER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "MAIN_SELLER"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "456d79d9-6e8a-4821-aeda-4d39ff14ed88",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d01896d4-adc2-45c8-8f95-df0795d8f305",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B now accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a63d976f-d0d2-4e8d-9c4d-0aaeaae1ac0f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller MAIN_SELLER still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "02bd92f0-3c31-4feb-b4b9-da6ad6fb60a6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sellerCode\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode=MAIN_SELLER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "MAIN_SELLER"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8591736a-d779-4604-860d-889560fe35ae",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Customer Tests",
							"item": [
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2edec106-741a-46f0-a8e3-679f41487b9b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3233b89b-5574-4d16-8838-3b98f95dbec9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA3\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4067e660-40aa-47dc-b07e-0249b7edff27",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB3\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTA only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "11521572-094a-4be8-8d69-a1120dd0aa04",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\n        \n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA still accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0efc7c4b-2e42-4f99-9186-8a681f5d01fa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA3\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ab3ad4b-5809-45f5-a604-c4cb45ce368d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "List Customer with Filter CUSTA is accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bd78b132-fce7-41f8-83ce-03971b1f23eb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customers.totalNumberOfRecords).to.eql(1);",
													"    pm.expect(jsonData.customers.customer[0].code).to.deep.equal(jsonBody.customer[0].code);",
													"    pm.expect(jsonData.customers.customer[0].description).to.deep.equal(jsonBody.customer[0].description);",
													"    pm.expect(jsonData.customers.customer[0].customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customer[0].customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customers.customer[0].customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customer[0].customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customers.customer[0].customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customer[0].customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customer\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n            \"description\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n            \"customerAccounts\": {\n                \"customerAccount\": [\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CAA1\"\n                    },\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CAA2\"\n                    },\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CAA3\"\n                    }\n                ]\n            }\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/list?query=code:{{entityPrefix}}_{{index}}_CUSTA|seller:{{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"list"
											],
											"query": [
												{
													"key": "query",
													"value": "code:{{entityPrefix}}_{{index}}_CUSTA|seller:{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "List Customer with Filter CUSTB not accessible.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "820e5c1a-49da-4218-838c-d1de30e7f8a1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customers.totalNumberOfRecords).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customer\": [\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/list?query=code:{{entityPrefix}}_{{index}}_CUSTB|seller:{{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"list"
											],
											"query": [
												{
													"key": "query",
													"value": "code:{{entityPrefix}}_{{index}}_CUSTB|seller:{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5168e0f2-9b93-4fdb-aae9-d4c81ff51551",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sellerCode\": \"{{entityPrefix}}_{{index}}_SELLER_A\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "de5ced4e-f9a2-414b-a100-7c0bbc5ed9a4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sellerCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTB only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84bd6c6d-e78a-4f31-af3d-c3b296806e58",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e42d7dba-9b6a-49a9-9006-96587bb82f48",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customerCode\": \"{{entityPrefix}}_{{index}}_CUSTA\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB now accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "46ccc401-eb6a-4312-bc60-3f6f229b22eb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB3\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2df99f05-d937-492b-84e3-308f7f227f1b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sellerCode\": \"{{entityPrefix}}_{{index}}_SELLER_A\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dcb73b29-b3f1-4019-b3a5-a0fe60b7cd84",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sellerCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "List Customer with Filter CUSTA not accessible.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "64a9deff-9b58-49c5-a95a-4d3aefac5db5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customers.totalNumberOfRecords).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customer\": [\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/list?query=code:{{entityPrefix}}_{{index}}_CUSTB|seller:{{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"list"
											],
											"query": [
												{
													"key": "query",
													"value": "code:{{entityPrefix}}_{{index}}_CUSTB|seller:{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "List Customer with Filter CUSTB is accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c37ad10-e450-4f21-a973-f7a505b28b03",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customers.totalNumberOfRecords).to.eql(1);",
													"    pm.expect(jsonData.customers.customer[0].code).to.deep.equal(jsonBody.customer[0].code);",
													"    pm.expect(jsonData.customers.customer[0].description).to.deep.equal(jsonBody.customer[0].description);",
													"    pm.expect(jsonData.customers.customer[0].customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customer[0].customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customers.customer[0].customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customer[0].customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customers.customer[0].customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customer[0].customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customer\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n            \"description\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n            \"customerAccounts\": {\n                \"customerAccount\": [\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CAB1\"\n                    },\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CAB2\"\n                    },\n                    {\n                        \"code\": \"{{entityPrefix}}_{{index}}_CAB3\"\n                    }\n                ]\n            }\n        }\n    ]\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/list?query=code:{{entityPrefix}}_{{index}}_CUSTB|seller:{{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"list"
											],
											"query": [
												{
													"key": "query",
													"value": "code:{{entityPrefix}}_{{index}}_CUSTB|seller:{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore User to default.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "672aa316-5bc8-4cf2-b068-bb2c520b157f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Customer Account Tests",
							"item": [
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "45fb2035-e4de-418f-84f2-e8e02bd6713b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "91765895-2131-4341-91c7-2a9062389602",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "35813273-0244-4e15-b3ce-30b1dc47c7dd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3694577f-1dcc-403a-a37f-12edfcaddd6a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA3\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c7ff85ef-55f5-4ee2-84f4-10015296fe40",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTB\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAB3\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "657d13f3-cba5-460f-8de9-c5f7a209abd1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\n    \"currencyCode\": \"EUR\",\n    \"countryCode\": \"FR\",\n    \"languageCode\": \"FRA\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f88eec19-6e3c-4d91-ab9d-98e0a0757986",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.seller.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.seller.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.seller.currencyCode).to.deep.equal(jsonBody.currencyCode);",
													"    pm.expect(jsonData.seller.countryCode).to.deep.equal(jsonBody.countryCode);",
													"    pm.expect(jsonData.seller.languageCode).to.deep.equal(jsonBody.languageCode);",
													"    pm.expect(jsonData.seller.parentSeller).to.deep.equal(jsonBody.parentSeller);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n    \"currencyCode\": \"USD\",\n    \"countryCode\": \"US\",\n    \"languageCode\": \"ENG\",\n    \"parentSeller\": \"MAIN_SELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60d8342a-feb5-4a9e-b66a-8e562811a0bd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 still accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef069e15-b3df-4628-98b8-4276a1acd7d8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "93899b19-68fb-45bd-a976-99ec498cbcdc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f0da05a-aad6-406c-a24a-307c7952bba3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5ed0d2b6-e446-4b54-9939-d95ce9d95fa5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 now accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9b7af8a-2baf-4097-9220-919047bbcab9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTA only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8f429194-8309-47ad-9747-6219aa117a49",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 now accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6deebc2a-fcc6-47aa-a59b-0a878efb1b30",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 not accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f7378894-c2c2-49ee-876b-f630e6c070c6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomerAccount\": {\n        \"customerAccountCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CAB1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTB only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fb2763f8-a239-47f5-bed4-2ee58331cc03",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 not accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f8d7960f-45f9-46cc-97aa-0535325eacda",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomerAccount\": {\n        \"customerAccountCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CAA1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 now accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ad301768-7b49-4f30-84b0-71db15847048",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "190e4564-fc5b-4570-8826-45b5493f7cf4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 now accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "90350396-8579-4120-813b-8888debedee9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 not accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2e039eb7-2895-4220-b8f5-cc25e4f4e329",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomerAccount\": {\n        \"customerAccountCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CAB1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c9e81ee6-ada9-4b48-9443-910e955549e5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customerCode\": \"{{entityPrefix}}_{{index}}_CUSTA\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f249663f-213d-4f95-a974-0c40d0cd30b2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customerCode\": \"{{entityPrefix}}_{{index}}_CUSTA\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9308b0c-431e-442c-a615-4b212f6c6660",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findSeller\": {\n        \"sellerCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_SELLER_A\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9f52444-3c0c-4fad-8178-143d30d465a5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findSeller\": {\n        \"sellerCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_SELLER_B\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CAB1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f95a9aae-984b-4cdd-9691-9e5f97f2c7e9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 not accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "05af620d-4f2b-4a92-974b-61dc0915c318",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomerAccount\": {\n        \"customerAccountCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CAA1\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 now accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a2182019-dca9-48e9-8b46-192f859f7084",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eae71e17-c8c5-4562-828b-3886edcc27c5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomer\": {\n        \"customerCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CUSTA\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8048299b-ce94-41e4-b214-9921f44b5e10",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": " {\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomer\": {\n        \"customerCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CUSTB\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4c344d62-73bf-4711-9c87-9811b7bd7ff4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findCustomer\": {\n        \"customerCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_CUSTB\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a5a940f9-2b14-4af8-8b3c-d70930788317",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"-xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"-xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:findSeller\": {\n        \"sellerCode\": \"${#Project#entityPrefix}_${#TestSuite#index}_SELLER_B\"\n      }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTA and CAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a335a473-e1d1-465b-bd42-4e53f839f631",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        },\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 now accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47ab5eff-f022-45bf-9a75-a8d4d21bfeb8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA with all its CustomerAccounts included",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d9031e45-983f-4470-a505-0f8ddf6a6b5a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[1].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[1].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[2].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"description\": \"{{entityPrefix}}_{{index}}_CUSTA\",\n    \"customerAccounts\": {\n        \"customerAccount\": [\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA1\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA2\"\n            },\n            {\n                \"code\": \"{{entityPrefix}}_{{index}}_CAA3\"\n            }\n        ]\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dcb778fb-4ac4-4db1-aa37-5af3fce8db2f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Billing Account Tests",
							"item": [
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a5af6022-c031-43e8-9157-ffeb9ea22b48",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "010eeea5-8eaf-49ea-ac65-514e6ce2f6d9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c530c31-0c61-4c30-92c0-423d55f0217c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f0b2e046-b3f5-40c7-ac6a-5d820b1bd526",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 still accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1746e17b-979d-4c3c-b267-e31e2e6dd0b7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8f1595ed-1d59-4d37-bec6-fd901385b802",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "13590ebb-60bf-4430-9912-132cbd19014f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ca32af90-0201-4df3-9e61-1ad0865c0cbc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 now accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "333926fe-857c-45d9-9563-314648ad1daf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTA only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "77c40e8b-26d1-44e3-95a9-ee1bbf771b84",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 now accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c9aac8bc-e58a-45a9-9e04-792cef28e746",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 not accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bd77ad6e-57da-4c88-883c-7af0be77806a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTB only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "50ee179d-b224-4ce8-80e2-c731a07f0924",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 not accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9d336aea-ee05-43f0-a923-2ff6d8490c2c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 now accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b0a5f0fa-ee53-4705-a3f7-8ff173dc2e51",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ad7b808-145f-42fd-b9ec-aa6594fa5ab6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 now accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "782911ec-f164-4ce8-95a8-7af5c3890429",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 not accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e86480a-e190-43c2-9330-9e574bc63dd7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CAB1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c35a643e-2e1f-4863-92df-fee987da241f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 not accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6d939359-7679-4535-9ace-3e4f0baa2f55",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 now accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "19c835f1-c6e1-4cc4-a01d-f6d9f99d27c2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to BAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6077711f-7629-4edb-ab24-d07954196cc7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n            \"entityClass\": \"org.meveo.model.billing.BillingAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 now accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eaa7bdf0-59ed-4887-9146-d54624fbd6a4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 not accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "274c37ed-3f73-4746-a7dc-7fda2fc08c9d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c719b82-0133-4f27-b860-cde13eb9b250",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "79813729-6021-4096-b295-e98bb505bb29",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "950791a9-8cf5-49fb-9292-a6336ec2f84b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "159caf1e-3cb0-4fe1-82be-f5a62a9d9f6a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "628e6bfc-add9-4f07-94cd-80efc4792814",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "411a4318-9ade-4fea-b5d6-a3e21dcab399",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to BAB1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "648174c5-e5f9-4def-96fc-9563f74a771c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n            \"entityClass\": \"org.meveo.model.billing.BillingAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 not accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "25623e9e-cba0-4121-9361-e016d47f34ce",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 now accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c958c15e-0f76-4802-8f47-32648cea0daa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAB3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "59c3dffa-1913-425f-bbbf-14ff3c803c57",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "24996a60-b154-4548-9e74-dc1a062e4daa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3dbb54b7-723a-4564-b47f-553e4cdd0a33",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "124f0dcc-f27f-4014-93ba-98c6b325dc72",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "adc84e75-c3ad-4d79-b1af-ec3bf65dac8f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8019c529-5d70-443c-bb60-a9c892db8b30",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CAA1 and BAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4bf382a5-8ada-4cb2-ba0d-57d4fbe98356",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        },\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n            \"entityClass\": \"org.meveo.model.billing.BillingAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 with all its BillingAccounts included",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "39395266-6f61-48cc-889a-6c7125a62bfb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customerAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customerAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[0].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[0].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[1].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[1].code);",
													"    pm.expect(jsonData.customerAccount.billingAccounts.billingAccount[2].code).to.deep.equal(jsonBody.billingAccounts.billingAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n    \"billingAccounts\": {\r\n        \"billingAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_BAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42d12c65-8837-4393-a134-80145ac6f1ae",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "User Account Tests",
							"item": [
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "88321d1f-46d2-4e90-809a-cc8f5203cacc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b5ea225c-4403-4d51-a2b3-842c4fa5e943",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ef04bd50-35c3-4371-a861-1b16923f0f4e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d8b32af0-a244-4069-85c4-8adc1014100f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 still accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6208081e-3e15-470b-90a4-d96550d81c9b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "42c082d7-ea97-4baa-94d6-f61ed8119600",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c4d02732-0f52-44c5-846c-21dbd94cc9d1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4a28c101-3c36-4561-9987-848aeaf51726",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 now accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d905d81-5e27-4058-af64-d42e80f4aee1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTA only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8f89b8fa-81f1-4c86-b836-e0a4717e787a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTA\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 now accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "54b843b7-00ee-4bd7-9cc2-18df43609d4c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 not accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9036bf74-caf0-4e5c-9576-855aff399275",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CUSTB only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c2d6187-27e9-4e02-ad88-31355fd1a131",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CUSTB\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 not accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bacd37e9-8ec0-43be-be16-925a76073bee",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 now accessible again",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "409212df-5f41-4419-9193-c8f3b0148954",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "830635ad-c633-47b6-b753-4a106e913827",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAA1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 now accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c614ca8f-d061-4c07-ab3f-e1e8f8f01341",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 not accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c7401d00-9f9f-44af-a312-5a4e29dedb13",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CAA1 only Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "278d3b51-f802-4829-b04a-2c405f9c45a8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CAB1\",\r\n            \"entityClass\": \"org.meveo.model.payments.CustomerAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 not accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c591c67-e489-4674-8b88-6d259ec1c46c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 now accessible again.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "20397f83-d362-4f68-a012-db7b10e61d65",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to BAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8abff255-aeb3-40cf-8bd6-c356b6cbb817",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n            \"entityClass\": \"org.meveo.model.billing.BillingAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 now accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8c9b405b-ee0c-4d81-bbf6-8c9b5c078746",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 not accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8e6e5918-8ad8-4437-8022-ad3ee30222ca",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to BAB1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "03b4de16-2fc8-4da5-be8f-2b4932b4a603",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_BAB1\",\r\n            \"entityClass\": \"org.meveo.model.billing.BillingAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 not accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dc0a1319-e920-4124-b055-ec7aca40c555",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 now accessible again..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ee5a1f9c-9649-4465-9a44-20aa1ec6533c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to UAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "48e76e50-fb78-40c1-b401-3b0b148977cb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_UAA1\",\r\n            \"entityClass\": \"org.meveo.model.billing.UserAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 now accessible again...",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "53396ecb-cdc9-4a2d-9a5f-ec1b1ac457e6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 not accessible again...",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9a506dfd-5e55-4d3d-b36b-e8d072256571",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "47a883c7-07bd-4f5e-8fe9-883dd84ad95a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f730d8f1-8ac1-4973-93f9-52a5a19b8fda",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76db45be-b0c2-498e-893c-387ab989a3f8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44e93e7e-2e80-439a-8be1-4724bceaaf5a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c105d61-38a0-4d53-93f9-5bd30c5b829a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "470ffb62-03ff-4595-9ff8-6f96489fe767",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5bd0a994-072b-4aa9-b05e-6a7f3ebdf3b7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2ac8ed0-a56c-47b2-b821-e50f90031de0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to UAB1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "541f2bf0-f29b-4554-9546-6d514bc206f9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_UAB1\",\r\n            \"entityClass\": \"org.meveo.model.billing.UserAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAA1 not accessible again...",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d11c2302-b594-4a43-a3f9-0474e5ff3e5d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find User Account UAB1 now accessible again...",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d59e13ab-8c4a-4d7b-b58b-e4a75c6b9d0b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.userAccount.code).to.deep.equal(jsonBody.code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_UAB1\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount?userAccountCode={{entityPrefix}}_{{index}}_UAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount"
											],
											"query": [
												{
													"key": "userAccountCode",
													"value": "{{entityPrefix}}_{{index}}_UAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56b424ab-5850-4448-9bea-b42b53b0316b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAB1 still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0eac1d9b-628e-4c36-8b70-48d40963b9a4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAA1 still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "65e825e6-72ed-463e-a8ac-0274a6592491",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer Account CAB1 still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "73d4bfbe-2e13-49ae-8f66-91f2547ee1d6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount?customerAccountCode={{entityPrefix}}_{{index}}_CAB1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount"
											],
											"query": [
												{
													"key": "customerAccountCode",
													"value": "{{entityPrefix}}_{{index}}_CAB1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTA still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f16e2193-7d1e-4970-9843-92e840ee403d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Customer CUSTB still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "49556539-45f4-4497-8081-0417e074c0fb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_A still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ddc409cc-d2b6-4f15-b908-66818558e148",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Seller SELLER_B still not accessible",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b2f7c4b7-b9df-4196-9823-9e45bfeb8cb2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to BAA1 and UAA1 only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "44330707-8f19-4318-b8cc-35152cc700ca",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n            \"entityClass\": \"org.meveo.model.billing.BillingAccount\"\r\n        },\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_UAA1\",\r\n            \"entityClass\": \"org.meveo.model.billing.UserAccount\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Billing Account BAA1 with all its UserAccounts included",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2c384a23-6686-4ebe-beea-e6bd0ccf13fd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.billingAccount.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.billingAccount.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[0].code).to.deep.equal(jsonBody.userAccounts.userAccount[0].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[1].code).to.deep.equal(jsonBody.userAccounts.userAccount[1].code);",
													"    pm.expect(jsonData.billingAccount.userAccounts.userAccount[2].code).to.deep.equal(jsonBody.userAccounts.userAccount[2].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_BAA1\",\r\n    \"userAccounts\": {\r\n        \"userAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA1\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA2\"\r\n            },\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_UAA3\"\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount?billingAccountCode={{entityPrefix}}_{{index}}_BAA1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount"
											],
											"query": [
												{
													"key": "billingAccountCode",
													"value": "{{entityPrefix}}_{{index}}_BAA1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6a6d4585-fb72-4aaf-9b5d-ff64c54bcbbc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "AccountHierarchy API Tests",
							"item": [
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "789bc43a-c15d-4a7d-8d20-e26a7e1f1766",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e0360a7a-347f-448a-b2fb-2c37ac88b76d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CRMAccountHierarchy fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "46984d45-de95-481d-b4cf-675cb836ecf6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CRM-AccountHierarchy\",\r\n    \"externalRef1\": \"Ref1\",\r\n    \"externalRef2\": \"Ref2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Saidani\",\r\n        \"lastName\": \"Hatem\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"Address1\",\r\n        \"address2\": \"Address2\",\r\n        \"zipCode\": \"20250\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}_{{index}}@yahoo.fr\",\r\n        \"phone\": \"+0122674100\",\r\n        \"mobile\": \"+0139154716\"\r\n    },\r\n    \"language\": \"FRA\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"subscriptionDate\": \"2016-02-01\",\r\n    \"terminationDate\": \"2016-05-01\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"mandateIdentification\": \"M1\",\r\n    \"mandateDate\": \"2016-04-01\",\r\n    \"currency\": \"EUR\",\r\n    \"caStatus\": \"ACTIVE\",\r\n    \"creditCategory\": \"VIP\",\r\n    \"dateStatus\": \"2016-04-01\",\r\n    \"dateDunningLevel\": \"2016-04-04\",\r\n    \"dunningLevel\": \"R0\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"seller\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"country\": \"FR\",\r\n    \"nextInvoiceDate\": \"2016-05-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"baStatus\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}_{{index}}@yahoo.fr\",\r\n    \"uaStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "13126ec4-63f4-4374-8213-3a51d6f1ea9a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create CRMAccountHierarchy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6c47ad34-8725-4bb4-ba04-ee7bedd393aa",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CRM-AccountHierarchy\",\r\n    \"externalRef1\": \"Ref1\",\r\n    \"externalRef2\": \"Ref2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Saidani\",\r\n        \"lastName\": \"Hatem\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"Address1\",\r\n        \"address2\": \"Address2\",\r\n        \"zipCode\": \"20250\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}_{{index}}@yahoo.fr\",\r\n        \"phone\": \"+0122674100\",\r\n        \"mobile\": \"+0139154716\"\r\n    },\r\n    \"language\": \"FRA\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"subscriptionDate\": \"2016-02-01\",\r\n    \"terminationDate\": \"2016-05-01\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"mandateIdentification\": \"M1\",\r\n    \"mandateDate\": \"2016-04-01\",\r\n    \"currency\": \"EUR\",\r\n    \"caStatus\": \"ACTIVE\",\r\n    \"creditCategory\": \"VIP\",\r\n    \"dateStatus\": \"2016-04-01\",\r\n    \"dateDunningLevel\": \"2016-04-04\",\r\n    \"dunningLevel\": \"R0\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"seller\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"country\": \"FR\",\r\n    \"nextInvoiceDate\": \"2016-05-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"baStatus\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}_{{index}}@yahoo.fr\",\r\n    \"uaStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "184d827b-ab81-465c-a941-714302bdd4bf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find CRMAccountHierarchy fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "27210dcf-e8b7-4583-8989-2e8c7d9b4b51",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CRM-CUST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CRM-CUST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2822003a-7a88-4e9c-9e6b-32e3ed3cfab2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find CRMAccountHierarchy.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4e21f02c-e34c-4f12-9695-0e4f6f47e3c5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].billingAccounts.billingAccount[0].userAccounts.userAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"customerAccounts\": {\r\n        \"customerAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n                \"billingAccounts\": {\r\n                    \"billingAccount\": [\r\n                        {\r\n                            \"userAccounts\": {\r\n                                \"userAccount\": [\r\n                                    {\r\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\"\r\n                                    }\r\n                                ]\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CRM-CUST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CRM-CUST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9d8b3e5-5eb9-4c3a-a1a2-38c7a2b7398f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CRMAccountHierarchy fail",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "03fe7d7f-3e0c-4b6c-b18f-6a6049ca7445",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CRM-AccountHierarchy-Updated\",\r\n    \"externalRef1\": \"EXTRef1\",\r\n    \"externalRef2\": \"EXTRef2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Saidani\",\r\n        \"lastName\": \"Hatem\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"Address1\",\r\n        \"address2\": \"Address2\",\r\n        \"zipCode\": \"01020\",\r\n        \"city\": \"Charguia2\",\r\n        \"country\": \"TN\",\r\n        \"state\": \"Tunisie\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}_{{index}}@manaty.com\",\r\n        \"phone\": \"+0135215579\",\r\n        \"mobile\": \"+0141487410\"\r\n    },\r\n    \"language\": \"ENG\",\r\n    \"terminationReason\": \"TERM_REASON_2\",\r\n    \"subscriptionDate\": \"2016-03-16\",\r\n    \"terminationDate\": \"2016-06-15\",\r\n    \"customerCategory\": \"PROSPECT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"mandateIdentification\": \"M10221\",\r\n    \"mandateDate\": \"2016-04-01\",\r\n    \"currency\": \"USD\",\r\n    \"caStatus\": \"ACTIVE\",\r\n    \"creditCategory\": \"PART_C\",\r\n    \"dateStatus\": \"2016-04-01\",\r\n    \"dateDunningLevel\": \"2016-04-04\",\r\n    \"dunningLevel\": \"R1\",\r\n    \"billingCycle\": \"CYC_INV_MT_2\",\r\n    \"seller\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"country\": \"US\",\r\n    \"nextInvoiceDate\": \"2016-05-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"baStatus\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}_{{index}}@manaty.com\",\r\n    \"uaStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/updateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"updateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "74959c2c-6c6c-4836-b2a7-423fd84c4d8c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CRMAccountHierarchy",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4fefa30b-b3da-45e8-855b-3052ada28fe6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CRM-AccountHierarchy-Updated\",\r\n    \"externalRef1\": \"EXTRef1\",\r\n    \"externalRef2\": \"EXTRef2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Saidani\",\r\n        \"lastName\": \"Hatem\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"Address1\",\r\n        \"address2\": \"Address2\",\r\n        \"zipCode\": \"01020\",\r\n        \"city\": \"Charguia2\",\r\n        \"country\": \"TN\",\r\n        \"state\": \"Tunisie\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}_{{index}}@manaty.com\",\r\n        \"phone\": \"+0135215579\",\r\n        \"mobile\": \"+0141487410\"\r\n    },\r\n    \"language\": \"ENG\",\r\n    \"terminationReason\": \"TERM_REASON_2\",\r\n    \"subscriptionDate\": \"2016-03-16\",\r\n    \"terminationDate\": \"2016-06-15\",\r\n    \"customerCategory\": \"PROSPECT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"mandateIdentification\": \"M10221\",\r\n    \"mandateDate\": \"2016-04-01\",\r\n    \"currency\": \"USD\",\r\n    \"caStatus\": \"ACTIVE\",\r\n    \"creditCategory\": \"PART_C\",\r\n    \"dateStatus\": \"2016-04-01\",\r\n    \"dateDunningLevel\": \"2016-04-04\",\r\n    \"dunningLevel\": \"R1\",\r\n    \"billingCycle\": \"CYC_INV_MT_2\",\r\n    \"seller\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"country\": \"US\",\r\n    \"nextInvoiceDate\": \"2016-05-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"baStatus\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}_{{index}}@manaty.com\",\r\n    \"uaStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/updateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"updateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only...",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78034e01-4c44-40a8-b24c-09538b180732",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find CRMAccountHierarchy fail.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d54230e7-950b-457f-84f2-99bf4c4d3dde",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CRM-CUST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CRM-CUST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only...",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f05ddfc3-ce0e-4046-8e34-fcea476c251b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find CRMAccountHierarchy..",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a9c238f8-b6b0-464a-a35a-da1183157303",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.customer.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"    pm.expect(jsonData.customer.customerAccounts.customerAccount[0].billingAccounts.billingAccount[0].userAccounts.userAccount[0].code).to.deep.equal(jsonBody.customerAccounts.customerAccount[0].code);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"customerAccounts\": {\r\n        \"customerAccount\": [\r\n            {\r\n                \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n                \"billingAccounts\": {\r\n                    \"billingAccount\": [\r\n                        {\r\n                            \"userAccounts\": {\r\n                                \"userAccount\": [\r\n                                    {\r\n                                        \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\"\r\n                                    }\r\n                                ]\r\n                            }\r\n                        }\r\n                    ]\r\n                }\r\n            }\r\n        ]\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CRM-CUST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CRM-CUST"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to CRM-CUST only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e7231b21-f061-42c7-b2b9-57c16c3f0d73",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n            \"entityClass\": \"org.meveo.model.crm.Customer\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Update CRMAccountHierarchy.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "674072c4-5347-4e60-b353-fdb6acc31313",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CRM-AccountHierarchy-Updated\",\r\n    \"externalRef1\": \"EXTRef1\",\r\n    \"externalRef2\": \"EXTRef2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"Saidani\",\r\n        \"lastName\": \"Hatem\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"Address1\",\r\n        \"address2\": \"Address2\",\r\n        \"zipCode\": \"01020\",\r\n        \"city\": \"Charguia2\",\r\n        \"country\": \"TN\",\r\n        \"state\": \"Tunisie\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}_{{index}}@manaty.com\",\r\n        \"phone\": \"+0135215579\",\r\n        \"mobile\": \"+0141487410\"\r\n    },\r\n    \"language\": \"ENG\",\r\n    \"terminationReason\": \"TERM_REASON_2\",\r\n    \"subscriptionDate\": \"2016-03-16\",\r\n    \"terminationDate\": \"2016-06-15\",\r\n    \"customerCategory\": \"PROSPECT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"mandateIdentification\": \"M10221\",\r\n    \"mandateDate\": \"2016-04-01\",\r\n    \"currency\": \"USD\",\r\n    \"caStatus\": \"ACTIVE\",\r\n    \"creditCategory\": \"PART_C\",\r\n    \"dateStatus\": \"2016-04-01\",\r\n    \"dateDunningLevel\": \"2016-04-04\",\r\n    \"dunningLevel\": \"R1\",\r\n    \"billingCycle\": \"CYC_INV_MT_2\",\r\n    \"seller\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"country\": \"US\",\r\n    \"nextInvoiceDate\": \"2016-05-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"baStatus\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}_{{index}}@manaty.com\",\r\n    \"uaStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/updateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"updateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Customer CRM_CUST",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1d7a1dc-2fe0-4b4b-a7d6-1c3d1c04599a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"crmAccountType\": \"C_UA\",\r\n    \"crmParentCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"code\": \"{{entityPrefix}}_{{index}}_CRM-CUST\",\r\n    \"description\": \"{{entityPrefix}}_{{index}}_CRM-AccountHierarchy\",\r\n    \"externalRef1\": \"Ref1\",\r\n    \"externalRef2\": \"Ref2\",\r\n    \"name\": {\r\n        \"title\": \"M\",\r\n        \"firstName\": \"Saidani\",\r\n        \"lastName\": \"Hatem\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"Address1\",\r\n        \"address2\": \"Address2\",\r\n        \"zipCode\": \"20250\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"FR\",\r\n        \"state\": \"Paris\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}_18@yahoo.fr\",\r\n        \"phone\": \"+0122674100\",\r\n        \"mobile\": \"+0139154716\"\r\n    },\r\n    \"language\": \"FRA\",\r\n    \"terminationReason\": \"TERM_REASON_1\",\r\n    \"subscriptionDate\": \"2016-02-01\",\r\n    \"terminationDate\": \"2016-05-01\",\r\n    \"customerCategory\": \"CLIENT\",\r\n    \"customerBrand\": \"DEFAULT\",\r\n    \"mandateIdentification\": \"M1\",\r\n    \"mandateDate\": \"2016-04-01\",\r\n    \"currency\": \"EUR\",\r\n    \"caStatus\": \"ACTIVE\",\r\n    \"creditCategory\": \"VIP\",\r\n    \"dateStatus\": \"2016-04-01\",\r\n    \"dateDunningLevel\": \"2016-04-04\",\r\n    \"dunningLevel\": \"R0\",\r\n    \"billingCycle\": \"CYC_INV_MT_1\",\r\n    \"seller\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\r\n    \"country\": \"FR\",\r\n    \"nextInvoiceDate\": \"2016-05-01\",\r\n    \"electronicBilling\": \"true\",\r\n    \"baStatus\": \"ACTIVE\",\r\n    \"email\": \"{{entityPrefix}}_18@yahoo.fr\",\r\n    \"uaStatus\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/{{entityPrefix}}_{{index}}_CRM-CUST",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"{{entityPrefix}}_{{index}}_CRM-CUST"
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "60c00fd0-2f28-4936-9253-023d086d56d0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Offer templates",
							"item": [
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "99668f05-8973-4b14-a245-540f7d527056",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "List offerTemplates - show all",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5fa1fc87-186d-484c-a2ad-2cd0f80886d6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Body contains offer templates\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_NOSELLER\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_A\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_B\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_C\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/list?limit=500",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"list"
											],
											"query": [
												{
													"key": "limit",
													"value": "500"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_A only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7b8b9f23-bc32-45fe-953a-974daed34c4a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"username\": \"opencell.admin\",\r\n    \"password\": \"opencell.admin\",\r\n    \"email\": \"meveo.admin@opencellsoft.com\",\r\n    \"userRole\": [\r\n        \"administrateur\"\r\n    ],\r\n    \"accessibleEntity\": [\r\n        {\r\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_A\",\r\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\r\n        }\r\n    ],\r\n    \"firstName\": \"meveo\",\r\n    \"lastName\": \"admin\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "List offerTemplates - show A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "45c6e21b-1e5e-4772-9bdc-840e35ba0508",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Body contains offer templates\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_NOSELLER\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_A\\\"\");",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_B\\\"\");",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_C\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/list?limit=500",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"list"
											],
											"query": [
												{
													"key": "limit",
													"value": "500"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - no seller",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "56800a41-d0e0-436f-b7d6-debfb818c7ef",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.offerTemplate.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.offerTemplate.name).to.deep.equal(jsonBody.name);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_NOSELLER\",\n    \"name\": \"{{entityPrefix}}_{{index}}_OFFER_NOSELLER\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_NOSELLER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_NOSELLER"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a3d3b6f-d13a-4d38-a6c4-9fac87af4be0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.offerTemplate.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.offerTemplate.name).to.deep.equal(jsonBody.name);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_A\",\n    \"name\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_A\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - B fails",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "343f96c4-8149-4cd7-ad26-38ded8c34262",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_B only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "97ac55b3-5d02-499d-a836-493ea2e3cc92",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_B\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "List offerTemplates - show B and C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "57f388dd-1e4e-438e-bccd-32ab09d16acf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Body contains offer templates\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_NOSELLER\\\"\");",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_A\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_B\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_C\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/list?limit=500",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"list"
											],
											"query": [
												{
													"key": "limit",
													"value": "500"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - B 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cfeef586-424c-41ea-a845-145d18c47418",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.offerTemplate.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.offerTemplate.name).to.deep.equal(jsonBody.name);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_B\",\r\n    \"name\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_B\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b7f35210-e6cd-4b81-bbd8-bc65d3b5b517",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.offerTemplate.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.offerTemplate.name).to.deep.equal(jsonBody.name);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_C\",\r\n    \"name\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_C\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_C"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - A  fails",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "04997ab4-3334-469b-8b19-d4c84e5f6355",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Update User to Allow Access to SELLER_C only",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5c0516c2-1e68-4bd4-a6d2-806cda92be9e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"accessibleEntity\": [\n        {\n            \"code\": \"{{entityPrefix}}_{{index}}_SELLER_C\",\n            \"entityClass\": \"org.meveo.model.admin.Seller\"\n        }\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "List offerTemplates - show C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "51d476b5-5a2e-498d-8657-63a4bcb3118e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Body contains offer templates\", function () {",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_NOSELLER\\\"\");",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_A\\\"\");",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_B\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_C\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/list?limit=500",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"list"
											],
											"query": [
												{
													"key": "limit",
													"value": "500"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - C 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "85d59d16-c263-4348-8019-25646a7579ae",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.offerTemplate.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.offerTemplate.name).to.deep.equal(jsonBody.name);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_C\",\r\n    \"name\": \"{{entityPrefix}}_{{index}}_OFFER_SELLER_C\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_C"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - A  fails 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "189462a7-0665-48f9-a556-635cd0da9a1b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find offerTemplate - B fails 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "070ed378-c33f-48aa-bace-c581a45afb65",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(401);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"AUTHENTICATION_AUTHORIZATION_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Access to entity details is not allowed.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate?offerTemplateCode={{entityPrefix}}_{{index}}_OFFER_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate"
											],
											"query": [
												{
													"key": "offerTemplateCode",
													"value": "{{entityPrefix}}_{{index}}_OFFER_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore User to default.",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c2c726d7-617e-4507-8af3-9a436e7d8790",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "List offerTemplates by filter - show only C and A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e8c457b6-bba9-408b-99ee-cc16612fbaa3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Body contains offer templates\", function () {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData.paging.totalNumberOfRecords).to.eql(3);",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_NOSELLER\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_A\\\"\");",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_B\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_C\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_D\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"filters\": {\r\n        \"inList sellers\": \"{{entityPrefix}}_{{index}}_SELLER_A,{{entityPrefix}}_{{index}}_SELLER_C\"\r\n    }\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/list",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"list"
											]
										}
									},
									"response": []
								},
								{
									"name": "List offerTemplates by filter - do not show C and A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b7815731-cd14-45a4-aab0-6c7375e2faba",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Body contains offer templates\", function () {",
													"    var jsonData = pm.response.json();",
													"",
													"    pm.expect(jsonData.paging.totalNumberOfRecords).to.eql(2);",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_NOSELLER\\\"\");",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_A\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_B\\\"\");",
													"    pm.expect(pm.response.text()).to.not.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_C\\\"\");",
													"    pm.expect(pm.response.text()).to.include(\"\\\"code\\\":\\\"\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_OFFER_SELLER_D\\\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"filters\": {\n        \"not-inList sellers\": \"{{entityPrefix}}_{{index}}_SELLER_A,{{entityPrefix}}_{{index}}_SELLER_C\",\n        \"like code\": \"{{entityPrefix}}_{{index}}_*\"\n    }\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/list",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"list"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Cleanup Data",
							"item": [
								{
									"name": "Set securedEntities=false",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0f06da38-916a-4d01-9b13-6e5bf6a7aa00",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"property\": \"secured.entities.enabled\",\n    \"value\": \"false\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Customer CUSTA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "176f2dd9-94f6-4b68-a129-444ff27b1041",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/{{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"{{entityPrefix}}_{{index}}_CUSTA"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Deleted Customer CUSTA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "40214139-c199-41ab-91a6-b4d49f70f36c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Customer with code=\" + pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_CUSTA does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTA",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTA"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Customer CUSTB",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1751cbbd-f1a3-42af-ba94-bf38d56cfc67",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer/{{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer",
												"{{entityPrefix}}_{{index}}_CUSTB"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find Deleted Customer CUSTB",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1431fe61-873b-46e8-8785-a05077d52f83",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Customer with code=\" + pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_CUSTB does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customer?customerCode={{entityPrefix}}_{{index}}_CUSTB",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customer"
											],
											"query": [
												{
													"key": "customerCode",
													"value": "{{entityPrefix}}_{{index}}_CUSTB"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove offerTemplate - no seller",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fdbb6c14-33e4-41d9-9798-f9de9f5b6927",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{entityPrefix}}_{{index}}_OFFER_NOSELLER",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{entityPrefix}}_{{index}}_OFFER_NOSELLER"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove offerTemplate - A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c5221b7e-908a-4cd6-8311-865374fe8320",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{entityPrefix}}_{{index}}_OFFER_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{entityPrefix}}_{{index}}_OFFER_SELLER_A"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove offerTemplate - B",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "a1cd84ae-6ffa-4f13-87f4-3077baeab1a9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{entityPrefix}}_{{index}}_OFFER_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{entityPrefix}}_{{index}}_OFFER_SELLER_B"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove offerTemplate - C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0e540e74-9d89-44fc-8ce8-14f7b0e48d16",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{entityPrefix}}_{{index}}_OFFER_SELLER_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{entityPrefix}}_{{index}}_OFFER_SELLER_C"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove offerTemplate - D",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "10a91f4c-e8ac-4d3f-a739-4f3d16815cbf",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/catalog/offerTemplate/{{entityPrefix}}_{{index}}_OFFER_SELLER_D",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"catalog",
												"offerTemplate",
												"{{entityPrefix}}_{{index}}_OFFER_SELLER_D"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Seller SELLER_A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5f95d5fe-2681-476f-8023-fe8d51ef4e72",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/{{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"{{entityPrefix}}_{{index}}_SELLER_A"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find deleted Seller SELLER_A",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bdf8f7d8-a366-4eb7-9f09-817330cdd4de",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Seller with code=\" + pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SELLER_A does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_A",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_A"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Seller SELLER_C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c3a7f2fe-20e7-49bd-8c50-356cede71a94",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/{{entityPrefix}}_{{index}}_SELLER_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"{{entityPrefix}}_{{index}}_SELLER_C"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete Seller SELLER_B",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "37e4ec53-976b-42cd-bf53-df6441675915",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller/{{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller",
												"{{entityPrefix}}_{{index}}_SELLER_B"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find deleted Seller SELLER_B",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "132ed147-5f33-4d79-aa0a-5cf87bd2757e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Seller with code=\" + pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SELLER_B does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sellerCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_B",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_B"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find deleted Seller SELLER_C",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e7710001-a030-4eb1-a40a-90d1e5efed8a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"Seller with code=\" + pm.environment.get(\"entityPrefix\") + \"_\" + pm.globals.get(\"index\") + \"_SELLER_C does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"sellerCode\": \"{{entityPrefix}}_{{index}}_SELLER_B\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/seller?sellerCode={{entityPrefix}}_{{index}}_SELLER_C",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"seller"
											],
											"query": [
												{
													"key": "sellerCode",
													"value": "{{entityPrefix}}_{{index}}_SELLER_C"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Restore User to default",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6e8cd2e4-f8d2-4d81-be46-413284d07d25",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"opencell.admin\",\n    \"password\": \"opencell.admin\",\n    \"email\": \"meveo.admin@opencellsoft.com\",\n    \"userRole\": [\n        \"administrateur\"\n    ],\n    \"firstName\": \"meveo\",\n    \"lastName\": \"admin\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete User level 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "283a3ac7-e649-45d5-a77e-72b107b9d5c4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level1\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user/{{entityPrefix}}_{{index}}_Username.Level1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user",
												"{{entityPrefix}}_{{index}}_Username.Level1"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete User level 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "36201be5-8859-4992-89ba-5a88dd1b1822",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level2\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user/{{entityPrefix}}_{{index}}_Username.Level2",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user",
												"{{entityPrefix}}_{{index}}_Username.Level2"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete User level 2.1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cfcfb453-c590-46d1-badc-131fff233e6d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql()",
													"    ;",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level21\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user/{{entityPrefix}}_{{index}}_Username.Level21",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user",
												"{{entityPrefix}}_{{index}}_Username.Level21"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete User level 2.2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f846c416-a992-4639-8ee2-d37b28e3fd8e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level22\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user/{{entityPrefix}}_{{index}}_Username.Level22",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user",
												"{{entityPrefix}}_{{index}}_Username.Level22"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete User level 3",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "26e692ac-23ab-4c6d-a0e2-6312827c44a2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"username\": \"{{entityPrefix}}_{{index}}_Username.Level3\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/user/{{entityPrefix}}_{{index}}_Username.Level3",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"user",
												"{{entityPrefix}}_{{index}}_Username.Level3"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove UserHierarchyLevel 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e349c6ce-1ad3-4b8f-9d24-74db67991bc7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"hierarchyLevelCode\": \"{{entityPrefix}}_{{index}}_LEVEL_1\"\n}\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/hierarchy/userGroupLevel/{{entityPrefix}}_{{index}}_LEVEL_1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"hierarchy",
												"userGroupLevel",
												"{{entityPrefix}}_{{index}}_LEVEL_1"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "47d39502-a91f-4060-b0bc-489ff072ffec",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 34);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "2b14b089-3065-49d1-ab55-746f0a43f2c0",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Workflow executions",
					"item": [
						{
							"name": "Test data",
							"item": [
								{
									"name": "Create customer account for WF",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "eb7926db-53da-4fed-97b3-e3577e18fb2b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{entityPrefix}}_{{index}}_WF_CA\",\r\n    \"description\": \"testWF_CA\",\r\n    \"externalRef1\": \"EXTREF1\",\r\n    \"externalRef2\": \"EXTREF2\",\r\n    \"name\": {\r\n        \"title\": \"MR\",\r\n        \"firstName\": \"firstname\",\r\n        \"lastName\": \"lastname\"\r\n    },\r\n    \"address\": {\r\n        \"address1\": \"adress1\",\r\n        \"address2\": \"address2\",\r\n        \"address3\": \"adress3\",\r\n        \"zipCode\": \"21000\",\r\n        \"city\": \"Dijon\",\r\n        \"country\": \"France\"\r\n    },\r\n    \"contactInformation\": {\r\n        \"email\": \"{{entityPrefix}}@manaty.net\",\r\n        \"phone\": \"00123456789\",\r\n        \"mobile\": \"092152154716\"\r\n    },\r\n    \"mandateIdentification\": \"1234569548\",\r\n    \"mandateDate\": \"2016-03-10\",\r\n    \"customer\": \"{{baseEntityPrefix}}_CUST\",\r\n    \"currency\": \"EUR\",\r\n    \"language\": \"FRA\",\r\n    \"creditCategory\": \"Pro\",\r\n    \"status\": \"ACTIVE\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/customerAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"customerAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create ScriptInstance for Action",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "17388f33-4e3c-42b9-a016-f420980778e4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"org.meveo.service.script.TheAction\",\r\n    \"description\": \"The Action Script\",\r\n    \"type\": \"JAVA\",\r\n    \"script\": \"package org.meveo.service.script;\\nimport java.util.Map;\\nimport java.math.BigDecimal;\\nimport org.meveo.admin.exception.BusinessException;\\nimport org.meveo.model.admin.User;\\nimport org.meveo.model.crm.Provider;\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\npublic class TheAction extends Script {  \\n  private static final Logger log = LoggerFactory.getLogger(TheAction.class);\\npublic void execute(Map<String,Object> context) throws BusinessException{\\nlog.debug(\\\"\\\\nTheAction Execution\\\\n\\\");\\ncontext.put(Script.RESULT_VALUE, \\\"A string response\\\");\\n}\\n}\",\r\n    \"executionRoles\": [\r\n        {\r\n            \"name\": \"administrateur\"\r\n        }\r\n    ],\r\n    \"sourcingRoles\": [\r\n        {\r\n            \"name\": \"administrateur\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Dunning WFType Script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "739d31f2-b056-43f3-ab14-d0e52e77a7b3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"org.meveo.service.script.DunningWFTypeScript\",\r\n    \"description\": \"DunningWFTypeScript\",\r\n    \"type\": \"JAVA\",\r\n    \"script\": \"package org.meveo.service.script;\\n\\nimport java.util.ArrayList;\\nimport java.util.Date;\\nimport java.util.List;\\n\\nimport org.meveo.model.admin.User;\\nimport org.meveo.model.payments.CustomerAccount;\\nimport org.meveo.model.payments.DunningLevelEnum;\\nimport org.meveo.service.script.wf.WFTypeScript;\\n\\n\\npublic class DunningWFTypeScript extends WFTypeScript<CustomerAccount>{\\n\\n  public DunningWFTypeScript() {    \\n  }\\n  \\n  public DunningWFTypeScript(CustomerAccount e) {\\n    super(e);\\n  }\\n  @Override\\n  public List<String> getStatusList() {    \\n    List<String> values = new ArrayList<String>();\\n    for (DunningLevelEnum dunningLevelEnum : DunningLevelEnum.values()) {\\n      values.add(dunningLevelEnum.name());\\n    }\\n    return values;\\n  }\\n\\n  @Override\\n  public void changeStatus(String newStatus) {\\n    entity.setDunningLevel(DunningLevelEnum.valueOf(newStatus));\\n    entity.setDateDunningLevel(new Date());\\n  }\\n\\n  @Override\\n  public String getActualStatus() {    \\n    return entity.getDunningLevel().name();\\n  }\\n}\",\r\n    \"executionRoles\": [\r\n        {\r\n            \"name\": \"administrateur\"\r\n        }\r\n    ],\r\n    \"sourcingRoles\": [\r\n        {\r\n            \"name\": \"administrateur\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Workflow with natif WFType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7944025f-e083-4be8-8b62-5a4983d495ce",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_DunningWorkflow\",\r\n    \"description\": \"Dunning workflow from class\",\r\n    \"enableHistory\": \"true\",\r\n    \"targetEntityClass\": \"org.meveo.admin.wf.types.DunningWF\",\r\n    \"initStatus\": \"R0\",\r\n    \"transition\": [\r\n        {\r\n            \"fromStatus\": \"R0\",\r\n            \"toStatus\": \"R1\",\r\n            \"conditionEl\": \"#{true}\",\r\n            \"description\": \"DESCRIPTION to R1\",\r\n            \"actionScriptCode\": \"#{mv:executeScript(entity,\\\"org.meveo.service.script.TheAction\\\",null)}\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/admin/genericWorkflow/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"admin",
												"genericWorkflow",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Workflow with runTime WFType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ef45ce1-50b0-43d5-96e6-975a53f45316",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"code\": \"{{baseEntityPrefix}}_DunningRunTimeWF\",\r\n    \"description\": \"Dunning workflow from script\",\r\n    \"enableHistory\": \"true\",\r\n    \"targetEntityClass\": \"org.meveo.service.script.DunningWFTypeScript\",\r\n    \"initStatus\": \"R0\",\r\n    \"transition\": [\r\n        {\r\n            \"fromStatus\": \"R1\",\r\n            \"toStatus\": \"R2\",\r\n            \"conditionEl\": \"#{true}\",\r\n            \"description\": \"DESCRIPTION to R2\",\r\n            \"actionScriptCode\": \"#{mv:executeScript(entity,\\\"org.meveo.service.script.TheAction\\\",null)}\"\r\n        }\r\n    ]\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/admin/genericWorkflow/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"admin",
												"genericWorkflow",
												"createOrUpdate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "find & execute",
							"item": [
								{
									"name": "find workflow by entity",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "08f10eec-4091-497e-bdf7-fb03c4859d96",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/admin/genericWorkflow/findByEntity?baseEntityName=org.meveo.model.payments.CustomerAccount",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"admin",
												"genericWorkflow",
												"findByEntity"
											],
											"query": [
												{
													"key": "baseEntityName",
													"value": "org.meveo.model.payments.CustomerAccount"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Execute WF - NatitType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6488e0ab-3997-4de1-9284-5d4ace2f4c0a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"baseEntityName\": \"org.meveo.model.payments.CustomerAccount\",\r\n    \"entityInstanceCode\": \"{{entityPrefix}}_{{index}}_WF_CA\",\r\n    \"workflowCode\": \"{{baseEntityPrefix}}_DunningWorkflow\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/admin/genericWorkflow/execute?baseEntityName=org.meveo.model.payments.CustomerAccount&entityInstanceCode={{entityPrefix}}_{{index}}_WF_CA&workflowCode={{baseEntityPrefix}}_DunningWorkflow",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"admin",
												"genericWorkflow",
												"execute"
											],
											"query": [
												{
													"key": "baseEntityName",
													"value": "org.meveo.model.payments.CustomerAccount"
												},
												{
													"key": "entityInstanceCode",
													"value": "{{entityPrefix}}_{{index}}_WF_CA"
												},
												{
													"key": "workflowCode",
													"value": "{{baseEntityPrefix}}_DunningWorkflow"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Execute WF - scriptType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f6e589d0-dbc7-4be2-9e0b-83c52e3dfcbc",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"baseEntityName\": \"org.meveo.model.payments.CustomerAccount\",\r\n    \"entityInstanceCode\": \"{{entityPrefix}}_{{index}}_WF_CA\",\r\n    \"workflowCode\": \"{{baseEntityPrefix}}_DunningRunTimeWF\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/admin/genericWorkflow/execute?baseEntityName=org.meveo.model.payments.CustomerAccount&entityInstanceCode={{entityPrefix}}_{{index}}_WF_CA&workflowCode={{baseEntityPrefix}}_DunningRunTimeWF",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"admin",
												"genericWorkflow",
												"execute"
											],
											"query": [
												{
													"key": "baseEntityName",
													"value": "org.meveo.model.payments.CustomerAccount"
												},
												{
													"key": "entityInstanceCode",
													"value": "{{entityPrefix}}_{{index}}_WF_CA"
												},
												{
													"key": "workflowCode",
													"value": "{{baseEntityPrefix}}_DunningRunTimeWF"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "wf history",
							"item": [
								{
									"name": "findHistory-no criteria",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c1761ce3-1571-4353-9f7a-77d41df23036",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/admin/genericWorkflow/history",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"admin",
												"genericWorkflow",
												"history"
											]
										}
									},
									"response": []
								},
								{
									"name": "findHistory-with criteria",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "93a9e98e-eec7-4640-b2ca-9fd941977a4d",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"entityInstanceCode\": \"{{entityPrefix}}_{{index}}_WF_CA\",\r\n    \"fromStatus\": \"R1\",\r\n    \"toStatus\": \"R2\"\r\n}\r\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/admin/genericWorkflow/history?entityInstanceCode=RS_FULL_{{index}}_WF_CA&fromStatus=R1&toStatus=R2",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"admin",
												"genericWorkflow",
												"history"
											],
											"query": [
												{
													"key": "entityInstanceCode",
													"value": "RS_FULL_{{index}}_WF_CA"
												},
												{
													"key": "fromStatus",
													"value": "R1"
												},
												{
													"key": "toStatus",
													"value": "R2"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "6916c4eb-34f0-4cea-9cdb-604270afde24",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 453);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "6502738d-3709-4bf4-80de-fcba7a6d0cd3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Filter search and invoicing",
					"item": [
						{
							"name": "Data model",
							"item": [
								{
									"name": "Create subscription",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7c2f2825-b0e4-4d8b-a0e0-05425d0a0a33",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_SUB_CHARGE\",\n    \"description\": \"{{entityPrefix}}_{{index}}_SUB\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER1\",\n    \"subscriptionDate\": \"2016-02-01\",\n    \"endAgreementDate\": \"2017-02-01\"\n  }\n",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate services",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bbd53b7d-13c0-4dcb-b6d6-60fd8f7b306b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{entityPrefix}}_{{index}}_SUB_CHARGE\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE1\",\n                \"quantity\": \"1\",\n                \"subscriptionDate\": \"2016-02-01\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create RatedTransactions Filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9d690739-7208-4096-b34e-aafe8c750a07",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterRT\",\n    \"description\": \"Rated transactions for invoicing test\",\n    \"shared\": \"false\",\n    \"inputXml\": \"<filter>\\n    <primarySelector>\\n    <targetEntity>org.meveo.model.billing.RatedTransaction</targetEntity>\\n    <alias>r</alias>\\n    <displayFields>\\n      <field>code</field>\\n      <field>description</field>\\n      <field>usageDate</field>\\n    </displayFields>\\n    <exportFields/>\\n    <ignoreIfNotFoundForeignKeys/>\\n  </primarySelector>\\n  <secondarySelectors/>\\n  <disabled>false</disabled>\\n  <appendGeneratedCode>false</appendGeneratedCode>\\n  <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n    <filterConditionType>COMPOSITE_AND</filterConditionType>\\n    <filterConditions>\\n        <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n            <filterConditionType>COMPOSITE_AND</filterConditionType>\\n            <filterConditions>\\n                  <primitiveFilterCondition>\\n                    <filterConditionType>PRIMITIVE</filterConditionType>\\n                    <fieldName>usageDate</fieldName>\\n                    <operator><![CDATA[<=]]></operator>\\n                    <operand>date:01/05/2016</operand>\\n                  </primitiveFilterCondition>\\n            </filterConditions>\\n        </filterCondition>\\n        <filterCondition class=\\\"andCompositeFilterCondition\\\">\\n            <filterConditionType>COMPOSITE_AND</filterConditionType>\\n            <filterConditions>\\n                <primitiveFilterCondition>\\n                    <filterConditionType>PRIMITIVE</filterConditionType>\\n                    <fieldName>code</fieldName>\\n                    <operator>=</operator>\\n                    <operand>{{baseEntityPrefix}}_REC1</operand>\\n                  </primitiveFilterCondition>\\n            </filterConditions>\\n        </filterCondition>\\n    </filterConditions>\\n  </filterCondition>\\n</filter>\"\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filter/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filter",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Rated Transaction Job",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3b59534-4b6e-4a7d-8c43-d4f0ab87b335",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"RT_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Search",
							"item": [
								{
									"name": "Search from filter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "6949890a-88e1-47d5-9aa1-e306e61cdf39",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Body matches string\", function () {",
													"    pm.expect(pm.response.text()).not.to.include(\"<code>\"+pm.environment.get(\"baseEntityPrefix\")+\"_OS1</code>\");",
													"    pm.expect(pm.response.text()).to.include(\"<code>\"+pm.environment.get(\"baseEntityPrefix\")+\"_REC1</code>\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_FilterRT\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/filteredList/listByFilter?from=0&size=100",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"filteredList",
												"listByFilter"
											],
											"query": [
												{
													"key": "from",
													"value": "0"
												},
												{
													"key": "size",
													"value": "100"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "a11d32bf-80a8-4d71-986b-d325231d4e77",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 456);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "f525d2d6-208b-4b72-8ee9-ba316cced437",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Jobs",
					"item": [
						{
							"name": "Job Reporting",
							"item": [
								{
									"name": "Execute 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5d9b007f-e4ff-4130-830d-fec34f718a92",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
													"});",
													"",
													"",
													"var jsonData = pm.response.json();",
													"pm.globals.set(\"job_id\", jsonData.actionStatus.message);"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"M_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								},
								{
									"name": "Execute 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3a17fb32-091c-435d-a2cc-94a5458d62f5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"M_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find by code",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "01460623-76f7-4844-844c-ea7503aa1c47",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.jobExecutionResultDto.jobInstanceCode).to.deep.equal(jsonBody.jobInstanceCode);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"jobInstanceCode\": \"M_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/jobReport?code=M_Job",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"jobReport"
											],
											"query": [
												{
													"key": "code",
													"value": "M_Job"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find by id",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "cfa57800-46e9-4af6-8e8f-66b517a992f9",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.jobExecutionResultDto.jobInstanceCode).to.deep.equal(jsonBody.jobInstanceCode);",
													"    pm.expect(jsonData.jobExecutionResultDto.id).to.deep.equal(jsonBody.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n\t\"id\": {{job_id}},\n\t\"jobInstanceCode\": \"M_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/jobReport?id={{job_id}}",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"jobReport"
											],
											"query": [
												{
													"key": "id",
													"value": "{{job_id}}"
												}
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "Reporting",
					"item": [
						{
							"name": "ReportExtract",
							"item": [
								{
									"name": "Create ScriptInstance",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3e3ee1b5-d750-4b77-af41-d22995ca9b36",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"org.meveo.service.script.finance.{{entityPrefix}}_{{index}}_RE_SCRIPT_1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_RE_SCRIPT_1\",\n    \"type\": \"JAVA\",\n    \"script\": \"package org.meveo.service.script.finance;\\n\\nimport java.io.File;\\nimport java.io.FileWriter;\\nimport java.text.DateFormat;\\nimport java.text.SimpleDateFormat;\\nimport java.util.List;\\nimport java.util.Map;\\n\\nimport org.meveo.admin.exception.BusinessException;\\nimport org.meveo.model.payments.AccountOperation;\\nimport org.meveo.model.payments.CustomerAccount;\\nimport org.meveo.model.payments.RecordedInvoice;\\nimport org.meveo.service.payments.impl.AccountOperationService;\\nimport org.meveo.service.script.Script;\\nimport org.meveo.service.script.finance.ReportExtractScript;\\nimport org.slf4j.Logger;\\nimport org.slf4j.LoggerFactory;\\nimport java.util.Date;\\n\\npublic class {{entityPrefix}}_{{index}}_RE_SCRIPT_1 extends ReportExtractScript {\\n\\n    private static final Logger LOGGER = LoggerFactory.getLogger({{entityPrefix}}_{{index}}_RE_SCRIPT_1.class);\\n\\n    private AccountOperationService accountOperationService = (AccountOperationService) getServiceInterface(AccountOperationService.class.getSimpleName());\\n\\n\\n    @Override\\n    public void execute(Map<String, Object> initContext) throws BusinessException {\\n        try {\\n            LOGGER.debug(\\\"#####################Starting of script {{entityPrefix}}_{{index}}_RE_SCRIPT_1\\\");\\n    \\n            // Get transaction start and end date\\n            Date startDate = (Date) initContext.get(ReportExtractScript.START_DATE);    \\n            Date endDate = (Date) initContext.get(ReportExtractScript.END_DATE);\\n            DateFormat df = new SimpleDateFormat(\\\"yyyy-MM-dd\\\");\\n             \\n            List<AccountOperation> accountOperations = accountOperationService.list();\\n            //create export file\\n            String exportDir = String.valueOf(initContext.get(ReportExtractScript.DIR));\\n            File dir = new File(exportDir);\\n            if (!dir.exists()) {\\n                dir.mkdirs();\\n            }\\n            CustomerAccount customerAccount = null;\\n            StringBuilder sb =new StringBuilder();\\n            sb.append(\\\"Transaction Date;Transaction Type;Amount;Due Date;Reference;Transaction Category;Invoice Date;\\\"\\n                    + \\\"Customer Account Code;Customer Account Description\\\\n\\\");\\n            for (AccountOperation accountOperation : accountOperations) { \\n                if(accountOperation.getTransactionDate().equals(startDate) || accountOperation.getTransactionDate().equals(endDate)\\n                        || (accountOperation.getTransactionDate().after(startDate) && accountOperation.getTransactionDate().before(endDate))) {\\n                    \\n                    customerAccount = accountOperation.getCustomerAccount();\\n                    sb.append(nil(accountOperation.getTransactionDate().toString())+ \\\";\\\");\\n                    sb.append(nil(accountOperation.getType()) + \\\";\\\");\\n                    sb.append(nil(accountOperation.getAmount().toString()) + \\\";\\\");\\n                    sb.append(isNull(accountOperation.getDueDate()) + \\\";\\\");\\n                    sb.append(nil(accountOperation.getReference()) + \\\";\\\");\\n                    sb.append(nil(accountOperation.getTransactionCategory().toString()) + \\\";\\\");\\n                    if(accountOperation instanceof RecordedInvoice) {\\n                        RecordedInvoice invoice = (RecordedInvoice) accountOperation;\\n                        sb.append(invoice.getInvoiceDate().toString() + \\\";\\\");\\n                    } else {\\n                        sb.append(\\\";\\\");\\n                    }\\n                    sb.append(nil(customerAccount.getCode()) + \\\";\\\");\\n                    sb.append(nil(customerAccount.getDescriptionOrCode()) + \\\";\\\\n\\\");\\n\\n                    \\n                }\\n            }\\n              String strFilename = String.valueOf(initContext.get({{entityPrefix}}_{{index}}_RE_SCRIPT_1.FILENAME));\\n              LOGGER.debug(\\\"output={}\\\", strFilename);\\n            File file = new File(dir + File.separator + strFilename);\\n            file.createNewFile();\\n            FileWriter fileWriter = new FileWriter(file);\\n            fileWriter.write(sb.toString());\\n            fileWriter.close();\\n            \\n            LOGGER.debug(\\\"#####################Ending of script {{entityPrefix}}_{{index}}_RE_SCRIPT_1\\\");\\n        } catch (Exception e) {\\n            LOGGER.error(\\\"Exception:\\\", e);\\n            throw new BusinessException(e.getMessage());\\n        }\\n        \\n    }\\n  \\n  private String isNull(Object obj) {\\n    if(obj == null) {\\n      return \\\"\\\";\\n    } else {\\n      return obj.toString();\\n    }\\n  }\\n  \\n    private String nil(String word) {\\n        if (word == null || \\\"null\\\".equalsIgnoreCase(word)) {\\n            return \\\"\\\";\\n        } else {\\n            return word;\\n        }\\n    }\\n}\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate - SQL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d9d47d29-9829-45d4-88fc-23aeba43d294",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RE_SQL_1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_RE_SQL_1\",\n    \"scriptType\": \"SQL\",\n    \"filenameFormat\": \"#{re.category}_accounts-[yyyy_MM_dd].csv\",\n    \"outputDir\": \"reports/accounts\",\n    \"category\": \"accounts\",\n    \"sqlQuery\": \"select code, description from ${dbSchema}account_entity where :START_DATE<>:END_DATE\",\n    \"params\": {\n        \"START_DATE\": \"31/01/2017\",\n        \"END_DATE\": \"31/12/2018\"\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/finance/reportExtracts/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"finance",
												"reportExtracts",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "CreateOrUpdate - JAVA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4503161a-1719-4c7a-8366-78f95de23a21",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RE_JAVA_1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_RE_JAVA_1\",\n    \"scriptType\": \"JAVA\",\n    \"filenameFormat\": \"accounts-ops-[yyyy_MM_dd].csv\",\n    \"outputDir\": \"reports/accounts\",\n    \"category\": \"accounts\",\n    \"scriptInstanceCode\": \"org.meveo.service.script.finance.{{entityPrefix}}_{{index}}_RE_SCRIPT_1\",\n    \"params\": {\n        \"START_DATE\": \"31/01/2017\",\n        \"END_DATE\": \"31/12/2018\"\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/finance/reportExtracts/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"finance",
												"reportExtracts",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Run - SQL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "296527ca-0c1d-4b2a-bbcc-69fdaba82d67",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RE_SQL_1\",\n    \"params\": {\n        \"START_DATE\": \"31/01/2017\",\n        \"END_DATE\": \"31/12/2018\"\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/finance/reportExtracts/run",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"finance",
												"reportExtracts",
												"run"
											]
										}
									},
									"response": []
								},
								{
									"name": "Run - JAVA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "299c0d7d-f7f0-4779-8b00-087b3e5d11c8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RE_JAVA_1\",\n    \"params\": {\n        \"START_DATE\": \"31/01/2017\",\n        \"END_DATE\": \"31/12/2018\"\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/finance/reportExtracts/run",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"finance",
												"reportExtracts",
												"run"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find - SQL 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ba7a6a4c-c305-42ae-a87f-ba2f1f0612b4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.reportExtract.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.reportExtract.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.reportExtract.params).to.deep.equal(jsonBody.params);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RE_SQL_1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_RE_SQL_1\",\n    \"params\": {\n        \"START_DATE\": \"31/01/2017\",\n        \"END_DATE\": \"31/12/2018\"\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/finance/reportExtracts?reportExtractCode={{entityPrefix}}_{{index}}_RE_SQL_1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"finance",
												"reportExtracts"
											],
											"query": [
												{
													"key": "reportExtractCode",
													"value": "{{entityPrefix}}_{{index}}_RE_SQL_1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find - JAVA 1",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fde70164-9737-43d0-a28f-839564937b85",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});",
													"",
													"",
													"pm.test(request.name + \" - Check Data\", function () {",
													"    var jsonData = pm.response.json();",
													"    var jsonBody = JSON.parse(pm.request.body);",
													"",
													"    pm.expect(jsonData.reportExtract.code).to.deep.equal(jsonBody.code);",
													"    pm.expect(jsonData.reportExtract.description).to.deep.equal(jsonBody.description);",
													"    pm.expect(jsonData.reportExtract.params).to.deep.equal(jsonBody.params);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_RE_JAVA_1\",\n    \"description\": \"{{entityPrefix}}_{{index}}_RE_JAVA_1\",\n    \"params\": {\n        \"START_DATE\": \"31/01/2017\",\n        \"END_DATE\": \"31/12/2018\"\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/finance/reportExtracts?reportExtractCode={{entityPrefix}}_{{index}}_RE_JAVA_1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"finance",
												"reportExtracts"
											],
											"query": [
												{
													"key": "reportExtractCode",
													"value": "{{entityPrefix}}_{{index}}_RE_JAVA_1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove - SQL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dbb3f571-f6ff-496d-aaa0-b5d463dee3c1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{entityPrefix}}_{{index}}_RE_SQL_1",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/finance/reportExtracts",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"finance",
												"reportExtracts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Remove - JAVA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b682e1fc-f8e0-4c9e-99b7-dfe074076e67",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{{entityPrefix}}_{{index}}_RE_JAVA_1",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/finance/reportExtracts",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"finance",
												"reportExtracts"
											]
										}
									},
									"response": []
								},
								{
									"name": "Find - SQL",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "43e09f22-d787-410e-9e2a-54d94798d36f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ReportExtract with code=\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_RE_SQL_1 does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/finance/reportExtracts?reportExtractCode={{entityPrefix}}_{{index}}_RE_SQL_1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"finance",
												"reportExtracts"
											],
											"query": [
												{
													"key": "reportExtractCode",
													"value": "{{entityPrefix}}_{{index}}_RE_SQL_1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Find - JAVA",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "be18a437-d2da-434c-8e1a-9d52ee9dd252",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(404);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"FAIL\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql(\"ENTITY_DOES_NOT_EXISTS_EXCEPTION\");",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"ReportExtract with code=\"+pm.environment.get(\"entityPrefix\")+\"_\"+pm.globals.get(\"index\")+\"_RE_JAVA_1 does not exists.\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/finance/reportExtracts?reportExtractCode={{entityPrefix}}_{{index}}_RE_JAVA_1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"finance",
												"reportExtracts"
											],
											"query": [
												{
													"key": "reportExtractCode",
													"value": "{{entityPrefix}}_{{index}}_RE_JAVA_1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Job",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "9f660d55-f5ca-4b3a-adac-49d440a30496",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"RE_Job\",\n    \"jobTemplate\": \"ReportExtractJob\",\n    \"timerCode\": \"Monthly\",\n    \"jobCategory\": \"DWH\",\n    \"limitToSingleNode\": \"true\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/create",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Execute Job",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bd83795f-feff-49a6-b649-039e1d271716",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"RE_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete script",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b6e7988a-6d1c-42b3-9849-a125673d1aff",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/scriptInstance/org.meveo.service.script.finance.{{entityPrefix}}_{{index}}_RE_SCRIPT_1",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"scriptInstance",
												"org.meveo.service.script.finance.{{entityPrefix}}_{{index}}_RE_SCRIPT_1"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "3b7efcaf-64bc-4d28-8c78-39ff5219e4a2",
								"type": "text/javascript",
								"exec": [
									"pm.globals.set(\"index\", 339);"
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "806e2679-51b4-4f9b-b132-724a19e4a239",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				},
				{
					"name": "GDPR Erasure",
					"item": [
						{
							"name": "Account operations",
							"item": [
								{
									"name": "Create BillingCycle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4d2d0b8c-5b64-481d-892e-5eba745fb7e0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"CYC_INV_MT_GDPR_AO_{{index}}\",\n    \"description\": \"Monthly Invoice Cycle GDPR AO {{index}}\",\n    \"transactionDateDelay\": \"0\",\n    \"invoiceDateProductionDelay\": \"0\",\n    \"dueDateDelay\": \"2\",\n    \"invoiceDateDelay\": \"4\",\n    \"calendar\": \"MONTHLY\",\n    \"invoiceTypeCode\": \"COM\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Customer",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f0ac0d45-b1d4-477e-a41c-be01ca09167f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"crmAccountType\": \"C_UA\",\n    \"crmParentCode\": \"SELLER_FR\",\n    \"code\": \"GDPR_{{index}}\",\n    \"description\": \"Name\",\n    \"name\": {\n        \"title\": \"MR\",\n        \"firstName\": \"Edward\",\n        \"lastName\": \"Legaspi\"\n    },\n    \"address\": {\n        \"address1\": \"14 rue Crespin du Gast\",\n        \"zipCode\": \"75011\",\n        \"city\": \"PARIS\",\n        \"state\": \"Paris Area\",\n        \"country\": \"FR\"\n    },\n    \"email\": \"edward.legaspi@opencellsoft.com\",\n    \"language\": \"FRA\",\n    \"customerCategory\": \"CLIENT\",\n    \"customerBrand\": \"DEFAULT\",\n    \"currency\": \"EUR\",\n    \"billingCycle\": \"CYC_INV_MT_GDPR_AO_{{index}}\",\n    \"country\": \"FR\",\n    \"electronicBilling\": \"true\",\n    \"contactInformation\": {\n        \"email\": \"edward.legaspi@opencellsoft.com\"\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/accountHierarchy/createOrUpdateCRMAccountHierarchy",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"accountHierarchy",
												"createOrUpdateCRMAccountHierarchy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Created sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "852c23fc-5a7a-4f0d-a252-453fd51710a7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_{{index}}_GDPR_AO_SUB\",\n    \"description\": \"{{baseEntityPrefix}}_{{index}}_GDPR_AO_SUB\",\n    \"userAccount\": \"GDPR_{{index}}\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\n    \"subscriptionDate\": \"2007-10-13\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate service",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "64a7aebd-78bb-437c-8e03-4ab26c8d5a2a",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{baseEntityPrefix}}_{{index}}_GDPR_AO_SUB\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\",\n                \"subscriptionDate\": \"2007-10-13\",\n                \"quantity\": \"1\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Run RT",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e9d5d26b-5ee3-4931-abba-f6a8262d958f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"RT_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Previous Invoice old",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e947a134-ae42-43ab-8a7a-f8b499c6f16e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"targetCode\": \"GDPR_{{index}}\",\n    \"targetType\": \"BILLINGACCOUNT\",\n    \"invoicingDate\": \"2007-11-01\",\n    \"generateXML\": \"true\",\n    \"generatePDF\": \"true\",\n    \"generateAO\": \"true\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoice/generateInvoice",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoice",
												"generateInvoice"
											]
										}
									},
									"response": []
								},
								{
									"name": "Payment for Invoice old",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c302769-0f35-40fe-ab3e-faa6779383fb",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customerAccount\": \"GDPR_{{index}}\",\n    \"description\": \"Payment for ${#TestSuite#invoice1_number}\",\n    \"amount\": \"1017.10\",\n    \"unMatchingAmount\": \"1017.10\",\n    \"dueDate\": \"2007-09-01\",\n    \"type\": \"OCC\",\n    \"transactionDate\": \"2007-10-15\",\n    \"transactionCategory\": \"CREDIT\",\n    \"reference\": \"INV-CLASSIC-000000001\",\n    \"accountCode\": \"651100000\",\n    \"accountCodeClientSide\": \"651100000\",\n    \"code\": \"RG_PLVT\",\n    \"otherCreditAndCharge\": {\n        \"operationDate\": \"2007-10-15\"\n    },\n    \"matchingStatus\": \"O\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/accountOperation",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"accountOperation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Created sub 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d39fe205-7283-47bd-b8a9-a39390340bff",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_{{index}}_GDPR_AO_SUB_NEW\",\n    \"description\": \"{{baseEntityPrefix}}_{{index}}_GDPR_AO_SUB_NEW\",\n    \"userAccount\": \"GDPR_{{index}}\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\n    \"subscriptionDate\": \"2017-10-13\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate service 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1f60650d-1648-4b6a-9fe5-c9540e777cc7",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{baseEntityPrefix}}_{{index}}_GDPR_AO_SUB_NEW\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\",\n                \"subscriptionDate\": \"2017-10-13\",\n                \"quantity\": \"1\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Run RT 2",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bee0cb86-c781-430d-b389-9265d6ea8203",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"RT_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								},
								{
									"name": "Generate Previous Invoice new",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5827d243-82a0-4795-8b8a-1b3d6d9055d3",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"targetCode\": \"GDPR_{{index}}\",\n    \"targetType\": \"BILLINGACCOUNT\",\n    \"invoicingDate\": \"2017-11-01\",\n    \"generateXML\": \"true\",\n    \"generatePDF\": \"true\",\n    \"generateAO\": \"true\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoice/generateInvoice",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoice",
												"generateInvoice"
											]
										}
									},
									"response": []
								},
								{
									"name": "Payment for Invoice new",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c0a6367b-7375-4b8c-b9e1-281c6abffc79",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customerAccount\": \"GDPR_{{index}}\",\n    \"description\": \"Payment for ${#TestSuite#invoice1_number}\",\n    \"amount\": \"1017.10\",\n    \"unMatchingAmount\": \"1017.10\",\n    \"dueDate\": \"2017-09-01\",\n    \"type\": \"OCC\",\n    \"transactionDate\": \"2017-10-15\",\n    \"transactionCategory\": \"CREDIT\",\n    \"reference\": \"INV-CLASSIC-000000001\",\n    \"accountCode\": \"651100000\",\n    \"accountCodeClientSide\": \"651100000\",\n    \"code\": \"RG_PLVT\",\n    \"otherCreditAndCharge\": {\n        \"operationDate\": \"2017-10-15\"\n    },\n    \"matchingStatus\": \"O\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/accountOperation",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"accountOperation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Undue payment 50",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "84b71c59-96ba-46fc-86e2-482d72337042",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"    pm.globals.set(\"undueRefundId\", jsonData.message);",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customerAccount\": \"GDPR_{{index}}\",\n    \"description\": \"Undue payment\",\n    \"amount\": \"50\",\n    \"unMatchingAmount\": \"50\",\n    \"type\": \"OCC\",\n    \"transactionDate\": \"2007-09-30\",\n    \"transactionCategory\": \"CREDIT\",\n    \"reference\": \"NO_REF\",\n    \"code\": \"RG_CHQ\",\n    \"otherCreditAndCharge\": {\n        \"operationDate\": \"2007-09-30\"\n    },\n    \"matchingStatus\": \"O\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/accountOperation",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"accountOperation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Refund 50",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "381f4594-49b8-4f78-b56e-4544c70738dd",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"    pm.globals.set(\"unduePaymentId\", jsonData.message);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customerAccount\": \"GDPR_{{index}}\",\n    \"description\": \"Refund undue payment\",\n    \"amount\": \"50\",\n    \"unMatchingAmount\": \"50\",\n    \"type\": \"OCC\",\n    \"transactionDate\": \"2007-10-31\",\n    \"transactionCategory\": \"DEBIT\",\n    \"reference\": \"NO_REF\",\n    \"code\": \"RG_CHQ\",\n    \"otherCreditAndCharge\": {\n        \"operationDate\": \"2007-10-31\"\n    },\n    \"matchingStatus\": \"O\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/accountOperation",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"accountOperation"
											]
										}
									},
									"response": []
								},
								{
									"name": "Match Undue payment and Refund",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "d56515f9-3879-4640-9c31-9a37c486598f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"customerAccountCode\": \"GDPR_{{index}}\",\n    \"accountOperations\": {\n        \"accountOperation\": [\n            {\n                \"id\": {{unduePaymentId}}\n            },\n            {\n                \"id\": {{undueRefundId}}\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/accountOperation/matchOperations",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"accountOperation",
												"matchOperations"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Subscription",
							"item": [
								{
									"name": "Created sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8151b1a9-f438-4319-9207-f9596d404819",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_CREATED\",\n    \"description\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_CREATED\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\n    \"subscriptionDate\": \"2007-10-13\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Active sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "832d46e6-bf2e-475b-a6fd-79390401abf4",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_ACTIVE\",\n    \"description\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_ACTIVE\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\n    \"subscriptionDate\": \"2007-10-13\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate service",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dcd1f234-615e-46bb-a269-38c05294c130",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_ACTIVE\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\",\n                \"subscriptionDate\": \"2007-10-13\",\n                \"quantity\": \"1\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Suspended sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "c8cdabdb-4977-41ad-ad54-9ee32d2b2c49",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_SUSPENDED\",\n    \"description\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_SUSPENDED\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\n    \"subscriptionDate\": \"2007-10-13\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create access to suspended sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "4cb7bef0-9f60-4be7-bf3d-9420d2c3ced6",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_SUSPENDED_ACCESS\",\n    \"subscription\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_SUSPENDED\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/access",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"access"
											]
										}
									},
									"response": []
								},
								{
									"name": "Suspend sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b81e8f3a-95f1-4d51-8fe3-2153cb80c124",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscriptionCode\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_SUSPENDED\",\n    \"actionDate\": \"2017-10-13\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/suspend",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"suspend"
											]
										}
									},
									"response": []
								},
								{
									"name": "Resiliated sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e6424ff0-8994-4738-bdea-8d4c864bbf60",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_RESILIATED\",\n    \"description\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_RESILIATED\",\n    \"userAccount\": \"{{baseEntityPrefix}}_UA_3\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\n    \"subscriptionDate\": \"2007-10-13\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Activate service - Resiliated",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b20c9b28-b6dd-4d9b-a546-49e6aaf63d35",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscription\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_RESILIATED\",\n    \"servicesToActivate\": {\n        \"service\": [\n            {\n                \"code\": \"{{baseEntityPrefix}}_SERVICE3\",\n                \"subscriptionDate\": \"2007-10-13\",\n                \"quantity\": \"1\"\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/activateServices",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"activateServices"
											]
										}
									},
									"response": []
								},
								{
									"name": "Resiliate sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "bf9acd5b-79b9-4810-9e14-7eff4fa3bf1c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"subscriptionCode\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_RESILIATED\",\n    \"terminationReason\": \"TERM_REASON_3\",\n    \"terminationDate\": \"2017-10-13\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/terminate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"terminate"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Order",
							"item": [
								{
									"name": "Create old order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "00c0425e-22aa-44e7-af3a-2da318cd4eb8",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"{{entityPrefix}}_{{index}}_ORDER_OLD\",\n    \"orderDate\": \"2007-10-13T15:50:48+08:00\",\n    \"billingCycle\": \"CYC_INV_MT_3\",\n    \"orderItem\": [\n        {\n            \"id\": \"01\",\n            \"action\": \"add\",\n            \"billingAccount\": [\n                {\n                    \"id\": \"{{baseEntityPrefix}}_UA_3\"\n                }\n            ],\n            \"productOffering\": {\n                \"id\": \"{{baseEntityPrefix}}_OFFER3\"\n            },\n            \"product\": {\n                \"productCharacteristic\": [\n                    {\n                        \"name\": \"subscriptionCode\",\n                        \"value\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_ORDER_OLD\"\n                    },\n                    {\n                        \"name\": \"subscriptionDate\",\n                        \"value\": \"2007-10-13T15:10:18Z\"\n                    }\n                ],\n                \"productRelationship\": [\n                    {\n                        \"type\": \"bundled\",\n                        \"product\": {\n                            \"productCharacteristic\": [\n                                {\n                                    \"name\": \"serviceCode\",\n                                    \"value\": \"{{baseEntityPrefix}}_SERVICE3\"\n                                },\n                                {\n                                    \"name\": \"quantity\",\n                                    \"value\": \"1\"\n                                },\n                                {\n                                    \"name\": \"subscriptionDate\",\n                                    \"value\": \"2007-10-13T15:36:18+08:00\"\n                                },\n                                {\n                                    \"name\": \"{{baseEntityPrefix}}_SERVICE_CF_STRING\",\n                                    \"value\": \"Service CF value\"\n                                }\n                            ]\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/orderManagement/productOrder",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"orderManagement",
												"productOrder"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create new order",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "5bc90cd2-2813-455c-a1ad-70273991052c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"description\": \"{{entityPrefix}}_{{index}}_ORDER_OLD\",\n    \"orderDate\": \"2018-10-13T15:50:48+08:00\",\n    \"billingCycle\": \"CYC_INV_MT_3\",\n    \"orderItem\": [\n        {\n            \"id\": \"01\",\n            \"action\": \"add\",\n            \"billingAccount\": [\n                {\n                    \"id\": \"{{baseEntityPrefix}}_UA_3\"\n                }\n            ],\n            \"productOffering\": {\n                \"id\": \"{{baseEntityPrefix}}_OFFER3\"\n            },\n            \"product\": {\n                \"productCharacteristic\": [\n                    {\n                        \"name\": \"subscriptionCode\",\n                        \"value\": \"{{baseEntityPrefix}}_{{index}}_GDPR_SUB_ORDER_NEW\"\n                    },\n                    {\n                        \"name\": \"subscriptionDate\",\n                        \"value\": \"2007-10-13T15:10:18Z\"\n                    }\n                ],\n                \"productRelationship\": [\n                    {\n                        \"type\": \"bundled\",\n                        \"product\": {\n                            \"productCharacteristic\": [\n                                {\n                                    \"name\": \"serviceCode\",\n                                    \"value\": \"{{baseEntityPrefix}}_SERVICE3\"\n                                },\n                                {\n                                    \"name\": \"quantity\",\n                                    \"value\": \"1\"\n                                },\n                                {\n                                    \"name\": \"subscriptionDate\",\n                                    \"value\": \"2018-10-13T15:36:18+08:00\"\n                                },\n                                {\n                                    \"name\": \"{{baseEntityPrefix}}_SERVICE_CF_STRING\",\n                                    \"value\": \"Service CF value\"\n                                }\n                            ]\n                        }\n                    }\n                ]\n            }\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/orderManagement/productOrder",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"orderManagement",
												"productOrder"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "Invoice",
							"item": [
								{
									"name": "Create BillingCycle",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "1c259106-53ef-405a-ae95-95c161858ff0",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"CYC_INV_MT_GDPR_{{index}}\",\n    \"description\": \"Monthly Invoice Cycle GDPR_{{index}}\",\n    \"transactionDateDelay\": \"0\",\n    \"invoiceDateProductionDelay\": \"0\",\n    \"dueDateDelay\": \"2\",\n    \"invoiceDateDelay\": \"4\",\n    \"calendar\": \"MONTHLY\",\n    \"invoiceTypeCode\": \"COM\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billingCycle/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billingCycle",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create InvoiceType",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "64ed65cf-10d1-462f-8c3a-663a8830d0c1",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_GDPR\",\n    \"description\": \"{{entityPrefix}}_{{index}}_GDPR\",\n    \"occTemplateCode\": \"INV_STD\",\n    \"occTemplateNegativeCode\": \"PAY_TIP\",\n    \"sequenceDto\": {\n        \"prefixEL\": \"Fact_\",\n        \"sequenceSize\": \"9\",\n        \"currentInvoiceNb\": \"5000\"\n    },\n    \"appliesTo\": [\n        \"COM\"\n    ],\n    \"useSelfSequence\": \"true\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoiceType",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoiceType"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create Billing Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd571c3c-2361-4924-855c-c2721a90957e",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_BA_GDPR\",\n    \"description\": \"{{entityPrefix}}_{{index}}_BA_GDPR\",\n    \"name\": {\n        \"title\": \"MR\",\n        \"firstName\": \"Edward\",\n        \"lastName\": \"Legaspi\"\n    },\n    \"address\": {\n        \"address1\": \"adress1\",\n        \"address2\": \"address2\",\n        \"address3\": \"adress3\",\n        \"zipCode\": \"21000\",\n        \"city\": \"Dijon\",\n        \"country\": \"France\"\n    },\n    \"customerAccount\": \"{{baseEntityPrefix}}_CA_3\",\n    \"billingCycle\": \"CYC_INV_MT_GDPR_{{index}}\",\n    \"country\": \"FR\",\n    \"language\": \"FRA\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/billingAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"billingAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create User Account",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f62dcf6f-dd2e-487b-b5e0-4413db0aab56",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_UA_GDPR\",\n    \"description\": \"{{entityPrefix}}_{{index}}_UA_GDPR\",\n    \"billingAccount\": \"{{entityPrefix}}_{{index}}_BA_GDPR\",\n    \"name\": {\n        \"title\": \"MR\",\n        \"firstName\": \"Edward\",\n        \"lastName\": \"Legaspi\"\n    },\n    \"address\": {\n        \"address1\": \"adress1\",\n        \"address3\": \"adress3\",\n        \"zipCode\": \"21000\",\n        \"city\": \"Dijon\",\n        \"country\": \"France\"\n    }\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/account/userAccount/createOrUpdate",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"account",
												"userAccount",
												"createOrUpdate"
											]
										}
									},
									"response": []
								},
								{
									"name": "Created sub",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "8ad8e310-d0b5-4dea-969d-876024d18cff",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"{{entityPrefix}}_{{index}}_GDPR_SUB\",\n    \"description\": \"{{entityPrefix}}_{{index}}_GDPR_SUB\",\n    \"userAccount\": \"{{entityPrefix}}_{{index}}_UA_GDPR\",\n    \"offerTemplate\": \"{{baseEntityPrefix}}_OFFER3\",\n    \"subscriptionDate\": \"2018-08-13\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription"
											]
										}
									},
									"response": []
								},
								{
									"name": "Apply one shot",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "30660e21-8e39-488f-96aa-b3510b52f40c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"oneShotCharge\": \"{{baseEntityPrefix}}_OS_OTHER\",\n    \"subscription\": \"{{entityPrefix}}_{{index}}_GDPR_SUB\",\n    \"operationDate\": \"2018-08-13\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/subscription/applyOneShotChargeInstance",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"subscription",
												"applyOneShotChargeInstance"
											]
										}
									},
									"response": []
								},
								{
									"name": "Run RT",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "fd64cfe0-f3a9-43ec-add4-69fd21b939c2",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"RT_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create BR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "861411d7-1009-4b37-b7ab-274d4fc5665f",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.contain(\"\");",
													"    pm.globals.set(\"billingRunId\", jsonData.message);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"billingCycleCode\": \"CYC_INV_MT_GDPR_{{index}}\",\n    \"billingRunTypeEnum\": \"AUTOMATIC\",\n    \"lastTransactionDate\": \"2018-08-31\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/billing/invoicing/createBillingRun",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"billing",
												"invoicing",
												"createBillingRun"
											]
										}
									},
									"response": []
								},
								{
									"name": "Invoicing Job",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "63939aef-4225-4266-bc5d-00864c01b11c",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"Inv_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								},
								{
									"name": "Validate BR",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "f1940699-afe6-4a61-9576-fe4282815839",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"xmlns:soapenv\": \"http://schemas.xmlsoap.org/soap/envelope/\",\n    \"xmlns:ws\": \"http://ws.api.meveo.org/\",\n    \"soapenv:Body\": {\n      \"ws:validateBillingRun\": { \"billingRunId\": \"1\" }\n    }\n  }",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												""
											]
										}
									},
									"response": []
								},
								{
									"name": "Create invoice",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "71016f22-801e-46ea-b9df-2d6ab1957144",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"invoiceType\": \"{{entityPrefix}}_{{index}}_GDPR\",\n    \"billingAccountCode\": \"{{entityPrefix}}_{{index}}_BA_GDPR\",\n    \"dueDate\": \"2007-10-13\",\n    \"invoiceDate\": \"2007-10-13\",\n    \"invoiceMode\": \"AGGREGATED\",\n    \"categoryInvoiceAgregate\": [\n        {\n            \"categoryInvoiceCode\": \"SUBSCRIPTION\",\n            \"description\": \"SUBSCRIPTION\",\n            \"subCategoryInvoiceAgregateDto\": [\n                {\n                    \"description\": \"SUB_DATA\",\n                    \"invoiceSubCategoryCode\": \"SUB_DATA\",\n                    \"amountWithoutTax\": \"100\",\n                    \"amountTax\": \"20\",\n                    \"amountWithTax\": \"120\",\n                    \"ratedTransaction\": [\n                        {\n                            \"code\": \"WS_BASE_OS_OTHER\",\n                            \"unitAmountWithoutTax\": \"100\",\n                            \"amountWithoutTax\": \"100\",\n                            \"quantity\": \"1\",\n                            \"description\": \"API\"\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/invoice",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"invoice"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						},
						{
							"name": "GDPR",
							"item": [
								{
									"name": "Create GPDR Job",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2ab2418d-946b-4315-ad29-017715236e8b",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.message).to.eql(\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"GDPR_Job\",\n    \"description\": \"GDPR_Job\",\n    \"jobTemplate\": \"GDPRJob\",\n    \"timerCode\": \"Monthly\",\n    \"jobCategory\": \"DWH\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/jobInstance/create",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"jobInstance",
												"create"
											]
										}
									},
									"response": []
								},
								{
									"name": "Run GDPR Job",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7d236646-1731-4488-8d41-44074c4b16f5",
												"exec": [
													"pm.test(request.name + \" - Check Code\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(request.name + \" - Check Status\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.status).to.eql(\"SUCCESS\");",
													"});",
													"",
													"pm.test(request.name + \" - Check ErrorCode\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.errorCode).to.eql();",
													"});",
													"",
													"pm.test(request.name + \" - Check Message\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.expect(jsonData.actionStatus.message).to.eql(jsonData.jobExecutionResultDto.id+\"\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "basic",
											"basic": [
												{
													"key": "password",
													"value": "{{opencell.password}}",
													"type": "string"
												},
												{
													"key": "username",
													"value": "{{opencell.username}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Basic b3BlbmNlbGwuYWRtaW46b3BlbmNlbGwuYWRtaW4="
											},
											{
												"key": "Content-Type",
												"name": "Content-Type",
												"type": "text",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"code\": \"GDPR_Job\"\n}",
											"options": {
												"raw": {}
											}
										},
										"url": {
											"raw": "{{opencell.url}}/job/execute",
											"host": [
												"{{opencell.url}}"
											],
											"path": [
												"job",
												"execute"
											]
										}
									},
									"response": []
								}
							],
							"protocolProfileBehavior": {},
							"_postman_isSubFolder": true
						}
					],
					"protocolProfileBehavior": {},
					"_postman_isSubFolder": true
				}
			],
			"description": "# FullCRUD\r\n\r\nHere are migrated scenarios from Soap FullCRUD.\r\n\r\n## Table\r\n\r\n| Scenarios                        | State       |\r\n|----------------------------------|-------------|\r\n| Setup base data                  | OK          |\r\n| Service workflow                 | OK          |\r\n| Subscription workflow            | OK          |\r\n| Subscription with Inherited CF   | OK          |\r\n| EL expression tests              | OK          |\r\n| Custom Fields in Filters         | todo        |\r\n| Entity Customization             | OK          |\r\n| Entity Security                  | OK          |\r\n| Workflow executions              | OK          |\r\n| Filter search and invoicing      | todo        |\r\n| Inbound Request Tests            | todo        |\r\n| Jobs                             | todo        |\r\n| Reporting                        | todo        |\r\n| GDPR Erasure                     | todo        |\r\n| Remove base data                 | todo        |\r\n| Banking Calendar and Date status | todo        |",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "8ca2b464-8b3f-4762-a2ed-ae063a0f78c3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "cf721b3e-e914-4d2b-bf4a-2af8c18bec10",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"protocolProfileBehavior": {}
}